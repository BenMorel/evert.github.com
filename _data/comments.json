{
    "": [
        {
            "created": "2013-04-13T20:17:12Z",
            "name": "Evert",
            "disqusUser": "evertp",
            "message": "<p>Testing the new comment system</p>",
            "children": [],
            "url": "https://evertpot.com/",
            "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
        }
    ],
    "/switching-to-php-54-on-os-x": [
        {
            "created": "2013-04-30T11:39:11Z",
            "name": "Vladimir",
            "disqusUser": "",
            "message": "<p>I'm not a big fan of homebrew. I use this: <a href=\"http://php-osx.liip.ch/\" rel=\"nofollow noopener\" title=\"http://php-osx.liip.ch/\">http://php-osx.liip.ch/</a><br>Works like a charm :)</p>",
            "children": []
        },
        {
            "created": "2013-08-21T14:54:38Z",
            "name": "Pei Wu",
            "disqusUser": "peiwu",
            "message": "<p>This is very helpful, thank you</p>",
            "children": []
        },
        {
            "created": "2015-08-06T23:29:54Z",
            "name": "Magento Developer",
            "disqusUser": "magepsycho",
            "message": "<p>How would you switch in case of nginx + php-fpm?</p>",
            "children": []
        }
    ],
    "/107": [
        {
            "created": "2014-03-02T18:58:43Z",
            "name": "AintNoOne",
            "disqusUser": "",
            "message": "<p>Thanks. That helped a lot. What complications might arise from using a file-based caching solution with a multiple web server setup?</p>",
            "children": [
                {
                    "created": "2014-03-04T13:40:35Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>You're commenting on an 8 year old post ;) But the main issue is that the files will only be on 1 machine, not on both. Unless you're using a network filesystem, which is slow and often a bad idea.</p>",
                    "children": [
                        {
                            "created": "2014-03-05T10:04:29Z",
                            "name": "AintNoOne",
                            "disqusUser": "",
                            "message": "<p>Thanks. Yes I noticed the age of the article after I posted. Haha. Still just as relevant today, (I think?).</p><p>My brain still struggles with understanding when and why one should abstract a class like is done above. For example, if you had defined a $cacheEngine variable in your config file to leverage the flexibility of abstraction, then wouldn't your call to the addServer method blow up for all of the objects except for Sabre_Cache_MemCache?</p>",
                            "children": [
                                {
                                    "created": "2014-03-05T15:42:31Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>That's a good question.</p><p>The best way I can explain this, is that you have to separate 'using the cache engine' and 'setting up the cache engine'.</p><p>'Using the cache engine' here means calling methods such as fetch, store and delete. This is identical for every engine.</p><p>Generally, with a lot of OOP modelling, 'how an object is set up' is not important. We only concern ourselves with abstraction after setup.</p><p>So the short answer is, objects that use 'any generic cache engine' to store information, never call addServer().</p>",
                                    "children": [
                                        {
                                            "created": "2014-03-06T09:35:16Z",
                                            "name": "Ano",
                                            "disqusUser": "",
                                            "message": "<p>Thanks Evert</p>",
                                            "children": []
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-04-16T04:37:02Z",
            "name": "AskAmN",
            "disqusUser": "disqus_1myRNSIVRL",
            "message": "<p>Wrong:</p><p>$cache = new Sabre_Cache_MemCache();</p><p>Should be:<br>$cache = new Sabre_Cache_MemCache;</p><p>:)</p>",
            "children": [
                {
                    "created": "2014-04-16T04:38:44Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Both actually works, and the former form is more common in most php code.</p>",
                    "children": [
                        {
                            "created": "2014-04-16T07:22:19Z",
                            "name": "AskAmN",
                            "disqusUser": "disqus_1myRNSIVRL",
                            "message": "<p>I believe its just like when we have a constructor,</p><p>$class = new class(\"constructor_value\");</p><p>Thanks, I understood.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-07-02T13:01:34Z",
            "name": "Andre de Andrade",
            "disqusUser": "andredeandrade",
            "message": "<p>My /tmp is small, only 1GB. I need more space. How can I change the directory to store? In APC i am using /dev/shm as tmpfs, but it's not the ideal solution. Thanks for support.</p>",
            "children": []
        },
        {
            "created": "2015-04-14T16:02:58Z",
            "name": "Majid",
            "disqusUser": "",
            "message": "<p>thanks. really cool.</p>",
            "children": []
        },
        {
            "created": "2017-05-30T10:31:27Z",
            "name": "Meritei Covercloud",
            "disqusUser": "meriteicovercloud",
            "message": "<p>Thanks.I hope am going to be able to implement this successfully.</p>",
            "children": []
        }
    ],
    "/231": [
        {
            "created": "2013-10-29T14:04:59Z",
            "name": "kellogs",
            "disqusUser": "disqus_iG0dGRlhnI",
            "message": "<p>Very good stuff, especially since you have had a \"real-life\" set of data to test against. Will attempt an Hilbert curve implementation and share my experience on SO.</p>",
            "children": []
        },
        {
            "created": "2015-02-08T16:09:46Z",
            "name": "James Peterson",
            "disqusUser": "",
            "message": "<p>Hello, thank you very much for this! Here is some extra resources for PostgreSQL Users:</p><p><a href=\"http://www.spatialdbadvisor.com/postgis_tips_tricks/169/morton-key-function-for-postgresql-postgis\" rel=\"nofollow noopener\" title=\"http://www.spatialdbadvisor.com/postgis_tips_tricks/169/morton-key-function-for-postgresql-postgis\">http://www.spatialdbadvisor...</a></p><p>I made some tweaks to the above link to support large inputs (latitude/longitude coordinates in my case) to support precision up to 4 decimal places. As <a href=\"http://spatialdbadvisor.com\" rel=\"nofollow noopener\" title=\"spatialdbadvisor.com\">spatialdbadvisor.com</a>'s script threw \"int out of range\" errors.</p><p>See edit here:</p><p><a href=\"http://pastebin.com/zzSU4X7J\" rel=\"nofollow noopener\" title=\"http://pastebin.com/zzSU4X7J\">http://pastebin.com/zzSU4X7J</a></p><p>And further proofs on random set of coordinates:</p><p>Sample size 10,000: <a href=\"http://oi62.tinypic.com/2448pvk.jpg\" rel=\"nofollow noopener\" title=\"http://oi62.tinypic.com/2448pvk.jpg\">http://oi62.tinypic.com/244...</a></p><p>Sample size 1,000: <a href=\"http://oi60.tinypic.com/r0pp5i.jpg\" rel=\"nofollow noopener\" title=\"http://oi60.tinypic.com/r0pp5i.jpg\">http://oi60.tinypic.com/r0p...</a></p><p>Sample size 100: <a href=\"http://oi58.tinypic.com/10py0pf.jpg\" rel=\"nofollow noopener\" title=\"http://oi58.tinypic.com/10py0pf.jpg\">http://oi58.tinypic.com/10p...</a></p><p>I use the procedure like so to improve record locality on hard disk:</p><p>---</p><p>alter my_table add column morton_col int8;</p><p>update my_table set morton_col = morton(cast(trunc(least(longitude_col+180,360)*10000) as int8), cast(trunc(least(latitude_col+90,180)*10000) as int8));</p><p>create index idx_morton_col on my_table(morton_col) with (fillfactor=100);</p><p>cluster my_table using idx_morton_col;</p><p>---</p><p>The multiplication by 10,000 ensures that the coordinate is represented to a precision of 4 decimal places when encoded as a morton value (which is going to represent an accuracy of around 11.1 meters even at the equator - more than precise enough!)</p>",
            "children": []
        },
        {
            "created": "2015-02-08T22:49:12Z",
            "name": "SpatialDBAdvisor",
            "disqusUser": "",
            "message": "<p>The morton key implementation on my website is an almost direct translation of the original David Mark algorithm. That algorithm was implemented in C and used unsigned 32 bit integers.</p><p>I have used the morton implementation on my site a lot on a lot of data and have not come across the overflow errors. I am not saying that they won't exist for I have never tried creating morton keys for lat/long data, or the merits of treating unequal lat/long ranges as one would planar data. But let's assume that it is OK to do so, what data range is being indexed (is it the whole world)? How big are the Col/Row grids (4 decimal digits of a degree); How many grids are to be created in x and y direction? Does the morton grid start with 0 0 as the lower left corner? Whether the Row/Col ranges are equal (a recommended requirement for a morton key)?</p><p>The only comment I have is why the introduction of the (Oracle implementation) Left_Shift function? Postgresql's \"&lt;&lt;\" operator implements a bitwise shift left:</p><p>select 2::int8 &lt;&lt; 2 as result;<br>result<br>bigint<br>     8</p><p>Which is same as:</p><p>select left_shift(2,2) as result;result<br>bigint<br>8</p><p>I will update the parameters to int8 in the function on my site.</p><p>Thanks<br>Simon</p>",
            "children": []
        },
        {
            "created": "2015-02-08T22:54:23Z",
            "name": "SpatialDBAdvisor",
            "disqusUser": "",
            "message": "<p>Morton use is subject to the restrictions I record on my site:</p><p>\"There is a restriction to how a Morton space curve can be applied: the grid must be regular. This means that while the X and Y dimensions of the grid may be different (ie giving a rectangle not a square) the number of grids either side must be the *same* (ie a 100x100 grid not a 150x100 grid). Another requirement that affects the generation of a correct space curve is that the (row,column) index values must always be the same. So, in a 100x100 grid the lower left grid should be referenced as (0,0) or (1234,1234) and not (0,1) or (1234, 3456).\"</p>",
            "children": []
        },
        {
            "created": "2015-02-09T07:28:32Z",
            "name": "SpatialDBAdvisor",
            "disqusUser": "",
            "message": "<p>Here is David Mark's implementation of a Hilbert Curve in C</p><p>#define XMAX 255<br>#define YMAX 255<br>#define LEVEL 8<br>unsigned int xy_to_hilbert (x,y)<br>unsigned int x,y;<br>/**************************************************************/<br>/*                                                            */<br>/*      converts xy to Hilbert-Peano key                      */<br>/*                                                            */<br>/*      Written: David M. Mark, CSIRO-DIT CSIS, Sept 1988     */<br>/*                                                            */<br>/**************************************************************/<br>/**************************************************************/<br>/*   first, an 'almost dummy' procedure to add parameters to  */<br>/*   a simple call                                            */<br>/**************************************************************/<br>{<br>unsigned int order[4];<br>unsigned int xy_to_hlbt ();<br>order[0]=0; order[1]=1; order[2]=3; order[3]=2;<br>return (xy_to_hlbt (x,y,XMAX,YMAX,order,LEVEL));<br>}</p><p>/**************************************************************/<br>/*   and next, the actual recursive procedure, renamed        */<br>/*   xy_to_hlbt()                                             */<br>/**************************************************************/<br>unsigned int xy_to_hlbt (x,y,xmax,ymax,order,level)<br>unsigned int x,y,xmax,ymax,order[],level;<br>{<br>unsigned int half_side,add_key,child,temp,q,i;<br>if (level==0)<br>return (0);<br>else<br>/* determine q, the Morton quad containing x,y */<br>{<br>half_side = 01&lt;&lt;(level-1);<br>if (x &gt; (xmax-half_side))<br>if (y &gt; (ymax-half_side)) q=3;<br>else                      q=1;<br>elseif (y &gt; (ymax-half_side)) q=2;<br>else                      q=0;<br>/* now determine which 'child' of the parent quad the current x,y falls in                      */<br>for (i=0; i&lt;4; i++)<br>if (order[i]==q) child=i;<br>/* add_key is the contribution to the key of the current bit_pair                              */<br>add_key = child&lt;&lt;(2*(level-1));<br>/* modify xmax and xmax to those of the current q */<br>if ((q==0)||(q==2)) xmax -= half_side;<br>if ((q==0)||(q==1)) ymax -= half_side;<br>/* now, if we are in the first (0) or last (3) child<br>   of the parent quad, we must change the order of the<br>   children for the next level of recursion         */<br>if (child==0)<br>{<br>temp     = order[1];<br>order[1] = order[3];<br>order[3] = temp;<br>}<br>if (child==3)<br>{<br>temp     = order[0];<br>order[0] = order[2];<br>order[2] = temp;<br>}<br>/* finally, make a recursive call, and add 'add_key' to the result                                   */<br>return ((xy_to_hlbt(x,y,xmax,ymax,order,(level-1))) + add_key);<br>}<br>}</p><p>regards<br>Simon</p>",
            "children": []
        }
    ],
    "/223": [
        {
            "created": "2013-06-20T07:25:01Z",
            "name": "Ivan",
            "disqusUser": "",
            "message": "<p>Good example!</p>",
            "children": []
        },
        {
            "created": "2013-10-21T06:24:46Z",
            "name": "Roger Qiu",
            "disqusUser": "CMCDragonkai",
            "message": "<p>Could you expand on this part:</p><p>} elseif (isset($_SERVER['HTTP_AUTHENTICATION'])) {</p><p>            if (strpos(strtolower($_SERVER['HTTP_AUTHENTICATION']),'digest')===0)<br>              $digest = substr($_SERVER['HTTP_AUTHORIZATION'], 7);<br>}</p><p>I've never seen $_SERVER['HTTP_AUTHENTICATION'] in the wild. And wouldn't getallheaders() PHP 5.4 deal with that?</p>",
            "children": [
                {
                    "created": "2013-10-22T16:46:03Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Roger,</p><p>It suppose getallheaders() may give that information. But this blogpost was written in 2009, way before PHP 5.4 was out.</p><p>This specific code actually still lives on though, but it's been rewritten and refactored a number of times. The workaround is still in there though, along with a few new ones for other situations:</p><p><a href=\"https://github.com/fruux/sabre-http/blob/master/lib/Sabre/HTTP/Request.php#L109\" rel=\"nofollow noopener\" title=\"https://github.com/fruux/sabre-http/blob/master/lib/Sabre/HTTP/Request.php#L109\">https://github.com/fruux/sa...</a></p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-05-01T18:47:38Z",
            "name": "Thomas Wacker",
            "disqusUser": "",
            "message": "<p>Excellent. The best article on that topic i found, so far. And i was was searching a while.</p>",
            "children": []
        },
        {
            "created": "2014-06-25T16:22:29Z",
            "name": "Paul M. Jones",
            "disqusUser": "pmjones",
            "message": "<p>Evert, should that be HTTP_AUTHORIZATION and not HTTP_AUTHENTICATION in the \"Basic\" example?</p>",
            "children": [
                {
                    "created": "2014-06-25T17:28:33Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Yes, it totally should. Weird that this got unnoticed for 5 years. Fixed the example. That code eventually made it's way to here:</p><p><a href=\"https://github.com/fruux/sabre-http/blob/master/lib/Sabre/HTTP/Auth/Basic.php\" rel=\"nofollow noopener\" title=\"https://github.com/fruux/sabre-http/blob/master/lib/Sabre/HTTP/Auth/Basic.php\">https://github.com/fruux/sa...</a></p><p>EDIT: looks like someone did point it out 8 months ago, but I missed the first half of his comment.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-02-15T02:07:23Z",
            "name": "Matt Robinson",
            "disqusUser": "disqus_hrTbgkh6ko",
            "message": "<p>Thank you good sir! Works like a charm.</p>",
            "children": []
        },
        {
            "created": "2015-03-24T19:28:48Z",
            "name": "jejjcop",
            "disqusUser": "",
            "message": "<p>Thank you, worked great!</p>",
            "children": []
        },
        {
            "created": "2015-06-03T17:25:46Z",
            "name": "Eduardo Domanski",
            "disqusUser": "eduardodomanski",
            "message": "<p>Hi Evert,</p><p>I've been running some examples to understand Digest authentication, and realized that, for some unknown reason, realm gets lost and when my \"digest.php\" (server side) try to compare the hash sent with the one it generated, they don't match. After some tests, I figured it out. My client's hash is generated with no value for the Realm, but I have no idea why. Do you why is why this happening?</p><p>Apache has the Digest mod enabled;</p><p>Here are the headers:</p><p>* Hostname localhost was found in DNS cache<br>*   Trying ::1...<br>* Connected to localhost (::1) port 80 (#0)<br>* Server auth using Digest with user 'admin'<br>&gt; PUT /testes/digest.php HTTP/1.1<br>Host: localhost<br>Accept: */*<br>&lt; HTTP/1.1 401 Unauthorized<br>&lt; Date: Wed, 03 Jun 2015 17:20:35 GMT<br>&lt; Server: Apache/2.4.12 (Win32) PHP/5.6.9<br>&lt; X-Powered-By: PHP/5.6.9<br>&lt; WWW-Authenticate: Digest realm=\"Restricted area\",qop=\"auth\",nonce=\"556f3763cb0c5\",opaque=\"cdce8a5c95a1427d74df7acbf41c9ce0\"<br>&lt; Content-Length: 39<br>&lt; Content-Type: text/html; charset=UTF-8<br>&lt; <br>* Ignoring the response-body<br>* Connection #0 to host localhost left intact</p><p>* Issue another request to this URL: 'http://localhost/testes/digest.php'<br>* Found bundle for host localhost: 0x3634758<br>* Re-using existing connection! (#0) with host localhost<br>* Connected to localhost (::1) port 80 (#0)<br>* Server auth using Digest with user 'admin'<br>&gt; PUT /testes/digest.php HTTP/1.1</p><p>Host: localhost<br>Authorization: Digest username=\"admin\",realm=\"\",nonce=\"556f3763cb0c5\",uri=\"/testes/digest.php\",cnonce=\"3a878588e10c08bd236afc6f2fb54cad\",nc=00000001,response=\"a7832b1009be21cd46225ea659a20243\",qop=\"auth\",opaque=\"cdce8a5c95a1427d74df7acbf41c9ce0\"</p><p>Accept: */*<br>&lt; HTTP/1.1 200 OK //Here it prints the message Wrong credentials (as I'm running the <a href=\"http://php.net\" rel=\"nofollow noopener\" title=\"php.net\">php.net</a> digest example.)<br>&lt; Date: Wed, 03 Jun 2015 17:20:35 GMT<br>&lt; Server: Apache/2.4.12 (Win32) PHP/5.6.9<br>&lt; X-Powered-By: PHP/5.6.9<br>&lt; Content-Length: 20<br>&lt; Content-Type: text/html; charset=UTF-8</p><p>&lt;</p><p>* Connection #0 to host localhost left intact</p><p>Thank you</p>",
            "children": []
        },
        {
            "created": "2015-09-25T14:48:21Z",
            "name": "BMA C-I-C",
            "disqusUser": "bmachairman",
            "message": "<p>Works like a champ! :)</p>",
            "children": []
        },
        {
            "created": "2015-09-25T15:29:07Z",
            "name": "BMA C-I-C",
            "disqusUser": "bmachairman",
            "message": "<p>Can the digest script be modified to have an array of valid usernames and passwords from a database?</p>",
            "children": []
        },
        {
            "created": "2017-11-08T14:49:13Z",
            "name": "567675765767567575765675757657",
            "disqusUser": "",
            "message": "<p>gfdgfgfhjhgjjhjgkghjkgkghjkkjkgkgkjkjhgkjhgkhkhgkgkgkgkgkghkghkjghkghkhgkhgkhgkhkjhgkghkgkgkkgkhkkghkjhkjhkjhgtyuutyyuruy6uyyuyiuyuiuiuuitiutityiyiuyiyiyuiyiytiyiuytiuytuiiiytivbvcvnnnnnvbnnvbncnvf</p>",
            "children": []
        },
        {
            "created": "2017-11-08T14:50:14Z",
            "name": "567675765767567575765675757657",
            "disqusUser": "",
            "message": "<p>hjhkjhkjhdkjhkhhdjhdkjhjkhhhjddkjfkjfkjkljkfkdhfkjhfhdkhkfhkdhkshfjkdhiyeiuwryiuewyruiyhfhdjgfurgasfsdssgvatrsvarsghikatytyeryreyeyreyeryreyryreyryeryeryeryryeryeryyyeryeyyeyttyeyyryyeryteyeryteyteyeyetyyeytetyeytryeyebbvcbcbbbnvbnnnn</p>",
            "children": []
        },
        {
            "created": "2018-03-10T19:36:18Z",
            "name": "testc",
            "disqusUser": "",
            "message": "<p>hey</p>",
            "children": []
        },
        {
            "created": "2018-03-10T19:38:46Z",
            "name": "google",
            "disqusUser": "",
            "message": "<p><a href=\"duckduckgo.com\" rel=\"nofollow noopener\" title=\"duckduckgo.com\">duck hahaha</a></p>",
            "children": []
        }
    ],
    "/267": [
        {
            "created": "2015-07-09T09:02:20Z",
            "name": "Subramanya",
            "disqusUser": "",
            "message": "<p>Hello Evert,</p><p>I am very new to CalDAV and I want to implement a caldav server which could help to synchronize calendar events.</p><p>Big picture: I am working on a java based application, which has its own database and calendar feature.</p><p>Now I want to develop a server, which would help me to synchronize my events/tasks in my application to apps in my cell phone or tablet.</p><p>As I am novice, I do not know where to start, could you please throw some light from where I could start?</p><p>Info: i want to develop this in server in Java and also I have started reading RFC 4791.</p><p>Thank you,<br>Subramanya</p>",
            "children": [
                {
                    "created": "2015-07-09T15:57:20Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>You'll need to have a full understanding of the following rfcs:</p><p><a href=\"http://tools.ietf.org/html/rfc4918\" rel=\"nofollow noopener\" title=\"http://tools.ietf.org/html/rfc4918\">http://tools.ietf.org/html/...</a><br><a href=\"http://tools.ietf.org/html/rfc3744\" rel=\"nofollow noopener\" title=\"http://tools.ietf.org/html/rfc3744\">http://tools.ietf.org/html/...</a><br><a href=\"http://tools.ietf.org/html/rfc4791\" rel=\"nofollow noopener\" title=\"http://tools.ietf.org/html/rfc4791\">http://tools.ietf.org/html/...</a></p><p>Those are the best starting points. This is not an easy job. Don't expect to be done within a few months if you're starting from scratch.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/filesystem-encoding-and-php": [
        {
            "created": "2013-10-09T10:18:15Z",
            "name": "Erwin Moller",
            "disqusUser": "",
            "message": "<p>Thank you for posting this.</p><p>I was pulling out my hairs with this issue on Win2008, and I cannot solve it.<br>I have filenames with accents, and PHP refuses to open them.</p><p>SInce storing the files as with different names isn't an option, I must keep on searching.</p><p>I am going to try my hand at comp.lang.php</p>",
            "children": []
        },
        {
            "created": "2013-11-19T17:35:09Z",
            "name": "Nicolas Grekas",
            "disqusUser": "nicolasgrekas",
            "message": "<p>On Windows, you might try using COM objects:<br><a href=\"https://gist.github.com/nicolas-grekas/2665437\" rel=\"nofollow noopener\" title=\"https://gist.github.com/nicolas-grekas/2665437\">https://gist.github.com/nic...</a></p>",
            "children": []
        },
        {
            "created": "2014-05-28T09:38:13Z",
            "name": "sdcd",
            "disqusUser": "disqus_Z04PJOfnmm",
            "message": "<p>OKS</p>",
            "children": []
        },
        {
            "created": "2014-12-06T11:36:17Z",
            "name": "Kybrex",
            "disqusUser": "",
            "message": "<p>Great and useful post! :) Thx.</p>",
            "children": []
        },
        {
            "created": "2017-04-25T21:25:42Z",
            "name": "Peter",
            "disqusUser": "disqus_0Z7NkNQFut",
            "message": "<p>Using non-latin characters in filenames works with the php framework rexo (<a href=\"http://rexo.ch\" rel=\"nofollow noopener\" title=\"http://rexo.ch\">http://rexo.ch</a>). I tested under windows, php 6.</p>",
            "children": []
        }
    ],
    "/189": [
        {
            "created": "2013-05-03T23:44:55Z",
            "name": "Lukas",
            "disqusUser": "",
            "message": "<p>Aaaaaa! You are amazing! Thank you, thank you, thank you, thank you!</p><p>Do you know how many hours I spent trying to get access to my stuff which was 150km from me?<br>Thank you and Tero's glob!</p>",
            "children": []
        },
        {
            "created": "2014-02-02T00:53:33Z",
            "name": "Skia",
            "disqusUser": "",
            "message": "<p>Thanks a lot, it saved my night! :)</p>",
            "children": []
        },
        {
            "created": "2014-12-21T08:45:32Z",
            "name": "james",
            "disqusUser": "",
            "message": "<p>thankssss</p>",
            "children": []
        },
        {
            "created": "2015-12-01T23:39:16Z",
            "name": "platzh1rsch",
            "disqusUser": "platzh1rsch",
            "message": "<p>thank you! very helpful!</p>",
            "children": []
        },
        {
            "created": "2017-04-09T12:16:14Z",
            "name": "Mathieu - L'Essence du m\u00e2le",
            "disqusUser": "mathieubzl",
            "message": "<p>Thank you !!!!</p>",
            "children": []
        }
    ],
    "/silex-routing-issues": [
        {
            "created": "2014-09-11T00:45:43Z",
            "name": "Esteban Kiteboarding",
            "disqusUser": "estebankiteboarding",
            "message": "<p>did u found a solution to avoid the trailing slash on mounted Controllers ?</p>",
            "children": []
        }
    ],
    "/68": [
        {
            "created": "2015-06-19T10:44:47Z",
            "name": "Frank Cieslik",
            "disqusUser": "fraank",
            "message": "<p>Wow, really cool! I've never seen that before.. ;)</p>",
            "children": []
        }
    ],
    "/icalendar-vcard-parser-for-php": [
        {
            "created": "2014-02-18T13:48:04Z",
            "name": "Danilo",
            "disqusUser": "",
            "message": "<p>Of great help! Thanks.</p>",
            "children": []
        }
    ],
    "/201": [],
    "/slowdeath-a-simple-denial-of-service-attack-for-most-php-based-servers": [
        {
            "created": "2015-01-12T21:20:43Z",
            "name": "David Willis",
            "disqusUser": "davewillis",
            "message": "<p>I ran this script while driving and I crashed my car! I want my money back.</p>",
            "children": [
                {
                    "created": "2016-12-06T07:56:04Z",
                    "name": "Freethinker 01",
                    "disqusUser": "kalabog76",
                    "message": "<p>It's good that you didn't die a <a href=\"http://slowdeath.py\" rel=\"nofollow noopener\" title=\"slowdeath.py\">slowdeath.py</a></p>",
                    "children": []
                }
            ]
        }
    ],
    "/iconv_substr-vs-mbstring_substr": [
        {
            "created": "2013-05-08T01:51:36Z",
            "name": "James Been",
            "disqusUser": "facebook-100004282353773",
            "message": "<p>thanks for your experiment ,it  take my wonders away!!!!</p>",
            "children": []
        }
    ],
    "/222": [
        {
            "created": "2013-06-23T16:23:00Z",
            "name": "aparimana",
            "disqusUser": "",
            "message": "<p>remember to urlencode() your $string before passing it to fopen - PHP will always urldecode(), to serve the data up, which will cause problems if your input data happens to contain sequences that look like URL encoded characters ( eg input string 'this%26that' will be output 'this&amp;that')</p>",
            "children": [
                {
                    "created": "2013-06-23T17:13:06Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I should really update this post, but I would _not_ recommend using the data:// url. Use php://memory and php://temp instead!</p>",
                    "children": [
                        {
                            "created": "2017-04-23T04:09:09Z",
                            "name": "Nicholas Ruunu",
                            "disqusUser": "nicholasruunu",
                            "message": "<p>Is it possible to write initial data to a read only stream with php://temp?</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2013-11-25T11:01:33Z",
            "name": "Markus",
            "disqusUser": "",
            "message": "<p>instead of base64_encode() in php which consumes a lot of php memory you should use</p><p><code>stream_filter_append($fh, 'convert.base64-encode');</code><br>which is not limited by php-memory limits AFAIK</p>",
            "children": []
        },
        {
            "created": "2015-07-28T18:18:49Z",
            "name": "Jasmine Hegman",
            "disqusUser": "jhegman",
            "message": "<p>Thank you for this fine article w/ update! I know this is old and sort of minor but in your last code example you open the php://memory string with 'r+' and then write to it -- I think that should be 'w+' :o)</p>",
            "children": [
                {
                    "created": "2015-07-28T18:32:47Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>r+ actually works too. Judging from the documentation is looks like the only difference is that w+ creates a new file if it doesn't already exist, but that's not really relevant here.</p>",
                    "children": [
                        {
                            "created": "2015-07-30T02:37:40Z",
                            "name": "Jasmine Hegman",
                            "disqusUser": "jhegman",
                            "message": "<p>Oh you are so right, I don't know what I was thinking! I guess my brain decided to pretend the + symbol was meaningless. :3</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-06-04T04:04:56Z",
            "name": "linoge",
            "disqusUser": "42linoge",
            "message": "<p>Thank you very much for the article, I was looking exactly for this, and it's such a nice thing that you added the update c;</p>",
            "children": []
        },
        {
            "created": "2016-06-24T23:17:00Z",
            "name": "Matt Styles",
            "disqusUser": "MattGStyles",
            "message": "<p>Beautiful, thank you!</p>",
            "children": []
        },
        {
            "created": "2016-11-30T17:07:08Z",
            "name": "Hugo Franco de Campos",
            "disqusUser": "hugofrancodecampos",
            "message": "<p>Is there any concern about keep large strings in memory using fopen? I'm sending a large csv string to a file storage and I have no idea if I should use memory, temp or anything else.</p>",
            "children": []
        },
        {
            "created": "2017-09-02T14:30:17Z",
            "name": "rinogo",
            "disqusUser": "rinogo",
            "message": "<p>Thanks for your short examples on this, especially for the 2013 update!  Exactly what I was looking for.</p>",
            "children": []
        }
    ],
    "/escaping-mysql-strings-with-no-connection-available": [
        {
            "created": "2016-05-06T10:11:50Z",
            "name": "Rob",
            "disqusUser": "",
            "message": "<p>I think the line \"'\"=&gt;\"\\'\", should be \"'\"=&gt;'\\'',</p>",
            "children": []
        }
    ],
    "/147": [
        {
            "created": "2018-03-27T12:51:26Z",
            "name": "John Brynte Turesson",
            "disqusUser": "johnbrynteturesson",
            "message": "<p>I discovered I had the same circular dependency problem by logging the array returned from `get_declared_classes()` (<a href=\"http://php.net/manual/en/function.get-declared-classes.php)\" rel=\"nofollow noopener\" title=\"http://php.net/manual/en/function.get-declared-classes.php)\">http://php.net/manual/en/fu...</a>. At least the horrible error digging made me realise that my code structure was bad :)</p>",
            "children": []
        }
    ],
    "/216": [],
    "/207": [
        {
            "created": "2013-05-05T05:49:07Z",
            "name": "Mantas Narbutis",
            "disqusUser": "mantasnarbutis",
            "message": "<p>hey,</p><p>would like to buy them from you.</p><p>Mantas<br>mantas.narbutis@gmail.com</p>",
            "children": [
                {
                    "created": "2013-05-10T17:02:11Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>You're about 5 years too late :)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2013-06-06T16:13:44Z",
            "name": "Anonymous",
            "disqusUser": "",
            "message": "<p>Just came across your post.....I have this exact same problem with the exact same Sony headphones.  The sound quality is stellar; wish I could say the same for the headband.....  :(</p>",
            "children": []
        }
    ],
    "/248": [
        {
            "created": "2013-11-11T22:05:24Z",
            "name": "STF",
            "disqusUser": "",
            "message": "<p>Property names (as well as parameters) are not case-sensitive. So we can have<br>Begin:VEvent</p><p>but your script does not seem to take this into account.</p><p>Moreover, it's possible to have more than one iCalendar object in an ICS stream/string. So your script would potentially produce mal-formed XML because of multiple roots. So it's better put &lt;root&gt;...&lt;/root&gt; to enclose everything immediately after</p><p>Please refer to RFC 5545 section 3.2 \"Property Parameters\" and section 3.4  \"iCalendar Object\" (or equivalent sections in the old RFC 2445)</p>",
            "children": [
                {
                    "created": "2013-11-11T22:07:24Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Make sure you take a look at sabre-vobject. This is the project I started after running into the issues you're describing, as well as a dozen others :)</p><p><a href=\"https://github.com/fruux/sabre-vobject\" rel=\"nofollow noopener\" title=\"https://github.com/fruux/sabre-vobject\">https://github.com/fruux/sa...</a></p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-08-04T14:03:17Z",
            "name": "Lauren Ross",
            "disqusUser": "disqus_CtVOEdxNvO",
            "message": "<p>Do you know how I can convert this ical: <a href=\"http://mosaic-church.onthecity.org/plaza/events\" rel=\"nofollow noopener\" title=\"http://mosaic-church.onthecity.org/plaza/events\">http://mosaic-church.onthec...</a> to xml and then show on a seperate website as html in a table?</p>",
            "children": [
                {
                    "created": "2014-08-04T16:50:58Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I'm not aware of any ready-made solutions. This may require a bit of coding. I imagine that anyone with a bit of php (or equivalent) experience would be able to do this though.</p>",
                    "children": [
                        {
                            "created": "2014-08-08T15:25:35Z",
                            "name": "Lauren Ross",
                            "disqusUser": "disqus_CtVOEdxNvO",
                            "message": "<p>Hi, Thanks for the response.  I have converted the ical to xml but it shows like this: <a href=\"http://flourishhosting.co.uk/test.php\" rel=\"nofollow noopener\" title=\"http://flourishhosting.co.uk/test.php\">http://flourishhosting.co.u...</a>   your theory doesn't work??please help, thanks</p>",
                            "children": [
                                {
                                    "created": "2014-08-08T15:53:09Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>I think you're hoping that xml will look nice by itself in the browser, but it doesn't. Even after you convert something to xml, you will still need to do work to turn it into html.</p><p>This is not super hard, but it's simply not something that this blog post solves. Perhaps you can get further help building this in some php forum.</p>",
                                    "children": [
                                        {
                                            "created": "2014-08-08T16:06:19Z",
                                            "name": "Lauren Ross",
                                            "disqusUser": "disqus_CtVOEdxNvO",
                                            "message": "<p>No, I'm just hoping the xml will show as normal xml with &lt;header&gt;test&lt;/header&gt; 'string' headers around it.  I'm using curl to output the xml.  Can you advise what I need to do to output my ical into xml like your example?</p>",
                                            "children": [
                                                {
                                                    "created": "2014-08-08T16:07:23Z",
                                                    "name": "Lauren Ross",
                                                    "disqusUser": "disqus_CtVOEdxNvO",
                                                    "message": "<p>Were using pre tags round the output so it should be displaying as raw xml?</p>",
                                                    "children": [
                                                        {
                                                            "created": "2014-08-08T16:08:40Z",
                                                            "name": "Evert",
                                                            "disqusUser": "evertp",
                                                            "message": "<p>No, that's now how pre tags work. If you want to display literal xml tags in a html document, you need to use something like htmlspecialchars on the output string. This converts &gt; into <code>&amp;gt;</code> and will cause it to display the way you want.</p>",
                                                            "children": [
                                                                {
                                                                    "created": "2014-08-08T16:12:12Z",
                                                                    "name": "Lauren Ross",
                                                                    "disqusUser": "disqus_CtVOEdxNvO",
                                                                    "message": "<p>I viewed the source and found the xml.</p>",
                                                                    "children": [
                                                                        {
                                                                            "created": "2014-08-08T16:28:34Z",
                                                                            "name": "Evert",
                                                                            "disqusUser": "evertp",
                                                                            "message": "<p>Yes it would be in the source as well :) Not sure how that would help you though.</p>",
                                                                            "children": [
                                                                                {
                                                                                    "created": "2014-08-08T16:36:00Z",
                                                                                    "name": "Lauren Ross",
                                                                                    "disqusUser": "disqus_CtVOEdxNvO",
                                                                                    "message": "<p><a href=\"http://flourishhosting.co.uk/test.php\" rel=\"nofollow noopener\" title=\"http://flourishhosting.co.uk/test.php\">http://flourishhosting.co.u...</a> How can I only show 2 strings? description and summary?</p>",
                                                                                    "children": [
                                                                                        {
                                                                                            "created": "2014-08-08T16:37:55Z",
                                                                                            "name": "Evert",
                                                                                            "disqusUser": "evertp",
                                                                                            "message": "<p>Hi Lauren,</p><p>This question would definitely fall under 'basic php programming question'. You should either start reading books and/or tutorials, or find someone willing to teach you.</p><p>I can't do that through a comment box. You can hire me though.</p>",
                                                                                            "children": [],
                                                                                            "url": "https://evertpot.com/",
                                                                                            "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "url": "https://evertpot.com/",
                                                                            "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "url": "https://evertpot.com/",
                                                            "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-11-05T18:16:58Z",
            "name": "J. Andreasen",
            "disqusUser": "jandreasen",
            "message": "<p>Hi. How do I execute your PHP-script? I'm rather new to PHP, and I'm learning by doing ;-)</p>",
            "children": []
        },
        {
            "created": "2016-04-05T09:48:29Z",
            "name": "Marc Van Coillie",
            "disqusUser": "marcvancoillie",
            "message": "<p>Hi, I'm currently using your code in a new PHP script to generate KML (Googlemap, googleearth, openstreetmap) based on ical from GoogleCalendar.<br>I plan to deliver it using GNU LGLP license (lesser GPL allow to use code for both commercial and non profit while maintaining the authors and licence)<br>I will mention your name and can put your email address, are you happy with that ?</p>",
            "children": [
                {
                    "created": "2016-06-07T17:55:36Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Don't use this script, it's a bad idea. Use this instead: <a href=\"https://github.com/fruux/sabre-vobject\" rel=\"nofollow noopener\" title=\"https://github.com/fruux/sabre-vobject\">https://github.com/fruux/sa...</a></p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-06-07T17:48:33Z",
            "name": "Ghassan Safadi (Dr. Safadi)",
            "disqusUser": "ghassansafadidrsafadi",
            "message": "<p>Tried to use URL as source of $icalendarData but no success? <br>$icalendarData = file_get_contents(\"http......\");</p>",
            "children": [
                {
                    "created": "2016-06-07T17:55:24Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Don't use this script. Use <a href=\"https://github.com/fruux/sabre-vobject\" rel=\"nofollow noopener\" title=\"https://github.com/fruux/sabre-vobject\">https://github.com/fruux/sa...</a></p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/100": [
        {
            "created": "2013-06-25T03:06:11Z",
            "name": "Drew",
            "disqusUser": "",
            "message": "<p>it would help if there was some kind of explanation to all the lingo</p>",
            "children": [
                {
                    "created": "2013-06-25T14:19:05Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>My blog's audience is strictly programmers. But I'd be more than happy to clarify stuff if you're really interested :) Let me know!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2013-08-25T20:02:59Z",
            "name": "Mat",
            "disqusUser": "",
            "message": "<p>All links are broken...  :-( </p>",
            "children": [
                {
                    "created": "2013-08-29T18:05:52Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Hi Mat,</p><p>It's a very old article. I cleaned it up a bit, and fixed the links to the source, which is now on github, here: <a href=\"https://github.com/evert/PHPGopherServer\" rel=\"nofollow noopener\" title=\"https://github.com/evert/PHPGopherServer\">https://github.com/evert/PH...</a></p><p>Is that all you need?</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/sabredav-acquired-by-fruux": [
        {
            "created": "2014-02-02T14:02:33Z",
            "name": "Peter License",
            "disqusUser": "",
            "message": "<p>I don't see the BSD license in the Github repository, just a copyright statement. Can you please clarify the licensing situation?</p>",
            "children": [
                {
                    "created": "2014-02-02T15:58:43Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p><a href=\"https://github.com/fruux/sabre-dav/blob/master/LICENSE\" rel=\"nofollow noopener\" title=\"https://github.com/fruux/sabre-dav/blob/master/LICENSE\">https://github.com/fruux/sa...</a></p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/230": [
        {
            "created": "2015-02-25T06:32:20Z",
            "name": "suri",
            "disqusUser": "",
            "message": "<p>Hello there,</p><p>How did you do your benchmarking? did you used your own system or is there any software for benchmarking?</p>",
            "children": [
                {
                    "created": "2015-02-25T14:00:19Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Pretty sure it was a custom set up at the time.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-06-07T19:47:30Z",
            "name": "StijnDeWitt",
            "disqusUser": "disqus_gwFw58hvJO",
            "message": "<p>I found that for these huge datasets (in MySQL at least) it can make a huge difference what you fill in for lat / lng value. And not just based on how many results it yields, but also (I suspect) on where in the table those results are. I had a GeoIP query that could take anywhere from a few ms to a few seconds based on what IP address I filled in. So benchmark with a whole bunch of different numbers and then average the results.</p>",
            "children": []
        }
    ],
    "/271": [
        {
            "created": "2016-12-22T12:32:38Z",
            "name": "Tobias Nyholm",
            "disqusUser": "Tnyholm",
            "message": "<p>Thank you for this post. I needed to write a test for this bug. Btw, here is the solution for your problem:</p><p>pathinfo($str, PATHINFO_BASENAME)</p>",
            "children": []
        }
    ],
    "/escaping-in-vcards-and-icalendar": [
        {
            "created": "2013-05-10T16:33:15Z",
            "name": "Marten",
            "disqusUser": "",
            "message": "<p>the GEO example in RFC6350 doesn't violate the comma rule, because that applies to TEXT values only, but as you correctly state GEO is a URI in vCard 4.0. The same is true for PHOTO and KEY, which are URIs and may contain commas as such.</p><p>You have to distinguish between TEXT, TEXT-LIST (a comma separated list of TEXT values), structured text types (semiolon separated TEXT values, like in N and ADR) and non-text types.</p><p>iCalendar doesn't know sturctured text types and doesn't need to escape semicolons (since they are not used as delimiter)</p><p>Many text-properties can be text-lists too, so it makes sense to always escape commas.</p>",
            "children": [
                {
                    "created": "2013-05-10T16:39:08Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Well, if you read :</p><p><a href=\"http://tools.ietf.org/html/rfc6350#3.4\" rel=\"nofollow noopener\" title=\"http://tools.ietf.org/html/rfc6350#3.4\">http://tools.ietf.org/html/...</a></p><p>It doesn't explicitly talk about TEXT or TEXT-LIST (unless I'm reading it incorrectly). The comma issue for GEO also appears in the Errata section for that document.</p>",
                    "children": [
                        {
                            "created": "2013-05-10T17:05:17Z",
                            "name": "Marten",
                            "disqusUser": "",
                            "message": "<p>it does, see <a href=\"http://tools.ietf.org/html/rfc6350#section-4\" rel=\"nofollow noopener\" title=\"http://tools.ietf.org/html/rfc6350#section-4\">http://tools.ietf.org/html/...</a></p><p>Read the Errata again, that's a different issue. The Errata mentiones the GEO parameter to the ADR property not the GEO property itself. I can't see anything about the GEO property.</p><p>The subject of that Errata is the semantic difference between<br>TYPE=\"cell,voice\"<br>and<br>TYPE=cell,voice</p>",
                            "children": [
                                {
                                    "created": "2013-05-10T17:09:53Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>You're right, and the the Data-Types section does seem to confirm that, but then there's still this sentence in section 3.4:</p><p>   Some properties may contain one or more values delimited by a COMMA<br>   character (U+002C).  Therefore, a COMMA character in a value MUST be<br>   escaped with a BACKSLASH character (U+005C), even for properties that<br>   don't allow multiple instances (for consistency).</p>",
                                    "children": [
                                        {
                                            "created": "2013-05-10T17:34:43Z",
                                            "name": "Marten",
                                            "disqusUser": "",
                                            "message": "<p>True, but I think that makes sense for text values only. Integers, Booleans, floats, dates and times can't contain a comma by definition, so there is nothing to escape.</p><p>But there is no \"URI-list\" value type. Also URI refers to <a href=\"http://tools.ietf.org/html/rfc3986#section-3\" rel=\"nofollow noopener\" title=\"http://tools.ietf.org/html/rfc3986#section-3\">http://tools.ietf.org/html/...</a> which explicitly allows commas. On the other hand the BFN in RFC 6350 explicitly states that commas in text values must be escaped.</p><p>I think there is more evidence that commas in URIs are ok than the opposite.</p><p>I think that calls for another Errata to clarify this issue (and state either the one or the other).</p>",
                                            "children": [
                                                {
                                                    "created": "2013-05-10T17:35:46Z",
                                                    "name": "Evert",
                                                    "disqusUser": "evertp",
                                                    "message": "<p>I guess we can agree that the spec disagrees with itself? ;)</p>",
                                                    "children": [
                                                        {
                                                            "created": "2013-05-10T17:41:08Z",
                                                            "name": "Marten",
                                                            "disqusUser": "",
                                                            "message": "<p>Yes</p>",
                                                            "children": []
                                                        }
                                                    ],
                                                    "url": "https://evertpot.com/",
                                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                }
                                            ]
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                },
                {
                    "created": "2013-05-10T18:32:23Z",
                    "name": "Marten",
                    "disqusUser": "",
                    "message": "<p>I have to correct myself: Of course iCalendar uses structured values and of course semicolons need to be escaped. It's RFC 2425 that doesn't know structured values.</p><p>I guess I should go home and stop working for today ;-)</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2013-05-10T16:35:48Z",
            "name": "Marten",
            "disqusUser": "",
            "message": "<p>Btw. the comma in the NOTE of your second vCard 2.1 example is not escaped properly ;-)</p>",
            "children": [
                {
                    "created": "2013-05-10T16:40:15Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Comma's are not escaped in vCard 2.1 :P Only semi-colon, and then only in N, ADR and ORG :)</p>",
                    "children": [
                        {
                            "created": "2013-05-10T16:54:23Z",
                            "name": "Marten",
                            "disqusUser": "",
                            "message": "<p>Yes, they are.</p><p>See the FN example in RFC 2426:</p><p>FN:Mr. John Q. Public\\, Esq.</p><p>also see the BNF at the end:</p><p>   text-value-list      = 1*text-value *(\",\" 1*text-value)</p><p>   text-value   = *(SAFE-CHAR / \":\" / DQUOTE / ESCAPED-CHAR)</p><p>   ESCAPED-CHAR = \"\\\\\" / \"\\;\" / \"\\,\" / \"\\n\" / \"\\N\")<br>        ; \\\\ encodes \\, \\n or \\N encodes newline<br>        ; \\; encodes ;, \\, encodes ,</p><p>without escaping commas you wouldn't be able to distingish the commas from a list separator</p>",
                            "children": [
                                {
                                    "created": "2013-05-10T16:58:46Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>Yes, but RFC2426 is not vCard 2.1! It's 3.0.</p><p>Check out:<br><a href=\"http://www.imc.org/pdi/pdiproddev.html\" rel=\"nofollow noopener\" title=\"http://www.imc.org/pdi/pdiproddev.html\">http://www.imc.org/pdi/pdip...</a></p><p>It has very different language around escaping:</p><p>Compound property values are property values that also make use of the Semi-colon, field delimiter to separate positional components of the value. For example, the Name property is made up of the Family Name, Given Name, etc. components. A Semi-colon in a component of a compound property value must be escaped with a Backslash character (ASCII 92).</p>",
                                    "children": [
                                        {
                                            "created": "2013-05-10T17:10:13Z",
                                            "name": "Marten",
                                            "disqusUser": "",
                                            "message": "<p>Ah, yea sorry I mixed the RFCs up. Who renders vCard 2.1 these days anyway ;-D</p>",
                                            "children": [
                                                {
                                                    "created": "2013-05-10T17:14:12Z",
                                                    "name": "Evert",
                                                    "disqusUser": "evertp",
                                                    "message": "<p>Microsoft ;) Also a lot of 'export' functionality still used vCard 2.1 by default. It's balls, but I get a lot of questions about them..</p>",
                                                    "children": [
                                                        {
                                                            "created": "2013-05-10T17:39:30Z",
                                                            "name": "Marten",
                                                            "disqusUser": "",
                                                            "message": "<p>Ok, who uses Microsoft these days anyway ;-D</p><p>My app handles vCard 2.1 just like vCard 3.0. That means it uses the same parser (that un-escapes all commas) for both versions but it always renders vCard 3.0. So far no one complained about missing slashes in front of his commas ;-)</p>",
                                                            "children": [
                                                                {
                                                                    "created": "2013-05-10T17:42:08Z",
                                                                    "name": "Evert",
                                                                    "disqusUser": "evertp",
                                                                    "message": "<p>Yea I think for reading 2.1 you're probably mostly fine with that behavior. It's what I've been doing in the past too, and I haven't gotten complaints about that specifically.</p>",
                                                                    "children": [],
                                                                    "url": "https://evertpot.com/",
                                                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "url": "https://evertpot.com/",
                                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                }
                                            ]
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/167": [
        {
            "created": "2014-03-07T07:05:54Z",
            "name": "Steffen ",
            "disqusUser": "",
            "message": "<p>Thanks for this very nice Tutorial. Steffen</p>",
            "children": []
        },
        {
            "created": "2018-01-29T16:36:22Z",
            "name": "Gabrielius",
            "disqusUser": "disqus_zPxH8UhqVK",
            "message": "<p>*Also\u2026 why did this post end so abrubtly? Did I get bored with it? We\u2019ll never know I guess.*  -- haha!</p>",
            "children": []
        }
    ],
    "/php-55-released": [
        {
            "created": "2013-06-20T19:24:59Z",
            "name": "Thijs",
            "disqusUser": "",
            "message": "<p>Thanks for the update on the new stuff</p>",
            "children": []
        },
        {
            "created": "2013-06-21T01:17:35Z",
            "name": "Shackrock",
            "disqusUser": "shackrock",
            "message": "<p>Thanks for the GIF.</p>",
            "children": []
        },
        {
            "created": "2013-06-21T08:08:07Z",
            "name": "Hughie Wilmshurst",
            "disqusUser": "HughieW",
            "message": "<p>Best thing about this post - zebra gif. That and the thing about using list() in a foreach loop, that could be handy.</p>",
            "children": []
        },
        {
            "created": "2013-06-21T08:57:18Z",
            "name": "Markus Staab",
            "disqusUser": "markusstaab",
            "message": "<p>great summary... but even better GIF</p>",
            "children": []
        },
        {
            "created": "2013-06-21T08:58:37Z",
            "name": "Phil Grayson",
            "disqusUser": "philgrayson",
            "message": "<p>One thing I'm particularly happy about, although I doubt I'll see 5.5 in my office any time soon, is empty() supporting arbitrary expressions;<br><code><br>empty(trim($name)) // Will now not fall over!<br></code></p>",
            "children": []
        },
        {
            "created": "2013-06-21T09:32:02Z",
            "name": "Guest",
            "disqusUser": "",
            "message": "<p>I've been out of PHP for a while. Does constant dereferencing mean we can finally do things like this?<br><code>$bar = explode('_', $foo)[5];</code></p>",
            "children": [
                {
                    "created": "2013-06-21T10:07:26Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>As fas as I know that already works perfectly from PHP 5.4 onward.</p>",
                    "children": [
                        {
                            "created": "2013-06-21T12:59:51Z",
                            "name": "Guest",
                            "disqusUser": "",
                            "message": "<p>Ah, you're quite right. Function array dereferencing... <a href=\"http://www.php.net/manual/en/migration54.new-features.php\" rel=\"nofollow noopener\" title=\"http://www.php.net/manual/en/migration54.new-features.php\">http://www.php.net/manual/e...</a></p><p>Nice one, thanks for the heads-up!</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2013-06-21T09:49:16Z",
            "name": "Pawel Decowski",
            "disqusUser": "",
            "message": "<p>By \u201cConstant dereferencing\u201d you mean \u201cLiteral dereferencing\u201d.</p>",
            "children": [
                {
                    "created": "2013-06-21T10:07:00Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I just copied the description from the wiki. Literal does sound better though :)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2013-06-21T12:45:44Z",
            "name": "mindpower",
            "disqusUser": "",
            "message": "<p>15 months since 5.4 and this is all we get in the way of improvements? Man, I'm glad I mostly work with Ruby now, PHP is really going nowhere!</p>",
            "children": [
                {
                    "created": "2013-06-21T18:23:08Z",
                    "name": "me",
                    "disqusUser": "",
                    "message": "<p>flame on... ruby really?  lol</p>",
                    "children": []
                },
                {
                    "created": "2013-06-22T07:05:13Z",
                    "name": "iansltx",
                    "disqusUser": "iansltx",
                    "message": "<p>If you're going to troll, replace \"we\" with \"you\". I for one welcome our new php 5.5 overlords.</p><p>Also, just to clarify, are we talking straight-up Ruby, Ruby on Rails, or Ruby on some other framework? Because one ain't the other. And Zend isn't going to introduce huge BC/FC breaking changes (which would strand tons of the community on an old version) just to add sanity to argument ordering, no matter how much we'd like sanity in argument ordering.</p>",
                    "children": []
                },
                {
                    "created": "2013-06-25T19:42:06Z",
                    "name": "brel moi",
                    "disqusUser": "brelmoi",
                    "message": "<p>2 things come to mind:</p><p>1-You're such an ungrateful person. Evert has busted his hump to do this and FOR FREE and this is how you thank him!</p><p>2-If you have nothing but negative crap to spew, you're either jealous or lonely...I'm guessing both. Do you happen to be American by any chance?</p><p>Cheers</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2013-06-25T11:16:40Z",
            "name": "Marcelo Silva",
            "disqusUser": "disqus_PWKFQNO7oH",
            "message": "<p>Amazing GIF! HAHA!</p>",
            "children": []
        },
        {
            "created": "2013-10-22T17:32:58Z",
            "name": "lingtalfi",
            "disqusUser": "",
            "message": "<p>Why are people so obsessed with that gif?</p><p>Thanks for the recap. I learned a couple of things there.<br>Cool zebra by the way.</p>",
            "children": []
        },
        {
            "created": "2013-11-25T22:51:48Z",
            "name": "Jaunty",
            "disqusUser": "",
            "message": "<p>Great</p>",
            "children": []
        }
    ],
    "/vobject3-released": [
        {
            "created": "2013-06-21T19:55:27Z",
            "name": "Ben Harold",
            "disqusUser": "benharold",
            "message": "<p>Awesome! Is there a list of BC breaking changes available?</p>",
            "children": [
                {
                    "created": "2013-06-21T20:02:14Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Yea, it's right here: <a href=\"https://github.com/fruux/sabre-vobject/blob/master/doc/MigratingFrom2to3.md\" rel=\"nofollow noopener\" title=\"https://github.com/fruux/sabre-vobject/blob/master/doc/MigratingFrom2to3.md\">https://github.com/fruux/sa...</a></p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2013-06-22T06:03:06Z",
            "name": "tanghus",
            "disqusUser": "disqus_8lJQO1SKsw",
            "message": "<p>Great! I hope to use it already in ownCloud6</p>",
            "children": []
        },
        {
            "created": "2013-08-19T17:00:56Z",
            "name": "tholder",
            "disqusUser": "tholder",
            "message": "<p>This is great. The post states that it will drop in to SabreDAV 1.8.x - how can you do this with composer though? Any documentation anywhere? I've struggled to find it, composer complains that multiple copies o vobject are being installed.</p>",
            "children": [
                {
                    "created": "2013-08-19T17:07:26Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Hi tholder,</p><p>Using this syntax you can trick composer to install 3.1 instead of 2.1. Note that you must specify an exact version here, and keep an eye on updates yourself:</p><p>{<br>  \"require\" : {<br>    \"sabre/dav\" : \"~1.8.6\",<br>    \"sabre/vobject\" : \"3.1.2 as 2.1\"<br>  }<br>}</p>",
                    "children": [
                        {
                            "created": "2013-08-19T21:25:08Z",
                            "name": "tholder",
                            "disqusUser": "tholder",
                            "message": "<p>That seems to work brilliantly, thanks. Never would have guess that. Is 1.9 due out soon with build in support for 3.1.x?</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/osx-mavericks-php53": [
        {
            "created": "2013-06-25T21:14:09Z",
            "name": "Bruno Cassol",
            "disqusUser": "brunocassol",
            "message": "<p>\"Please note that the PHP 5.3 series will enter an end of life cycle and receive only critical fixes as of March 2013. All users of PHP are encouraged to upgrade to PHP 5.4. PHP 5.3.20 is recommended for those wishing to remain on the 5.3 series.\"</p><p>Source: <a href=\"http://php.net/releases/5_3_20.php\" rel=\"nofollow noopener\" title=\"http://php.net/releases/5_3_20.php\">http://php.net/releases/5_3...</a></p>",
            "children": []
        },
        {
            "created": "2013-06-26T00:17:03Z",
            "name": "Elvis",
            "disqusUser": "mu3",
            "message": "<p>That is bad news.<br>Hope it will change in release version of 10.9.</p>",
            "children": [
                {
                    "created": "2013-06-26T00:31:19Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>When 10.8 came out, I also tracked the PHP version in every developer preview, but it didn't change. Back then I was also hoping for 5.4. I have doubts it will happen this time :)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2013-06-26T06:33:35Z",
            "name": "griesx",
            "disqusUser": "griesx",
            "message": "<p>I don't get why they even ship php with OS-X if the use a completely outdated and in one year unmaintained version.</p>",
            "children": []
        },
        {
            "created": "2013-09-26T06:34:28Z",
            "name": "Bart McLeod",
            "disqusUser": "bartmcleod",
            "message": "<p>port install php54</p><p>Or with the explanation: <a href=\"http://scotty-t.com/2012/09/19/installing-php-5-4-like-a-boss-with-macports/\" rel=\"nofollow noopener\" title=\"http://scotty-t.com/2012/09/19/installing-php-5-4-like-a-boss-with-macports/\">http://scotty-t.com/2012/09...</a></p>",
            "children": [
                {
                    "created": "2013-09-26T08:05:55Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I can highly recommend homebrew instead of macports. Better maintained these days :) Macports and Fink before it were the shit a few years ago though</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/sabre-event": [
        {
            "created": "2013-07-19T18:50:26Z",
            "name": "Matthew Weier O'Phinney",
            "disqusUser": "weierophinney",
            "message": "<p>Mark me as a troll if you will, but have you tried Zend\\EventManager? It has the features you indicate EventEmitter has, and quite a few others... :)</p>",
            "children": [
                {
                    "created": "2013-07-19T19:16:41Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Why would you be considered a troll for that! Silly.</p><p>I looked at EventManager but it just seemed a bit too bulky for what I needed. The 1-class \u00c9v\u00e9nement was exactly what I was after for sabredav, but the two extra features (priorities/stopping the chain) was an absolute must.</p><p>I do need to start depending more on external packages though. I'm quite bad at it :( I always find some reason why I'd rather roll my own, but it's not really the most productive way of going about things.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2013-07-21T07:04:53Z",
            "name": "Hari K T",
            "disqusUser": "harikt",
            "message": "<p>Nice one, something similar to Aura.Signal also <a href=\"http://github.com/auraphp/Aura.Signal/\" rel=\"nofollow noopener\" title=\"http://github.com/auraphp/Aura.Signal/\">http://github.com/auraphp/A...</a></p>",
            "children": []
        },
        {
            "created": "2013-07-23T11:17:34Z",
            "name": "cordoval",
            "disqusUser": "cordoval",
            "message": "<p>thanks for sharing</p>",
            "children": []
        },
        {
            "created": "2013-09-06T09:51:12Z",
            "name": "Coder of Salvation",
            "disqusUser": "",
            "message": "<p>is it possible to bind an event to a class/functionname instead of a direct implementation of the handler? and arguments? Like:</p><p>$eventEmitter-&gt;on('create', array( someObject::getInstance(), \"setFoo\" ) );</p><p>$eventEmitter-&gt;emit('create', array(1,2,(object)array(1,2)) );</p><p>I have a class which basically does that in a very simple way.<br>Nevertheless your approach seems simple and sexy as well, and if it would support the above I would definately use it.</p>",
            "children": [
                {
                    "created": "2013-09-06T09:53:47Z",
                    "name": "Coder of Salvation",
                    "disqusUser": "",
                    "message": "<p>the benefit of above is to have hot pluggable code, no if/else codeclutter and prevention of many lines of exception handling (inspired by Actionscript). The downside is that codeflow becomes less visible, but that can be solved by having your emitter log its emissions to a central logfile.</p>",
                    "children": []
                },
                {
                    "created": "2013-09-06T14:02:29Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Hi!</p><p>That syntax already works exactly as you described:</p><p>$emitter-&gt;on('create', [$instance, 'method']);</p>",
                    "children": [
                        {
                            "created": "2013-09-17T13:33:18Z",
                            "name": "Coder of Salvation",
                            "disqusUser": "",
                            "message": "<p>cool!</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/curl-redirect-requestbody": [
        {
            "created": "2013-07-23T10:37:15Z",
            "name": "MeadSteve",
            "disqusUser": "meadsteve",
            "message": "<p>I guess when you get a 301/308 it'd normally be worth logging something as well, for the maintainer of the code to take some action. Versus a 302/307 where you'd be happy for the code to do this silently.</p>",
            "children": []
        },
        {
            "created": "2013-11-19T10:23:51Z",
            "name": "Ed Dikotope",
            "disqusUser": "",
            "message": "<p>Best answer to my problem over the entire internet. Thank you very much.</p>",
            "children": []
        },
        {
            "created": "2014-03-20T20:44:56Z",
            "name": "Tom Binga",
            "disqusUser": "tombinga",
            "message": "<p>You helped solved a problem that's been holding me back for a week or so now. Thank you!</p>",
            "children": []
        },
        {
            "created": "2014-06-03T01:40:09Z",
            "name": "Marcos Saturno",
            "disqusUser": "marcossaturno",
            "message": "<p>Very good info!</p><p>I'm still having problems when trying to write onto web HDFS (hadoop) from a PHP script. If I make a PUT request passing CREATE as a parameter, it will provide me a 307 temporary redirect, so i'd need to make a second PUT request to the new URL provided. I'm not able to follow it or at least slipt the redirect URL from the HTTP Response. Could you please help me with it?</p><p>DOC:<br><a href=\"http://hadoop.apache.org/docs/r1.0.4/webhdfs.html#CREATE\" rel=\"nofollow noopener\" title=\"http://hadoop.apache.org/docs/r1.0.4/webhdfs.html#CREATE\">http://hadoop.apache.org/do...</a></p><p>I'm using something like:</p><p>$options = array(</p><p>// CURLOPT_PUT =&gt; true,</p><p>CURLOPT_HEADER =&gt; true,</p><p>CURLOPT_CUSTOMREQUEST =&gt; \"PUT\",</p><p>CURLOPT_FOLLOWLOCATION =&gt; true</p><p>);</p><p>$ch = curl_init('&lt;host&gt;:&lt;port&gt;/webhdfs/v1/user/USER?op=CREATE');</p><p>// Execute<br>curl_setopt_array($ch, $options);</p><p>curl_exec($ch);</p><p>//echo curl_errno($ch);</p><p>if(!curl_errno($ch))<br>{</p><p> $info = curl_getinfo($ch);</p><p> echo 'Took ' . $info['total_time'] . ' seconds to send a request to ' . $info['url'];</p><p>}</p><p>// Close handle</p><p>curl_close($ch);</p><p>?&gt;</p>",
            "children": [
                {
                    "created": "2014-06-03T01:41:44Z",
                    "name": "Marcos Saturno",
                    "disqusUser": "marcossaturno",
                    "message": "<p>*I commented the //CURLOPT_PUT, but also tested with both on. ;-)</p>",
                    "children": [
                        {
                            "created": "2014-06-03T04:02:15Z",
                            "name": "Evert",
                            "disqusUser": "evertp",
                            "message": "<p>Does your request not have a body? I wonder if that messes things up. You may want to PUT an empty string instead of nothing at all, because curl may fall back to 'GET' behavior (although with a PUT method).</p>",
                            "children": [
                                {
                                    "created": "2014-06-03T13:30:07Z",
                                    "name": "Marcos Saturno",
                                    "disqusUser": "marcossaturno",
                                    "message": "<p>Hmm, good tip!</p><p>But actually I found some classes ready to use WEB HDFS:<br><a href=\"https://github.com/simpleenergy/php-WebHDFS\" rel=\"nofollow noopener\" title=\"https://github.com/simpleenergy/php-WebHDFS\">https://github.com/simpleen...</a></p><p>Tx for the help, anyways!</p><p>Regards,</p><p>Marcos.</p>",
                                    "children": []
                                }
                            ],
                            "url": "https://evertpot.com/",
                            "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                        }
                    ]
                }
            ]
        },
        {
            "created": "2014-06-08T04:53:01Z",
            "name": "Roger Qiu",
            "disqusUser": "CMCDragonkai",
            "message": "<p>I don't feel secure knowing my request might be redirected to some place I don't know.</p>",
            "children": []
        },
        {
            "created": "2014-06-10T04:59:59Z",
            "name": "Shanly",
            "disqusUser": "",
            "message": "<p>Awesome post! This solved my problem, thanks.</p>",
            "children": []
        },
        {
            "created": "2014-06-22T18:53:05Z",
            "name": "Bub",
            "disqusUser": "",
            "message": "<p>Well done!</p>",
            "children": []
        },
        {
            "created": "2015-03-06T17:45:17Z",
            "name": "Arlanthir",
            "disqusUser": "Arlanthir",
            "message": "<p>Thank you for this.</p>",
            "children": []
        },
        {
            "created": "2015-03-19T10:22:52Z",
            "name": "Ajai",
            "disqusUser": "",
            "message": "<p>i am doing an request using Advanced REST Client and i find some redirects (not cached) , but i get the actual response. But when i try the same using PHP curl it doesnt work , i dont get the output , but the redirected output is displayed.</p><p>Please can any one help me</p>",
            "children": []
        },
        {
            "created": "2015-04-29T18:58:12Z",
            "name": "richyrich",
            "disqusUser": "disqus_IrpxWgUKlx",
            "message": "<p>Thank you so much for this article, saved my time. All the best!</p>",
            "children": []
        },
        {
            "created": "2016-02-27T08:27:33Z",
            "name": "Hassan Nomani Alvi",
            "disqusUser": "hassannomanialvi",
            "message": "<p>I am trying to post data using curl.After posting I would like to go to the url.In other words I am trying to get same functionality as we get with form method=\"post\" and action=\"someurl.php\" .How to do this?Thanks in advance.</p>",
            "children": []
        }
    ],
    "/idempotence-in-http": [
        {
            "created": "2013-11-01T19:14:22Z",
            "name": "Anna Filina",
            "disqusUser": "annafilina",
            "message": "<p>I agree with your point. It's actually easy to argue this with the following 3 requests (assume PUT is for \"modify\" operations):<br>PUT /resource/1<br>DELETE /resource/1<br>PUT /resource/1<br>It would make absolutely no sense in the 3rd request to send a 200 OK, because the resource is clearly not available.</p>",
            "children": [
                {
                    "created": "2013-11-01T20:34:56Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Bit of an odd example though, because PUT is not strictly for updates, it's also used for creation of new resources. So the last PUT could also return a 201.</p>",
                    "children": [
                        {
                            "created": "2013-11-01T22:18:45Z",
                            "name": "Anna Filina",
                            "disqusUser": "annafilina",
                            "message": "<p>It's not strictly for updates. I just used that scenario as an example to further support the point.</p>",
                            "children": []
                        },
                        {
                            "created": "2013-11-02T11:53:30Z",
                            "name": "gggeek",
                            "disqusUser": "gggeek",
                            "message": "<p>Strongly agree. We should use PATCH for updates, and only use PUT for create :-)</p>",
                            "children": [
                                {
                                    "created": "2013-11-02T15:57:55Z",
                                    "name": "Anna Filina",
                                    "disqusUser": "annafilina",
                                    "message": "<p>Support for PATCH is still not widespread. I need to support some very old tech in most of my projects, so that's usually not an option.</p>",
                                    "children": []
                                },
                                {
                                    "created": "2013-11-07T11:09:42Z",
                                    "name": "willdurand",
                                    "disqusUser": "willdurand",
                                    "message": "<p>PATCH is tricky to use as you should send a **diff**, not just a set of key/values to update. Actually, a better alternative would be to PUT specific parts of your resource (e.g. PUT /resources/1/price)</p>",
                                    "children": [
                                        {
                                            "created": "2013-11-08T02:49:25Z",
                                            "name": "gggeek",
                                            "disqusUser": "gggeek",
                                            "message": "<p>I am not against using sub-urls for parts of the resource, but it poses a problem wrt caching reverse proxies: when I publish a new version of resource 1, if I allow usage of sub-urls even for GETs (which is name for smaller payloads/faster interfaces) I am now forced to tell to the reverse proxy to purge resources/1/* as well as resources/1 - and not all of them might be smart enough to support that</p>",
                                            "children": [
                                                {
                                                    "created": "2013-11-08T08:26:46Z",
                                                    "name": "willdurand",
                                                    "disqusUser": "willdurand",
                                                    "message": "<p>Use \"sub-urls\" for write only, not read.</p>",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "created": "2013-11-06T15:03:10Z",
                            "name": "VK",
                            "disqusUser": "",
                            "message": "<p>Don't we use POST for creation of new resource ? PUT or PATCH for updates. The difference is that PUT request has the complete resource with modifications and PATCH with only parts of the resource that has modifications.</p>",
                            "children": [
                                {
                                    "created": "2013-11-06T17:17:27Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>POST should only be used in cases where the client can not, or is not allowed to determine the url of the new resource</p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2017-05-30T14:01:50Z",
            "name": "Marten Gajda",
            "disqusUser": "martengajda",
            "message": "<blockquote>This behavior also extends to DELETE. DELETE with an If-Match header must<br>return 412 Precondition Failed if the resource was already deleted.<br></blockquote><p><br>This doesn't seem to be true any longer. <a href=\"https://tools.ietf.org/html/rfc7232#section-3.1\" rel=\"nofollow noopener\" title=\"https://tools.ietf.org/html/rfc7232#section-3.1\">https://tools.ietf.org/html...</a> explicitly states that a server is allowed to return a 2xx response if the outcome would be the current state on the server:<br></p><blockquote><br>the origin server MUST respond with either a) the 412 (Precondition Failed) status code<br>   or b) one of the 2xx (Successful) status codes if the origin server<br>   has verified that a state change is being requested and the final<br>   state is already reflected in the current state of the target resource<br></blockquote><p><br>So if you request a DELETE on a non-existing resource, the server can actually return 200 OK.<br>The same would be true if you PUT the same resource twice.</p>",
            "children": [
                {
                    "created": "2017-06-27T19:27:21Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>That's super interesting! I had no idea that this was the case. I really like this</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/if-you-care-about-privacy-dont-use-osx-mail": [
        {
            "created": "2013-11-20T05:04:53Z",
            "name": "Guest",
            "disqusUser": "",
            "message": "<p>Same with iPhone mail.</p>",
            "children": []
        },
        {
            "created": "2013-11-20T06:01:23Z",
            "name": "Ken Neville",
            "disqusUser": "kenneville",
            "message": "<p>\"I already had a hunch that it would automatically load in external images...\"</p><p>I am curious to see the results page if you try this with the \"Display remote images in HTML messages\" preference turned off. iOS has the same setting. For me, the results page is all gray. <a href=\"http://Mail.app\" rel=\"nofollow noopener\" title=\"Mail.app\">Mail.app</a> offers a \"Load Images\" button when you twiddle the preference.</p>",
            "children": [
                {
                    "created": "2013-11-20T06:14:54Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>You're right, that does fix the situation.</p><p>To be honest, I looked over the settings more than few times looking for exactly this; I must have skipped right over it every time.</p><p>Bit embarrassing, but it definitely does not take away the fact that OS/X's defaults are bad and are unlikely to be changed, unless the user is aware of the privacy implications of sticking to the defaults.</p>",
                    "children": [
                        {
                            "created": "2013-11-21T01:07:06Z",
                            "name": "Ken Neville",
                            "disqusUser": "kenneville",
                            "message": "<p>I can agree that the default setting is less than desirable. The default is also arguably a bit disingenuous given Apple's \"Do Not Track\" preference for Mobile Safari. (The \"Do Not Track\" preference does not appear to have any effect on the iOS Mail app.) In iOS, neither of these application-specific settings gets any mention in the \"Privacy\" preferences area, where an additional iAd tracking preference is buried. I doubt most users ever dig through enough of the Settings list items to discover these disparate settings.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                },
                {
                    "created": "2013-11-20T06:16:04Z",
                    "name": "Bado",
                    "disqusUser": "",
                    "message": "<p>The results are the same as what you found with the iOS version. It's 100% gray until the Load Images is clicked.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2013-11-20T06:12:33Z",
            "name": "Nick Comer",
            "disqusUser": "nkcmr",
            "message": "<p>Simply turning off \"Display remote images in HTML messages\" option fixes all of this.</p>",
            "children": [
                {
                    "created": "2014-06-07T08:18:34Z",
                    "name": "Seph",
                    "disqusUser": "scarlac",
                    "message": "<p>Agreed. I tested this in both Mail for Mac (10.9.3) and iPhone (7.1) and no boxes triggered. As soon as I hit \"load images\" they triggered just fine, as expected.</p><p>However, I do agree that this setting should be off by default or at least tied to sender information/settings.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2013-11-20T09:09:32Z",
            "name": "Armin Hackmann",
            "disqusUser": "arminhackmann",
            "message": "<p>Also there is a setting 'Trust junk mail headers in messages', but only if the Mail.apps own Junk filter is applied, that should solve the meta-refresh even if you allow remote images to load...</p><p>BUT: That setting is turned on by default, so your point still stands. ;)</p>",
            "children": []
        },
        {
            "created": "2013-11-20T15:47:35Z",
            "name": "Lloyd Hanson",
            "disqusUser": "lloydhanson",
            "message": "<p>Nick wrote \"Simply turning off \"Display remote images in HTML messages\" option fixes all of this.\"</p><p>I did turn this off.  No images were presented in any of my emais.<br>Yet but I got the same test result as did the writer of this email. 18 red boxes!</p>",
            "children": [
                {
                    "created": "2013-11-21T01:09:39Z",
                    "name": "Ken Neville",
                    "disqusUser": "kenneville",
                    "message": "<p>I'm curious to know if you had already loaded the results page once before disabling images via the preference? I'd be surprised if you could reproduce this; and it'd be worth continued investigation if it's really a bug in <a href=\"http://Mail.app\" rel=\"nofollow noopener\" title=\"Mail.app\">Mail.app</a>.</p>",
                    "children": []
                },
                {
                    "created": "2013-11-21T19:21:04Z",
                    "name": "Lloyd Hanson",
                    "disqusUser": "lloydhanson",
                    "message": "<p>I did turn off \"Display remote images in HTML messages:  I then engaged \"Email Privicy Testor\" and got the results page with only gray buttons indicating that my Apple Mail was secure.  I then received this email from EMTesterr:</p><p>\"(snip) .  .  .  .  if you want to look at the results page, please click \"here\"'.</p><p>I clicked and suddenly the results page of EMTester quickly presented 18 red buttons. This was followed by a change in the original email from EMTester to this message:</p><p>\"Your email client has opened this webpage over the web. It has done this because it honours meta refreshes in HTML email. This is very wrong behavior. You'll notice that the meta refresh test has been triggered if you look back at the results page.\"</p><p>And \"meta refresh test\" was one of the red buttons.</p><p>Since I had turned off the command suggested on this discussion the results indicate that EMTester is not really testing when \"Display remote images in HEML messages\" is turned off.  Turning this command off merely hides the fact that Email is perversely opening the flood gates of information to others.</p>",
                    "children": []
                }
            ]
        }
    ],
    "/modern-ie": [
        {
            "created": "2013-11-23T15:29:37Z",
            "name": "Mark van der Velden",
            "disqusUser": "",
            "message": "<p>Free, yes. But it certainly isn't hassle free. The images expire after 30-or so- days. It's still useful, but it's only nice for the occasional test run and then you need to re-download the (rather large) images. </p>",
            "children": []
        }
    ],
    "/mysql-bool-behavior-and-php": [
        {
            "created": "2013-12-05T09:00:27Z",
            "name": "Peter Laursen",
            "disqusUser": "peter_laursen",
            "message": "<p>Sorry, but I do not understand.</p><p>This works fine for me (in any client) with MySQL 5.6.14:<br>CREATE TABLE `foo` (my_bool BOOLEAN);<br>INSERT INTO `foo` (`my_bool`) VALUES ('1');</p><p>Now, I realize there is no PHP/PDO and no prepared statement in this simple exampie.  But it is not clear to me where 'the chain breaks'. Could you elaborate please? </p>",
            "children": [
                {
                    "created": "2013-12-05T09:16:12Z",
                    "name": "Dynom",
                    "disqusUser": "",
                    "message": "<p>I think Evert uses the example of inserting an empty string \"\", not a \"1\".</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2013-12-05T09:14:27Z",
            "name": "Dynom",
            "disqusUser": "",
            "message": "<p>To help prevent errors like these, I prefer setting MySQL's sql_mode to be a bit more strict \"sql_mode = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_AUTO_VALUE_ON_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ONLY_FULL_GROUP_BY\". I'm not sure if this would actually catch the boolean problem you're describing, but it does catch plenty other ambiguities cross MySQL versions or replacements (such as MariaDB, et all).</p><p>I also had some troubles with PDO in the past, some of them had to do with to casting. Not limited to MySQL, but also MSSQL (<a href=\"http://blog.dynom.nl/archives/What-do-you-get-when-you-mix;-MSSQL,-PDO-and-uniqueidentifier_20100608_57.html)\" rel=\"nofollow noopener\" title=\"http://blog.dynom.nl/archives/What-do-you-get-when-you-mix;-MSSQL,-PDO-and-uniqueidentifier_20100608_57.html)\">http://blog.dynom.nl/archiv...</a>. I've found that PDO is the best abstraction PHP has to offer, but it still lacks a punch here and there. Doctrine2 finishes the abstraction to a point where I've not found myself in a problem like this.</p><p>Thanks for sharing.</p>",
            "children": [
                {
                    "created": "2013-12-05T21:58:32Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Broken link :)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2013-12-05T11:09:03Z",
            "name": "emcomments",
            "disqusUser": "emcomments",
            "message": "<p>Small typo in last example?</p><p>\"// 1st param gets value 5\" should be \"// 2nd param gets value 5\"</p>",
            "children": [
                {
                    "created": "2013-12-05T21:51:38Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>thnx :)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2013-12-05T13:34:27Z",
            "name": "Morgan Tocker",
            "disqusUser": "mtocker",
            "message": "<p>MySQL 5.6 sets sql-mode=\"STRICT_TRANS_TABLES\" in the configuration file of new installs, which is why you are seeing an error with this statement:</p><p>INSERT INTO foo (my_bool) VALUES ('')</p><p>You can make it work again in 5.6 by removing the sql-mode from configuration.  The motivation for doing this was described on James Day's blog:</p><p><a href=\"https://blogs.oracle.com/supportingmysql/entry/server_defaults_changes_in_mysql\" rel=\"nofollow noopener\" title=\"https://blogs.oracle.com/supportingmysql/entry/server_defaults_changes_in_mysql\">https://blogs.oracle.com/su...</a></p>",
            "children": [
                {
                    "created": "2013-12-05T22:00:10Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>That.. makes more sense :) Updated the post</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-10-31T03:03:39Z",
            "name": "Vladimir Nikolic",
            "disqusUser": "disqus_DvEcVa3CTS",
            "message": "<p>how to handle inserting a new record where auto increment primary key is supplied as empty string?</p>",
            "children": []
        },
        {
            "created": "2014-12-15T02:39:39Z",
            "name": "Ali",
            "disqusUser": "disqus_XBeuTOxhJO",
            "message": "<p>I have same problem, but with a simple select just like this: SELECT * FROM tblname , Do you know what is the problem?</p>",
            "children": [
                {
                    "created": "2014-12-15T22:03:09Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>No idea. stack overflow may help with this. They'll want more detail than that though.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2018-04-12T14:43:13Z",
            "name": "Red",
            "disqusUser": "",
            "message": "<p>Thanks! This helped me a lot!</p>",
            "children": []
        }
    ],
    "/replacing-myopenid": [
        {
            "created": "2014-11-07T12:01:17Z",
            "name": "5minpause",
            "disqusUser": "5minpause",
            "message": "<p>Thank you for this tutorial. It worked splendidly.</p>",
            "children": []
        },
        {
            "created": "2015-05-17T01:40:05Z",
            "name": "@McGeekiest",
            "disqusUser": "mcgees_org",
            "message": "<p>Thank you for this!  Today, after finding that every third-party service I knew of had closed, that every Ruby gem was obsolete, that every PHP implementation was either nonfunctional or woefully incomplete, and after wrestling with the ludicrously arcane OpenID 2.0 spec for six hours to try to roll my own, I found this post.  IndieAuth does exactly what I need it to, and I can now authenticate as my ManabaseCrafter site when I need to comment on OpenID-only sites.</p><p>Much appreciated.</p>",
            "children": []
        },
        {
            "created": "2017-07-12T21:31:10Z",
            "name": "JayB",
            "disqusUser": "joshuabeach",
            "message": "<p>Gosh. It's a little extra tragic to come upon this article after the death of Persona. It was a great system, too.</p>",
            "children": []
        }
    ],
    "/sabre-http-2-released": [
        {
            "created": "2014-01-15T09:09:10Z",
            "name": "Christophe Coevoet",
            "disqusUser": "christophecoevoet",
            "message": "<p>The RSS feed for this blog is broken. It contains a wrong url for the article, making it quite difficult to access it from the RSS feed</p>",
            "children": [
                {
                    "created": "2014-01-15T15:27:57Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Is this still the case for you? This url seems to have the correct link:</p><p><a href=\"http://feeds.feedburner.com/bijsterespoor\" rel=\"nofollow noopener\" title=\"http://feeds.feedburner.com/bijsterespoor\">http://feeds.feedburner.com...</a></p>",
                    "children": [
                        {
                            "created": "2014-01-15T15:31:21Z",
                            "name": "Christophe Coevoet",
                            "disqusUser": "christophecoevoet",
                            "message": "<p>I haven't subscribed directly to your feed actually, but to PlanetPHP where it is registered.</p>",
                            "children": [
                                {
                                    "created": "2014-01-15T15:37:11Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>Oh weird! It's correct on the html page, but broken in the feed. Will take a look, thanks!</p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-01-15T09:14:33Z",
            "name": "Christophe Coevoet",
            "disqusUser": "christophecoevoet",
            "message": "<p>And regarding HttpFoundation, it preserves the case of headers when sending the Response as of 2.2.0</p>",
            "children": [
                {
                    "created": "2014-01-16T03:59:41Z",
                    "name": "Evert Pot",
                    "disqusUser": "evertpot",
                    "message": "<p>Interesting. It was struck down in my original issue:</p><p><a href=\"https://github.com/symfony/symfony/issues/3294\" rel=\"nofollow noopener\" title=\"https://github.com/symfony/symfony/issues/3294\">https://github.com/symfony/...</a></p><p>Looks like they changed their mind anyway later. Still a good example (for me) why http-foundation isn't good. If I don't have control, and I can't convince the authors why something is a good idea, I'm bound to run into issues for something that is so core to my application.</p>",
                    "children": []
                }
            ]
        }
    ],
    "/jcard-completed": [
        {
            "created": "2014-01-21T02:41:59Z",
            "name": "Brandon Corbin",
            "disqusUser": "brandoncorbin",
            "message": "<p>Ugh, is it just me or does this  seem overly complicated? I was hoping for something more concise and elegant.</p>",
            "children": [
                {
                    "created": "2014-01-21T02:45:46Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Yea it does look a bit complicated ;)</p><p>This was absolutely required for a 1:1 mapping from vCard to jCard. The top-level array couldn't just be an object with properties such as 'N' and 'FN', because almost every one of them can appear more than once.</p><p>Furthermore, many properties can have multiple values, etc.. It really makes sense once you dig into the jCard and vCard formats.</p><p>It doesn't make it very human-readable, but parsing it from within javascript is from experience extremely easy.</p>",
                    "children": [
                        {
                            "created": "2014-01-21T02:55:17Z",
                            "name": "Brandon Corbin",
                            "disqusUser": "brandoncorbin",
                            "message": "<p>Thanks for the details Evert. I am fairly well versed in the vCard format, and have always hated it. Help me understand this - If the objective was to have a clean break from the vCard format, why not just create a better JSON format that can easily be translated? I believe the human readability element is being understated, and we're just passing on the initial inelegant solution to the next evolution.</p>",
                            "children": [
                                {
                                    "created": "2014-01-21T03:15:43Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>One of the key objectives was to provide a way to allow a round-trip from vCard to jCard without loss of information, including support for things like custom properties.</p><p>A lot of discussion went into the exact structure of this. An alternative included making the top-level properties (FN, NAME and such) as real object properties, and making their values arrays in cases where they appeared more than once in the original vcard.</p><p>This would have resulted in very deep object structures. Often harder to read, and definitely harder to use when you do actually start using the format.</p><p>Completely departing from the original data model with tight rules around conversion would also have been possible, but this would have either not allowed full round-tripping, or would have added a level of complexity to the format because you need A) a simple object model for common properties, and B) a generic way to encode any custom or future property.</p><p>Basically.. it's hard.. if you have specific ideas on how this should have been done instead, I would very likely be able to point out why that didn't happen (for better or worse).</p>",
                                    "children": [
                                        {
                                            "created": "2014-01-21T03:31:22Z",
                                            "name": "Brandon Corbin",
                                            "disqusUser": "brandoncorbin",
                                            "message": "<p>I have no doubt your solution was the most optimal for the requirements, nor would I be foolish enough to challenge you to a technical dual.</p><p>My issue falls more on the requirement of 1:1 round-tripping without potential loss.</p>",
                                            "children": [
                                                {
                                                    "created": "2014-01-21T03:36:18Z",
                                                    "name": "Evert",
                                                    "disqusUser": "evertp",
                                                    "message": "<p>A 'technical dual' was not really my intended tone ;) Just wanted to explain the motivations really.</p><p>I agree, if round-tripping was not a requirement, I imagine the format would have looked very different.</p>",
                                                    "children": [],
                                                    "url": "https://evertpot.com/",
                                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                }
                                            ]
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                },
                                {
                                    "created": "2016-02-14T19:33:05Z",
                                    "name": "David Chang",
                                    "disqusUser": "davidfernandoc",
                                    "message": "<p>We've came across the same issue on a group. This came out as a potential solution:<br><a href=\"https://github.com/rauchg/rauchg\" rel=\"nofollow noopener\" title=\"https://github.com/rauchg/rauchg\">https://github.com/rauchg/r...</a></p>",
                                    "children": []
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-01-21T14:47:38Z",
            "name": "Christophe Coevoet",
            "disqusUser": "christophecoevoet",
            "message": "<p>@Evert FYI, the permalink is also broken for this article in the RSS feed</p>",
            "children": [
                {
                    "created": "2014-01-21T19:36:57Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>It looks like it may have to do with the double // in the feed. Lets hope that that fixes things :)</p>",
                    "children": [
                        {
                            "created": "2014-01-22T08:41:36Z",
                            "name": "Christophe Coevoet",
                            "disqusUser": "christophecoevoet",
                            "message": "<p>your new article works fine in the feed</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-03-06T10:01:53Z",
            "name": "elMestre",
            "disqusUser": "",
            "message": "<p>I founded PHP and python libraries for vobject, but not the command line tool.<br>Could you say where its located please?</p>",
            "children": [
                {
                    "created": "2014-03-06T14:07:41Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>The commandline tool is in the bin/ directory of the php project. We have no association with the python project.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-06-07T12:03:00Z",
            "name": "Daniel",
            "disqusUser": "",
            "message": "<p>It doesn\u2019t look so bad after Python's pretty-print:</p><p>&gt;&gt;&gt; print pformat(a, width=120).replace(\"'\", '\"').replace('\\\\\\\\/', '/')<br>[\"vcard\",<br> [[\"version\", {}, \"text\", \"4.0\"],<br>  [\"prodid\", {}, \"text\", \"-//Sabre//Sabre VObject 3.1.3//EN\"],<br>  [\"n\", {}, \"text\", [\"Pot\", \"Evert\", \"\", \"\", \"\"]],<br>  [\"fn\", {}, \"text\", \"Evert Pot\"],<br>  [\"email\", {\"type\": [\"INTERNET\", \"HOME\"]}, \"text\", \"evert@rooftopsolutions.nl\"],<br>  [\"email\", {\"type\": [\"INTERNET\", \"WORK\"]}, \"text\", \"evert@fruux.com\"],<br>  [\"tel\", {\"type\": [\"CELL\", \"VOICE\"]}, \"text\", \"+1 647 471 2661\"],<br>  [\"adr\", {\"type\": \"HOME\"}, \"text\", [\"\", \"\", \"24 Settles Street\", \"London\", \"\", \"E1 1JP\", \"United Kingdom\"]],<br>  [\"note\", {}, \"text\", \"Foo\"],<br>  [\"url\", {\"group\": \"ITEM2\", \"pref\": \"1\"}, \"uri\", \"<a href=\"http://evertpot.com/\" rel=\"nofollow noopener\" title=\"http://evertpot.com/\">http://evertpot.com/</a>\"],<br>  [\"bday\", {}, \"date-and-or-time\", \"1985-04-07\"],<br>  [\"x-jabber\", {\"pref\": \"1\", \"type\": \"HOME\"}, \"unknown\", \"evertpot@gmail.com\"],<br>  [\"uid\", {}, \"text\", \"35269e7016a018e3\"]]]</p>",
            "children": []
        },
        {
            "created": "2014-10-03T14:31:09Z",
            "name": "Sahil",
            "disqusUser": "leo72445",
            "message": "<p>hey can i find the source code for card anywhere? the parsing from card to j and back</p>",
            "children": [
                {
                    "created": "2014-10-03T14:40:02Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Well there's no source code in my post. I am just talking about the standard.</p><p>I have a PHP implementation that you can check out: <a href=\"http://sabre.io/vobject/json/\" rel=\"nofollow noopener\" title=\"http://sabre.io/vobject/json/\">http://sabre.io/vobject/json/</a></p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/google-code-is-dead": [
        {
            "created": "2014-01-21T22:59:53Z",
            "name": "Rapha\u00ebl Pinson",
            "disqusUser": "raphalpinson",
            "message": "<p>The wiki on github is nice, too. And so is gh-pages for the website.</p>",
            "children": []
        },
        {
            "created": "2014-01-23T01:13:30Z",
            "name": "Anon",
            "disqusUser": "",
            "message": "<p>Care to share your script?</p>",
            "children": [
                {
                    "created": "2014-01-23T02:09:02Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>The script is pretty specific to my situation. It's pretty ugly as well :) What part are you specifically interested in?</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-01-23T03:10:09Z",
            "name": "balbeko",
            "disqusUser": "balbeko",
            "message": "<p>why wouldn't you migrate wiki to GitHub as well?</p>",
            "children": [
                {
                    "created": "2014-01-23T17:33:13Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>With infinite free time I would do that right now :)</p>",
                    "children": [
                        {
                            "created": "2014-01-23T18:26:41Z",
                            "name": "balbeko",
                            "disqusUser": "balbeko",
                            "message": "<p>I've helped you a bit<br><a href=\"https://github.com/balbeko/sabredavwiki/blob/master/README.md\" rel=\"nofollow noopener\" title=\"https://github.com/balbeko/sabredavwiki/blob/master/README.md\">https://github.com/balbeko/...</a><br><a href=\"https://github.com/balbeko/sabredavwiki/wiki/_pages\" rel=\"nofollow noopener\" title=\"https://github.com/balbeko/sabredavwiki/wiki/_pages\">https://github.com/balbeko/...</a></p>",
                            "children": [
                                {
                                    "created": "2014-02-04T17:11:59Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>I've made a start: <a href=\"https://github.com/fruux/sabredav.org\" rel=\"nofollow noopener\" title=\"https://github.com/fruux/sabredav.org\">https://github.com/fruux/sa...</a></p><p>I did look at your converter, but didn't end up using it. I'm also using this opportunity to manually go through everything and make corrections. Lots of work, but alas :)</p><p>Thanks for the kickstart though!</p>",
                                    "children": [
                                        {
                                            "created": "2014-02-04T17:15:10Z",
                                            "name": "balbeko",
                                            "disqusUser": "balbeko",
                                            "message": "<p>Great to know! Good luck &amp; have fun:)</p>",
                                            "children": []
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-01-23T03:35:41Z",
            "name": "James Williams",
            "disqusUser": "ecspike",
            "message": "<p>Google has quite a bit on code on Github too. Perhaps it's less not caring and more going where the developers are.</p>",
            "children": []
        },
        {
            "created": "2014-01-26T11:48:55Z",
            "name": "itoctopus",
            "disqusUser": "itoctopus",
            "message": "<p>It's a weird move by Google. I wonder why do they keep canceling features that people actually use. Maybe because they want to just focus on the search, maps, and Android products.</p>",
            "children": []
        },
        {
            "created": "2014-01-27T19:11:21Z",
            "name": "dan",
            "disqusUser": "",
            "message": "<p>Yeah SourceForge may feel dated but that's their whole business so they aren't going anywhere. Google code was just a toy to keep some of their engineers busy.   It was always a mistake for people to host anything there.</p>",
            "children": []
        }
    ],
    "/fpassthru-broken": [
        {
            "created": "2014-02-17T02:25:53Z",
            "name": "SM",
            "disqusUser": "",
            "message": "<p>fpassthru (eventually) uses size_t as file size if stream is mmap-able (which regular files usually are). size_it is 32-bit in 32-bit binaries, so if your PHP build is 32-bit, it's up to 4G. Or, more precisely, you get 5G number stuffed into 4G variable, which gives you ~1G. fread, etc. don't care too much about overall file size as they just try to read in small chunks. File offset is probably wrong somewhere but fread doesn't care.</p>",
            "children": [
                {
                    "created": "2014-02-17T02:34:04Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>My PHP_INT_SIZE = 8, so I'm definitely good in this regard. I don't think there's any reason these days to compile to 32-bit.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-02-17T10:02:16Z",
            "name": "BenBen",
            "disqusUser": "",
            "message": "<p>Did you try readfile($file)? Its my favorite way of tackling this sort of things and according to <a href=\"http://www.garfieldtech.com/blog/readfile-memory\" rel=\"nofollow noopener\" title=\"http://www.garfieldtech.com/blog/readfile-memory\">http://www.garfieldtech.com...</a> it should be working and be performant</p>",
            "children": [
                {
                    "created": "2014-02-17T16:33:45Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>In my specific usecase, there is no 'filename', there's just a stream that can come from anywhere. See here:</p><p><a href=\"https://github.com/fruux/sabre-http/blob/master/lib/Sabre/HTTP/Sapi.php#L56\" rel=\"nofollow noopener\" title=\"https://github.com/fruux/sabre-http/blob/master/lib/Sabre/HTTP/Sapi.php#L56\">https://github.com/fruux/sa...</a></p>",
                    "children": [
                        {
                            "created": "2014-02-18T22:43:43Z",
                            "name": "Guest",
                            "disqusUser": "",
                            "message": "<p>Aha, that makes sense :)</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-02-18T20:18:06Z",
            "name": "Daniel Lowrey",
            "disqusUser": "daniellowrey",
            "message": "<p>If you're serving files of this size you had better be using the X-Sendfile header (or equivalent). Passing large files through userland like this is a serious performance WTF. No one should be doing this in the first place.</p>",
            "children": [
                {
                    "created": "2014-02-18T20:20:16Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Streams can originate from everywhere, and I don't discriminate where. I agree that it would be a good bonus feature to also allow files to be served using X-Sendfile *if* the stream represents a file on a filesystem, but this is not the assumption.</p>",
                    "children": [
                        {
                            "created": "2014-02-18T22:45:39Z",
                            "name": "Daniel Lowrey",
                            "disqusUser": "daniellowrey",
                            "message": "<p>Ah, makes sense. I was initially horrified by the thought of someone streaming multi-Gb filesystem resources in chunks through userland :)</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/composer-is-wide-open": [
        {
            "created": "2014-02-21T00:44:51Z",
            "name": "Gerard van Helden",
            "disqusUser": "gerardvanhelden",
            "message": "<p>Better even, don't use packagist and host all packages privately, so you're in full control and can cherrypick. It's a huge performance increase as well because most of composers performance troubles come from dependency resolution.</p><p>To be fair, the trouble is not the replace feature, it's packagist.</p>",
            "children": []
        },
        {
            "created": "2014-02-21T12:09:31Z",
            "name": "kix",
            "disqusUser": "kix",
            "message": "<p>The right thing to do here and now is maybe to host own Satis repository. +1, @gerardvanhelden:disqus</p>",
            "children": []
        },
        {
            "created": "2014-02-21T12:17:23Z",
            "name": "Jeremy Kendall",
            "disqusUser": "jeremykendall",
            "message": "<p>Important note: It's not accurate to say that post-install-cmd (or the rest of the scripts) are included in this (very serious) vulnerability. Composer's scripts are root-only: Composer will not execute any scripts defined in your dependencies (<a href=\"https://getcomposer.org/doc/articles/scripts.md)\" rel=\"nofollow noopener\" title=\"https://getcomposer.org/doc/articles/scripts.md)\">https://getcomposer.org/doc...</a>.</p><p>UPDATE: On further reflection, I'm not precisely correct. If you use another project as the basis for your own and that other project includes a malicious Composer script, then the RCE and RCI vulnerabilities exist. That's different than a dependency being able to run a Composer script, however, and that was the basis of my comment above. </p>",
            "children": [
                {
                    "created": "2014-02-21T15:19:34Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I removed the bit about post-install-cmd. Thanks!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-02-21T12:34:11Z",
            "name": "willdurand",
            "disqusUser": "willdurand",
            "message": "<p>Evert, this is not helpful...</p>",
            "children": [
                {
                    "created": "2014-02-21T15:13:20Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Hey Will,</p><p>I'm making an attempt to force the composer to take this issue seriously rather than sticking his head into the sand.</p><p>Given that there was no appropriate response to this at all, I felt compelled to make this blogpost. It's time to deal with this issue in a responsible matter.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-02-21T12:54:38Z",
            "name": "jwage",
            "disqusUser": "jwage",
            "message": "<p>We use satis and mirrors of GitHub repos. So when I want to update or add a dependency I have to update our mirrors and pull in the code I want. Then the composer update is ran on local developers virtual machine to update the composer.lock. It seems to me the only way this would be an issue is if you were using composer in an irresponsible/wrong way. That does not mean this isn't an issue. Just thought I'd share how this is not an issue specifically for us to give a little more color to others reading.</p>",
            "children": [
                {
                    "created": "2014-02-26T10:37:05Z",
                    "name": "Gerard van Helden",
                    "disqusUser": "gerardvanhelden",
                    "message": "<p>We use the same setup. Here's how I did it, for anyone who would like to explore the idea: <a href=\"http://melp.nl/2013/09/composer-create-a-local-package-repository-to-improve-speed/\" rel=\"nofollow noopener\" title=\"http://melp.nl/2013/09/composer-create-a-local-package-repository-to-improve-speed/\">http://melp.nl/2013/09/comp...</a> and <a href=\"http://melp.nl/2013/10/composer-local-package-mirroring-press-the-pedal-to-the-metal/\" rel=\"nofollow noopener\" title=\"http://melp.nl/2013/10/composer-local-package-mirroring-press-the-pedal-to-the-metal/\">http://melp.nl/2013/10/comp...</a></p>",
                    "children": []
                }
            ]
        }
    ],
    "/php-5-5-10-timezone-changes": [
        {
            "created": "2014-03-31T07:18:59Z",
            "name": "Jannik Zschiesche",
            "disqusUser": "jannikzschiesche",
            "message": "<p>Nice article!<br>One correction though: \"Now, GMT no longer automatically gets converted to UTC, and the same script will now output UTC.\" should probably say \"GMT\" at the end.</p>",
            "children": [
                {
                    "created": "2014-03-31T20:57:53Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Thanks, fixing this now :)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/new-sabredav-website": [
        {
            "created": "2014-03-31T23:01:36Z",
            "name": "tanghus",
            "disqusUser": "disqus_8lJQO1SKsw",
            "message": "<p>Nice site! And yes the google-code hosted site looked a bit like the ugly stepchild ;)</p>",
            "children": [
                {
                    "created": "2014-04-01T01:20:39Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Yea It was wayyy due for an upgrade :)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/hawk-problems": [
        {
            "created": "2014-04-14T08:13:50Z",
            "name": "MeadSteve",
            "disqusUser": "meadsteve",
            "message": "<p>Hey. Good article. However the HTTP Digest and Amazon auth links are swapped over. Which early on a Monday morning took me way too long to realize why I was so confused.</p>",
            "children": [
                {
                    "created": "2015-02-03T05:29:49Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Fixed! Only 10 months later :)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-04-17T06:31:09Z",
            "name": "philsturgeon",
            "disqusUser": "philsturgeon",
            "message": "<p>As I'm sure you know, Hawk is being built by Erin Hammer to produce and improved OAuth 1.0, after he fell out of love with OAuth 2.0. It could be interesting to hear more comparisons to OAuth 1 or 2 in an update or follow-up. :)</p>",
            "children": [
                {
                    "created": "2014-04-17T16:51:00Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>The overlap with Hawk and OAuth1, is that Hawk fulfills the '2 legged authentication' piece of OAuth1, but not the 3-legged version. 2-legged auth in OAuth1 was always a bit of a poor fit, so from a pure technical standpoint. Hawk does that better.</p><p>Most of my concerns with Hawk are not at all technically btw, they're all really communication and stability problems. OAuth1 does not have those issues. It actually made it into an rfc, which I see as a great indicator of stability:</p><p><a href=\"http://tools.ietf.org/html/rfc5849\" rel=\"nofollow noopener\" title=\"http://tools.ietf.org/html/rfc5849\">http://tools.ietf.org/html/...</a></p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-11-16T01:00:22Z",
            "name": "Jonas",
            "disqusUser": "disqus_3PMu1Y84P7",
            "message": "<p>It's interesting though that AWS signature version 4, does include host...</p><p>With everything hosted behind load balancers that does HTTPS, finding the real hostname from proxy headers can be somewhat tricky...</p>",
            "children": []
        },
        {
            "created": "2015-11-12T12:39:57Z",
            "name": "nickshanks",
            "disqusUser": "nickshanks",
            "message": "<p>Also, two years later, there's still a typo in the title.</p>",
            "children": []
        }
    ],
    "/http-11-updated": [
        {
            "created": "2014-06-07T03:53:30Z",
            "name": "Michael",
            "disqusUser": "",
            "message": "<p>\"has not been split up over 6 separate specs\" -&gt; \"has _now_ been split up over 6 separate specs\"</p>",
            "children": [
                {
                    "created": "2014-06-07T03:54:23Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I always do that, thanks!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-06-07T08:27:40Z",
            "name": "Michael",
            "disqusUser": "ussher",
            "message": "<p>It might be obfious to those that are in the know, but why call it 1.1?  why not 1.2?  seams weird to make the old version obsolete and not increment the version numbers.</p>",
            "children": [
                {
                    "created": "2014-06-07T11:10:19Z",
                    "name": "Lukasaoz",
                    "disqusUser": "Lukasaoz",
                    "message": "<p>This doesn't obsolete HTTP/1.1, it updates the specification. Basically, RFC 2616 got clarified and updated to reflect real-world practice. It's still HTTP/1.1. There should be no problems with interop.</p><p>EDIT: To clarify, RFC 2616 is obsoleted, HTTP/1.1 is not.</p>",
                    "children": [
                        {
                            "created": "2014-06-07T13:37:43Z",
                            "name": "Frederik Erectus",
                            "disqusUser": "",
                            "message": "<p>How can you say that it's still \"HTTP/1.1\" when there are compatibility-breaking changes?</p><p>My god, man, they are in your list! The very list you just posted!</p><p>These are the most blatant of the ones you have listed:</p><p>- Default charset of ISO-8859-1 has been removed.<br>- Content-Range has been explicitly banned in PUT requests.<br>- Servers are no longer required to handle all Content-* header fields.<br>- The 204, 404, 405, 414 and 501 status codes are now cachable.<br>- The Location header can now contain relative uri's as well as fragment<br>identifiers.<br>- Content-MD5 has been removed.</p><p>How can compatibility be retained when functionality is removed, or the expectations that decades of existing software built upon are no longer guaranteed to hold true?</p><p>My god, man! My god! This is a huge debacle in the making.</p><p>What we have here is not HTTP/1.1! It is a bastardization of HTTP/1.1; an imitation of it. It clearly cannot be HTTP/1.1 because it is not compatible with HTTP/1.1!</p><p>This should have been called HTTP/1.2. There is no way justify calling this HTTP/1.1, when complete compatibility is not retained.</p><p>This isn't just fixing the formatting of the RFC document, for crying out loud. This introduces changes to a very well established protocol! My god, man! My god! Do you people not see the global implications of this very poor decision?</p><p>The time is not too late, though. Please, the Internet community begs of you, reconsider the naming of this. Call it HTTP/1.2. Call it anything but HTTP/1.1! For it is not HTTP/1.1. It is not!</p>",
                            "children": [
                                {
                                    "created": "2014-06-07T13:42:00Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>Once you get a hold of yourself and read through those changes in depth, you may find that the actual reality is that more people are compatible with _this_ version of HTTP/1.1 than RFC2616.</p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                },
                                {
                                    "created": "2014-06-07T14:02:58Z",
                                    "name": "Lukasaoz",
                                    "disqusUser": "Lukasaoz",
                                    "message": "<p>Firstly, this isn't my article. =)</p><p>Secondly, the changes to the RFC codify behaviour that was already happening. Taking your points in order:</p><p>- The default charset was never respected. Python's requests library followed it and we got so many bug reports for that behaviour. New RFCs correctly say that HTML does not meaningfully have a default encoding (in practice it's usually UTF-8).<br>- PUT means 'here is the entire entity', store this at the chosen request URI. That is semantically incompatible with 'I am sending you these bytes of the entity'. PATCH should be used here. All this change does is spell out the inconsistency.<br>- I honestly have no clue about what this point is talking about, seemed unclear to me.<br>- Caches were already caching these response codes: for example, Squid and Traffic Server, some of the widest-deployed caches already did this. In fact, the spec treaded a middle ground in the hope that these caches would stop caching some other dangerous responses (like 500).<br>- Relative URIs in Location headers were already being used A LOT. All modern user-agents can handle them.<br>- I'll turn straight to RFC 7231 for this: \"The Content-MD5 header field has been removed because it was inconsistently implemented with respect to partial responses.\"</p><p>The global implications here are very minor. No-one was following RFC 2616 to the letter: you cannot operate on the modern web if you do that. This specification change brought HTTP/1.1 up to date with how it's actually used on the web, while attempting to rein in some of the biggest excesses.</p><p>HTTP/1.1, before today, was not the protocol written in RFC 2616. It's much more like the protocol written in RFC 723[0-5]. Better to have some RFCs that actually reflect how the protocol truly is than some idealised notion of a protocol that does not exist. At least that's my view.</p>",
                                    "children": []
                                },
                                {
                                    "created": "2014-09-18T14:00:54Z",
                                    "name": "lala",
                                    "disqusUser": "",
                                    "message": "<p>Just to add my five cents:<br>Incompatibility exists even among implementation conforming to the same old RFC 2616 because it wasn't strict enough that implementations would agree on its interpretation.</p>",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "created": "2014-06-10T00:39:21Z",
                            "name": "Michael",
                            "disqusUser": "ussher",
                            "message": "<p>Thanks everyone for the heated responses.  I can see that its a passionate subject.  Minor increment numbers not used in this setup HTTP/1.1.6 then.</p>",
                            "children": []
                        }
                    ]
                },
                {
                    "created": "2014-06-07T16:23:55Z",
                    "name": "StoneCypher",
                    "disqusUser": "StoneCypher",
                    "message": "<p>Because this is still HTTP/1.1 .  There's already a 1.2.</p><p>This is almost identical to 1.1.  There's no significant changes here.  There's no new features.  All this does is clarify how things are supposed to work, resolve some outstanding questions, and codify some common practice as official.</p><p>This is nothing like a point release.</p><p>Why would you suggest that this should be a point release?  Do you understand what goes into an RFC point release?  It's well defined.  In an RFC.</p>",
                    "children": [
                        {
                            "created": "2014-06-11T03:34:59Z",
                            "name": "Fred",
                            "disqusUser": "",
                            "message": "<p>It should be called HTTP/1.2 or HTTP/1.1c (clarified) or HTTP/1.1.1</p><p>This is much easier to understand in technical meetings with a bunch of PHBs<br>than saying: HTTP1.1-rfc7230s*</p><p>As for the Google SPDY protocol, it should be called HTTP/2.0 <br>or just keep it SPDY and make it official.</p>",
                            "children": [
                                {
                                    "created": "2014-06-11T03:41:55Z",
                                    "name": "StoneCypher",
                                    "disqusUser": "StoneCypher",
                                    "message": "<p>1.1c is a pretty good idea.</p><p>1.2 is already taken, and can't be used.</p>",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "created": "2014-06-07T09:49:52Z",
            "name": "Nilesh Trivedi",
            "disqusUser": "nileshtrivedi",
            "message": "<p>&gt; to distinguish between \"there was no referrer\" and<br>\"I don't want to send a referrer\".</p><p>Why is this a good idea? This distinction creates another bit of information to track users.</p>",
            "children": [
                {
                    "created": "2014-06-07T10:10:09Z",
                    "name": "Frosty",
                    "disqusUser": "",
                    "message": "<p>You are trackable anyways. I dont get whats the sense of disabling web features to gain more privacy, when you login regulary somewhere with your realname?</p>",
                    "children": [
                        {
                            "created": "2014-06-07T12:36:13Z",
                            "name": "gorhill",
                            "disqusUser": "",
                            "message": "<p>I think he means this add one more bit to fingerprinting information.</p>",
                            "children": []
                        }
                    ]
                },
                {
                    "created": "2014-06-09T16:48:58Z",
                    "name": "Amal Krishnan",
                    "disqusUser": "amalkrishnan",
                    "message": "<p>The 'referer' header leaks everything in the url to a third-party. The url might contain sensitive parameters or sometimes the url might itself be sensitive. The HTTP specification only disallows sending the 'referer' header from an HTTPS site to an HTTP site. This makes the assumption that all sites running over HTTPS trust each other.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2014-06-07T11:38:34Z",
            "name": "Daniel",
            "disqusUser": "",
            "message": "<p>A couple of corrections:<br>1. HTTP/1.1 isn't obsolete, RFC2616 is.<br>2. 308 is not Standard, nor even Proposed Standard, but Experimental.</p>",
            "children": [
                {
                    "created": "2014-06-07T13:42:18Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I clarified your first point, thnx.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-06-07T13:44:31Z",
            "name": "Frederik Erectus",
            "disqusUser": "",
            "message": "<p>10 RFCs?! My god, man! Why are there so many?</p><p>HTTP/1.1 is supposed to be a simple protocol. RFC2616 was a very moderately sized document. But now we have to deal with 10 separate spec documents! My god, man!</p><p>My god, man! The bureaucracy is maddening! In the days of yore, I had only to tell an aspiring HTTPist to \"Read  RFC2616\". Now I will need to tell aspiring HTTPists to \"Read RFC 7230 and RFC 7231 and RFC 7232 and RFC 7233 and RFC 7234 and RFC 7235 and RFC 7236 and RFC 7237 and RFC 7238 and RFC 7239\"!</p><p>My god, man, do you not see how stupid this is now?</p>",
            "children": [
                {
                    "created": "2014-06-07T13:48:17Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>The reality is that HTTP/1.1 is not simple. Just reading RFC2616 may give you a good idea of the original design 15 years ago, but not what you actually need to do to implement a client that meets today's expectations.</p><p>You'll also find that the new documents, while having a higher pagecount, are actually much easier to understand for any newcomers.</p><p>If you want to have a discussion about this, please hold off with the hyperbole and reduce the amount of emotion in your comments. This is not a Fox News discussion panel.</p>",
                    "children": [
                        {
                            "created": "2014-06-08T10:40:43Z",
                            "name": "John Doe",
                            "disqusUser": "",
                            "message": "<p>He's just trolling.</p>",
                            "children": [
                                {
                                    "created": "2014-06-11T17:05:58Z",
                                    "name": "StoneCypher",
                                    "disqusUser": "StoneCypher",
                                    "message": "<p>Actually, you are.  He had a point he wanted to make.</p>",
                                    "children": []
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-06-07T15:18:20Z",
            "name": "cwh",
            "disqusUser": "",
            "message": "<p>Would be helpful if you linked to where in the RFCs your bullet points come from</p>",
            "children": []
        },
        {
            "created": "2014-06-07T19:48:44Z",
            "name": "disqus_gJy6FYV58g",
            "disqusUser": "disqus_gJy6FYV58g",
            "message": "<p>Good discussion about the reasoning behind the name, and I am glad this has been debated. I was wondering why the number wasn\u2019t incremented either since \u2014 as someone pointed out \u2014 things have been changed. But as another poster noted, it is probably more compliant with how 1.1 is working in the real world now because of the considerations of what has become de-facto implementation as well as removing obscurity of the original specs.</p><p>So, call it whatever you want, IMO, as long as the person you are talking to about it understands that you are talking about HTTP1.1 clarified via RFC723x. I might start referring to it as \u201cHTTP1.1 Clarified\u201d or \u201dHTTP1.1-rfc7230s*\u201d {\u201c*seventy-two thirties\u201d} or something that makes it clear what I am talking about. That way it will remove any ambiguity about what I am talking about.</p><p>Leaving the debate about the appropriateness of the name chosen aside, these are good, helpful documents (what I have read thus far). So, rather than debate the name of the collection, I would rather hear comments about them (as is inherent in the name \u201cRFC\u201d), so those of us newer to them can all learn from those that have been wading in these waters longer than others. thanks.</p>",
            "children": []
        },
        {
            "created": "2016-03-18T13:02:31Z",
            "name": "jo\u00e3o dias",
            "disqusUser": "disqus_l7j977xmPo",
            "message": "<p>RFC 7231 changed 403, makes it almost the same as 401. that's stupid.</p>",
            "children": []
        }
    ],
    "/promises-in-php": [
        {
            "created": "2014-06-24T06:48:37Z",
            "name": "Robin Speekenbrink",
            "disqusUser": "robinspeekenbrink",
            "message": "<p>Cool and looks great! Have been following the Sabre* developments from afar for a while now. One thing i was wondering: have you looked at the `other` big promise implementation from ReactPhp ? (<a href=\"https://github.com/reactphp/promise)\" rel=\"nofollow noopener\" title=\"https://github.com/reactphp/promise)\">https://github.com/reactphp...</a></p><p>Are you intentionally creating a very basic promise interface or are you planning to make it more consise with other (js based) PromiseA+ spec (<a href=\"https://github.com/promises-aplus/promises-spec)\" rel=\"nofollow noopener\" title=\"https://github.com/promises-aplus/promises-spec)\">https://github.com/promises...</a> implementations (like When.js et al)</p>",
            "children": [
                {
                    "created": "2014-06-24T07:41:33Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I'm pretty sure that this lib is largely compliant, with two exceptions that I'm aware of:</p><p>1. Left out the 'thenable' part. This made a lot less to me in PHP<br>2. If a promise is already resolved, then onFullfilled/onRejected callbacks are called immediately. This, because we can't schedule a function to be called in a next 'tick' in PHP.</p><p>If I missed something aside from that, I would love to hear it. As for the reactphp implementation... I had too much trouble understanding how it worked. I frankly thought I could do it subjectively 'better'.</p><p>ReactPHP's promise library has callbacks for onProgress, and has a bigger object model, which would allow for deeper customization. I can only assume that this was needed for use-cases that I couldn't think of ;).</p>",
                    "children": [
                        {
                            "created": "2014-06-25T13:51:37Z",
                            "name": "Robin Speekenbrink",
                            "disqusUser": "robinspeekenbrink",
                            "message": "<p>True. Your approach is alot more readable and compact. I guess i just got used to the whenjs library and the various helper methods (otherwise() / spread(), done() etc)</p><p>All in all, your way of building the promise allows for more easier extension :)</p><p>Thanks for the hard work!</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2017-08-21T06:08:42Z",
            "name": "Xu Ding",
            "disqusUser": "xuding",
            "message": "<p>Thanks for sharing.</p><p>But how did your Promise solve the single threaded PHP issue? From my understanding, you will need to use pcntl_fork to create child process in PHP to make it truly multiple threaded.</p><p>Correct me if I am wrong.</p><p>Regards<br>Xu</p>",
            "children": [
                {
                    "created": "2017-08-22T00:34:49Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Hi Xu Ding,</p><p>The type of concurrency this is is similar to nodejs. There's only one process, one thread of PHP being executed at once. However, IO (such as network IO and disk IO) is done on different threads. If you're curious how this would work in PHP, I would suggest you research how it works in node.js. There's likely a lot more written material about that.</p><p>Ever</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/properted-properties-from-shared-ancestry": [
        {
            "created": "2014-09-15T18:49:34Z",
            "name": "Davey Shafik",
            "disqusUser": "dshafik",
            "message": "<p>Hi,</p><p>In your third example, it errors because you override the property in Child1, which Child2 does not derive from and therefore does not have access to it. If Child2 were to extend Child1, it would work fine.</p><p>If you were to then add a Child3 that also extended Child1, it could access the properties in Ancestor, Child1, and Child2.</p>",
            "children": [
                {
                    "created": "2014-09-15T19:08:48Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Hi Davey, I understand why it happens, but what I took from it was that either:</p><p>A) Example #2 should not be allowed in the PHP engine and is a kind of bug, or undefined behavior, or at the very least behavior that I'm not supposed to use.</p><p>B) Example #3 shows a php bug, because it allows users to break the liskov substition principal.</p><p>I should not be allowed to change the contract of a class in a subclass.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-09-15T23:28:19Z",
            "name": "Matthew Weier O'Phinney",
            "disqusUser": "weierophinney",
            "message": "<p>This is actually how both doctrine and zf2 implement proxy objects. It's particularly useful for hydrating a value or entity object.</p>",
            "children": [
                {
                    "created": "2014-09-15T23:30:41Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Hmm well perhaps it's worth reporting a bug for example #3 then. If this is expected behavior in the PHP engine, it shouldn't be breakable by overriding the property value in a subclass :)</p>",
                    "children": [
                        {
                            "created": "2014-09-15T23:36:37Z",
                            "name": "Matthew Weier O'Phinney",
                            "disqusUser": "weierophinney",
                            "message": "<p>Well, we don't override the properties; we use the fact that the object we're manipulating is of the same type in order to manipulate its properties. (This is also a key faculty for immutable objects; you clone, and then change the property in the cloned instance.)</p>",
                            "children": [
                                {
                                    "created": "2014-09-15T23:44:39Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>Well, the problem arises when the Proxy object receives an instance of a subclass of what it's normally proxying. If this subclass does override a protected property with a new value, you'll get the fatal error.</p><p>Given that any class should be substitutable by one of it's subclass, I'd consider this a bug.</p>",
                                    "children": [
                                        {
                                            "created": "2014-09-15T23:54:23Z",
                                            "name": "Matthew Weier O'Phinney",
                                            "disqusUser": "weierophinney",
                                            "message": "<p>Yes, definitely agree there.</p>",
                                            "children": []
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-09-16T04:55:34Z",
            "name": "Petah",
            "disqusUser": "PetahNZ",
            "message": "<p>ReflectionProperty::setAccessible problem fixed.</p><p><a href=\"http://php.net/manual/en/reflectionproperty.setaccessible.php\" rel=\"nofollow noopener\" title=\"http://php.net/manual/en/reflectionproperty.setaccessible.php\">http://php.net/manual/en/re...</a></p><p>/troll</p>",
            "children": []
        },
        {
            "created": "2014-09-16T12:29:37Z",
            "name": "damonk",
            "disqusUser": "disqus_1hudUmrMju",
            "message": "<p>Ok really got a little confused until i tried it with Java. Normally in #example 3 the result of the method output should fallback to \"ancestor\" but it failed because of it was overridden by $var in Child1 class. I think that is just one of PHP style of implementing OOP, subclasses always overrides parent Classes. that is one thing that make it really DYNAMIC.</p>",
            "children": []
        },
        {
            "created": "2014-09-16T20:50:40Z",
            "name": "Miles Johnson",
            "disqusUser": "miles_johnson",
            "message": "<p>Visibility is based around the scope level, not the object level. Any instance of MyClass will have the same scope, hence why you can modify properties of other objects of the same class name. I'm pretty sure Java and other OO languages work the same way.</p>",
            "children": []
        }
    ],
    "/google-carddav-issues": [
        {
            "created": "2014-10-15T19:52:36Z",
            "name": "Christian",
            "disqusUser": "",
            "message": "<p>Thank you for that warning! I thought about implementing oauth for `vdirsyncer` for the sole purpose of syncing with google, but if it's that bad I won't bother.</p>",
            "children": []
        },
        {
            "created": "2014-10-20T21:23:42Z",
            "name": "tanghus",
            "disqusUser": "tanghus",
            "message": "<p>I'm not surprised. Googles vCard exports are some of the most faulty I've seen.</p>",
            "children": []
        },
        {
            "created": "2015-03-23T03:19:45Z",
            "name": "vaskas",
            "disqusUser": "",
            "message": "<p>What sort of experience did you have with Google's CalDAV implementation? Is it as bad as the CardDAV one?</p>",
            "children": [
                {
                    "created": "2015-03-23T14:02:47Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>No, while the CalDAV server does have some issues, it's a completely separate system and team. It might still be worth looking at their own API's  though, as I do feel that that's a much more direct mapping to their internal data-model, than CalDAV is. Since they loosely map their CalDAV server to their internal data-model, it's not a 'perfect fit' and this does shine through in some areas.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-04-06T03:14:26Z",
            "name": "sagivo",
            "disqusUser": "sagivo",
            "message": "<p>is there anything you can't do via the google contacts api? why to use vcard over it?</p>",
            "children": [
                {
                    "created": "2015-04-08T21:14:07Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Why would you use a standard open protocol? The obvious answer is that you can use the same approach for other carddav servers. There's also many existing libraries out there that would just work (if they did a better job).</p><p>But a more important argument for us was that our abstract data-model for contacts was based around the vcard specification. So using a protocol that uses that data-model allowed us to avoid converting back and forward between two different data-models in a lossy way.</p><p>But those arguments are only valid if they actually properly supported the spec.</p>",
                    "children": [
                        {
                            "created": "2015-04-08T21:19:12Z",
                            "name": "sagivo",
                            "disqusUser": "sagivo",
                            "message": "<p>my question is if there's any difference in terms of speed between the carddav and the google contact api. i see that the carddav in google is very slow and according to the article also buggy sometimes.</p>",
                            "children": [
                                {
                                    "created": "2015-04-08T21:22:14Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>I would say it's very likely that their contacts API is better in many ways, because it likely better reflects their internal data model. But I have heard from others that the contacts API is also quite slow, but I don't personally know how they compare in terms of speed.</p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-09-03T21:25:11Z",
            "name": "Olivier",
            "disqusUser": "",
            "message": "<p>Have you reported bugs in some public place? This way we could access a (possible) reply from Google in case they disagree with your claims\u2026</p>",
            "children": [
                {
                    "created": "2015-09-04T13:14:27Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I have not.</p>",
                    "children": [
                        {
                            "created": "2015-09-12T21:04:11Z",
                            "name": "Olivier",
                            "disqusUser": "",
                            "message": "<p>Those claims you are making are, in my opinion, quite serious. You are claiming that Google implemented very badly a standard protocol while claiming to be compliant with it. Worse, they failed to take action when you told them about the bugs. That\u2019s serious fault from their part, I consider. I would consider it a sufficient reason to move my data (contacts and calendar) from Google to another provider: I don\u2019t want to be locked with, or to support, a non standard-compliant provider.</p><p>However, such strong claims as those you are making should be supported with easily verifiable facts. After all, you could be sincere but mistaken for some subtle reason. Furthermore, there is a clear conflict of interest here in Fruux people saying that Google\u2019s calendar product is somehow flawed.</p><p>To be honest, I consider it your responsibility to make your claims as easily verifiable as possible by your readers. A good and easy way would be to report a bug, very precisely described and reproducible, in some public place where Google will have a chance to answer if they diagree with your claims. Google forums [<a href=\"https://productforums.google.com/forum/#!forum/calendar\" rel=\"nofollow noopener\" title=\"https://productforums.google.com/forum/#!forum/calendar\">https://productforums.googl...</a>] come to mind. I know it would take yet a bit more of your time, but considering the time you have already spent on the matter, and considering the seriousness of the matter, it seems like an appropriate investment. Also, it should not take long as you probably simply have to copy/paste the descriptions you tried to send to Google\u2019s developers.</p><p>I know that I can verify your claims myself by reading the specs, implementing a program, and testing to send cards to Google servers as you did. This would take enormous time, and would only enlighten one person (me). And it is certain that most of your readers will not do this. Whereas you posting a bug report, assuming Google is unable to provide a satisfactory answer, would make it clear for everybody that the fault is theirs. You (at Fruux) would also gain from this.</p><p>Contrapositively, you not doing it raises a bit of suspicion against your claims. I am trying to be honest and constructive here, I hope you will not take it personally.</p>",
                            "children": [
                                {
                                    "created": "2015-09-13T19:06:40Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>Hi!</p><p>You raise some excellent points. There is a conflict of interest. My perspective on this has always been, not to drag anyone through the dirt, but as a last-ditch effort for someone to take notice. I want google's carddav server to work well, not only because it validates carddav (which I'm heavily invested in), but also because in this instance I wanted to work with google's API as a consumer of it, and I had the hope I could write a generic client that would also work for other services.</p><p>Now about your point for independent verification. I can't spare the time to write a script that can easily reproduce this issues, but I shared the important bits on this gist:</p><p><a href=\"https://gist.github.com/evert/b1cef035890701973fd9\" rel=\"nofollow noopener\" title=\"https://gist.github.com/evert/b1cef035890701973fd9\">https://gist.github.com/eve...</a></p><p>This should allow you to independently verify my claims.</p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/osx-tmux-vim-copy-paste-clipboard": [
        {
            "created": "2015-01-02T22:14:45Z",
            "name": "Marcin Kasinski",
            "disqusUser": "",
            "message": "<p>Awesome post! Thank you very much for sharing. That is exacltly what I was looking for!</p>",
            "children": []
        },
        {
            "created": "2015-01-16T17:12:38Z",
            "name": "Brian Dant",
            "disqusUser": "briandant",
            "message": "<p>Nice work! Thank you.</p>",
            "children": []
        },
        {
            "created": "2015-02-04T05:39:55Z",
            "name": "Manoj Mahalingam",
            "disqusUser": "manojlds",
            "message": "<p>You can select with mouse, and before letting go, press y to copy.</p>",
            "children": [
                {
                    "created": "2015-03-11T18:34:07Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I noticed this a little later as well, and this is exactly how I work around that issue. Thanks!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                },
                {
                    "created": "2015-07-22T12:17:13Z",
                    "name": "alsaid",
                    "disqusUser": "disqus_uaH8dksu6g",
                    "message": "<p>good!</p>",
                    "children": []
                },
                {
                    "created": "2015-11-17T03:19:38Z",
                    "name": "Boztown",
                    "disqusUser": "Boztown",
                    "message": "<p>Thanks dude! This needs to be added to the article.</p>",
                    "children": []
                },
                {
                    "created": "2016-05-28T14:28:27Z",
                    "name": "Mars Huang",
                    "disqusUser": "",
                    "message": "<p>You are awesome! Thanks!</p>",
                    "children": []
                },
                {
                    "created": "2017-07-04T08:14:41Z",
                    "name": "Bed Intruder",
                    "disqusUser": "disqus_jqJRC6r2Ra",
                    "message": "<p>Doesnt work in tmux (2.1)</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2015-02-05T00:24:47Z",
            "name": "Mingliang Liu",
            "disqusUser": "",
            "message": "<p>Very nice post!</p>",
            "children": []
        },
        {
            "created": "2015-03-11T08:12:50Z",
            "name": "Rickard von Essen",
            "disqusUser": "",
            "message": "<p>Awesome! Nice bonus.</p>",
            "children": []
        },
        {
            "created": "2015-04-23T15:44:54Z",
            "name": "Tanner Jones",
            "disqusUser": "disqus_RwJyDs5CYl",
            "message": "<p>Just an fyi, after 'brew install vim' I lost what I feel like is the correct behavior for the backspace key on Mac OSX. After some searching, it seems that the default behavior for 'backspace' is to only work on characters typed during the current insertion mode. I don't like this... The fix is to put the following in ~/.vimrc<br>set backspace=indent,eol,start</p><p><a href=\"http://stackoverflow.com/questions/3534028/mac-terminal-vim-will-only-use-backspace-when-at-the-end-of-a-line\" rel=\"nofollow noopener\" title=\"http://stackoverflow.com/questions/3534028/mac-terminal-vim-will-only-use-backspace-when-at-the-end-of-a-line\">http://stackoverflow.com/qu...</a></p>",
            "children": []
        },
        {
            "created": "2015-07-26T17:43:17Z",
            "name": "John R. Bussiculo",
            "disqusUser": "johnrbussiculo",
            "message": "<p>Thank you!</p>",
            "children": []
        },
        {
            "created": "2015-07-31T07:32:34Z",
            "name": "fxi",
            "disqusUser": "fxi",
            "message": "<p>July 2015: this still works :) And thanks for the bonus: I haven't even thought that this could be fixed...</p>",
            "children": []
        },
        {
            "created": "2015-09-03T13:01:57Z",
            "name": "Dave Hayes",
            "disqusUser": "disqus_ZpeyKBAAf8",
            "message": "<p>Thanks, this was a huge help. I'm not sure if it's tmux 2.0, iTerm2 beta 3, or both, but if I leave \"Allow clipboard access to terminal apps\" enabled, then copy on mouse selection with tmux works properly. I haven't noticed any negative side effects, but like I said... that may be a recent development.</p>",
            "children": []
        },
        {
            "created": "2015-10-07T08:35:07Z",
            "name": "Av\u00e9tis Kazarian",
            "disqusUser": "google-58d6a9c86173bd29c9379e4ce204a8e0",
            "message": "<p>Actually, you can share clipboard with VIM without all this.</p><p>Simply use the global register '+':</p><p>\"+y will yanks to system clipboard.<br>\"+p will pastes from the system clipboard.</p>",
            "children": []
        },
        {
            "created": "2015-11-24T17:51:42Z",
            "name": "Byron Mansfield",
            "disqusUser": "byronmansfield",
            "message": "<p>Does anyone know if there is support for highlighting from one bracket to another like in vi/vim? Say I want to select \"Some string\" from a line like: `command \"Some string\"`. In vi/vim I can copy that a number of ways like `yi\"` or `v%y`. I have my set up as described in this article. But it seems like the tmux vi mode does not support these more complex vim key binds. Any thoughts?</p>",
            "children": []
        },
        {
            "created": "2016-06-02T13:39:28Z",
            "name": "S Graham",
            "disqusUser": "disqus_l4yGf57g2P",
            "message": "<p>wohoo - thanks so much!!</p>",
            "children": []
        },
        {
            "created": "2017-02-10T21:52:09Z",
            "name": "Phillip Pope",
            "disqusUser": "phillip_pope",
            "message": "<p>Still works in 2017, thanks!</p>",
            "children": []
        },
        {
            "created": "2017-02-15T03:01:25Z",
            "name": "johnpark82",
            "disqusUser": "johnpark82",
            "message": "<p>Cool</p><p>It works on me :)</p>",
            "children": []
        },
        {
            "created": "2017-02-26T08:38:35Z",
            "name": "Alex",
            "disqusUser": "disqus_eA4iuzW513",
            "message": "<p>This post is really very useful. Thanks a lot!<br>Regards, Alex</p>",
            "children": []
        },
        {
            "created": "2017-04-16T20:02:47Z",
            "name": "Xavier Artot",
            "disqusUser": "xavierartot",
            "message": "<p>Don't forget to upgrade vim...</p>",
            "children": []
        },
        {
            "created": "2017-06-02T17:40:49Z",
            "name": "JSThePatriot",
            "disqusUser": "JSThePatriot",
            "message": "<p>I would like to note ... June 2nd, 2017... I'm using a newer version of tmux, and you cannot use `vi-copy`. Here's an issue comment that describes exactly how one would need to go about it: <a href=\"https://github.com/tmux/tmux/issues/754#issuecomment-297452143\" rel=\"nofollow noopener\" title=\"https://github.com/tmux/tmux/issues/754#issuecomment-297452143\">https://github.com/tmux/tmu...</a> ... well I can't get any of it to work. :( so never mind.</p>",
            "children": []
        },
        {
            "created": "2017-06-06T11:30:07Z",
            "name": "Steven Leiva",
            "disqusUser": "stevenleiva",
            "message": "<p>This is the best post ever made anywhere.</p><p>In all seriousness, thank you. Probably saved me hours of my time.</p>",
            "children": []
        },
        {
            "created": "2017-06-13T11:11:52Z",
            "name": "Robin Nemeth",
            "disqusUser": "disqus_Az8VwzTj6v",
            "message": "<p>In newer versions of tmux the `-t` syntax was slightly changed:<br>Change the previous to this and you should be good to go.</p><p>```<br>bind-key -T copy-mode-vi v send-keys -X begin-selection<br>bind-key -T copy-mode-vi y send-keys -X copy-pipe \"reattach-to-user-namespace pbcopy\"</p><p>Update default binding of `Enter` to also use copy-pipe<br>unbind -T copy-mode-vi Enter<br>bind-key -T copy-mode-vi Enter send-keys -X copy-pipe \"reattach-to-user-namespace pbcopy\"</p><p># Bind ']' to use pbpaste<br>bind ] run \"reattach-to-user-namespace pbpaste | tmux load-buffer - &amp;&amp; tmux paste-buffer\"<br>```<br>See <a href=\"https://github.com/tmux/tmux/issues/754\" rel=\"nofollow noopener\" title=\"https://github.com/tmux/tmux/issues/754\">https://github.com/tmux/tmu...</a></p>",
            "children": [
                {
                    "created": "2017-06-16T06:54:12Z",
                    "name": "rick",
                    "disqusUser": "",
                    "message": "<p>you are correct ! thanks for this</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2018-01-04T16:38:48Z",
            "name": "Lyndsy Simon",
            "disqusUser": "lyndsysimon",
            "message": "<p>This seems to still work, but adds a delay of 1-2 seconds when opening a new terminal. I'm using iTerm2 (3.1.5), macOS 10.13.2, and zsh (5.3).</p>",
            "children": []
        }
    ],
    "/testing-composer-prefer-lowest": [
        {
            "created": "2014-12-18T23:44:25Z",
            "name": "mnapoli",
            "disqusUser": "matthieunapoli",
            "message": "<p>--prefer-lowest rather than --prefer-oldest :)</p>",
            "children": [
                {
                    "created": "2014-12-18T23:47:20Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Fixed!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2014-12-19T14:39:10Z",
            "name": "Jordi Boggiano",
            "disqusUser": "seldaek",
            "message": "<p>Also worth noting that combining --prefer-lowest with --prefer-stable might be worth it to avoid testing against early alpha/beta/RCs of dependencies. It's unlikely someone would rely on them anyway and it is likely to make you waste time figuring out what's wrong if you hit a pre-release bug in one of the dependencies.</p>",
            "children": []
        },
        {
            "created": "2016-03-19T14:28:22Z",
            "name": "Anton",
            "disqusUser": "antonmedv",
            "message": "<p>Really cool! Will use in in Deployer. <br>&gt; --prefer-lowest with --prefer-stable</p>",
            "children": []
        }
    ],
    "/new-uri-library-for-php": [
        {
            "created": "2015-01-28T09:29:42Z",
            "name": "Kasper Garn\u00e6s",
            "disqusUser": "kaspergarnaes",
            "message": "<p>Thanks for sharing!</p><p>I have been looking for a URI handling library with support for resolving relative urls. This looks like a great lightweight alternative to <a href=\"https://github.com/zendframework/Component_ZendUri\" rel=\"nofollow noopener\" title=\"https://github.com/zendframework/Component_ZendUri\">https://github.com/zendfram...</a> for that purpose.</p>",
            "children": []
        }
    ],
    "/whats-in-a-link": [
        {
            "created": "2015-02-03T15:55:12Z",
            "name": "blongden",
            "disqusUser": "blongden",
            "message": "<p>The rel is a tricky thing to include. Often, a link (the href and it's associated metadata which varies per format) could relate to multiple resources in different ways.</p><p>Take a 'person' resource as an example. To one 'person', another 'person' could be a 'friend' (link rel). To another however, it maybe an 'enemy'. The target is the same, but the relationship is different.</p>",
            "children": [
                {
                    "created": "2015-02-04T19:06:04Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>If you re-use a Link object for two different resources, you are not<br>modelling a link, you are just modelling a a 'target resource' or URI.</p><p>A link is the relationship with two resources. This is a 1:1<br>relationship. There should never be a situation where the same link is<br>used on two different resources (with different relationship types).</p><p>This means that your concept of a Link is something else... a partial link<br>at most .</p><p>Since I know you are running a HAL library for PHP, I feel that this design choice is an effect of trying to represent the HAL format in PHP.<br>It makes total sense to want to represent it the way you did if you are<br>mainly interested in generating HAL output. It would be tempting to<br>create a 1:1 mapping between HAL and PHP classes, but I feel makes less<br>sense if you consider the wider context.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-02-04T18:59:01Z",
            "name": "Fab G",
            "disqusUser": "fabg",
            "message": "<p>Very interessting article.</p><p>If rel=\"\" can have multiple values seperated by spaces in HTML5, why getRel() returns string and not array?</p>",
            "children": [
                {
                    "created": "2015-02-04T19:03:29Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Good point, and something I have been thinking about as well. I am thinking now it should actually be an array, and I will update the interface to reflect this.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-03-10T23:09:27Z",
            "name": "Mike Amundsen",
            "disqusUser": "mamund",
            "message": "<p>check out Stephen Mizell's HyperDescribe project: <a href=\"http://smizell.com/weblog/2014/converting-between-hypermedia-types\" rel=\"nofollow noopener\" title=\"http://smizell.com/weblog/2014/converting-between-hypermedia-types\">http://smizell.com/weblog/2...</a></p><p>I think you two may be working toward a similar goal.</p>",
            "children": [
                {
                    "created": "2015-03-10T23:13:05Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Sure sounds like it =) thanks for this</p>",
                    "children": [
                        {
                            "created": "2015-03-10T23:19:30Z",
                            "name": "Mike Amundsen",
                            "disqusUser": "mamund",
                            "message": "<p>no problem. love what you're working on here.</p><p>i did something a bit dff several years ago by focusing on a higher-level abstraction of links and forms -- H-Factors. <br><a href=\"http://amundsen.com/hypermedia/hfactor/\" rel=\"nofollow noopener\" title=\"http://amundsen.com/hypermedia/hfactor/\">http://amundsen.com/hyperme...</a></p><p>the idea is to identify common actions within media-types and give them a name. most all media types support the LO factor (link-outbound) and few support the LI factor (idempotent write). and so forth.</p>",
                            "children": [
                                {
                                    "created": "2015-03-10T23:27:21Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>Yea I'm super interested in this. I'm on the verge to start work on a new protocol to (eventually) replace CalDAV and CardDAV and it all starts at the mediatypes.</p><p>I've ran into those charts before... perhaps good to dig a bit deeper into it.</p>",
                                    "children": [
                                        {
                                            "created": "2015-03-11T00:49:26Z",
                                            "name": "Mike Amundsen",
                                            "disqusUser": "mamund",
                                            "message": "<p>if you start pursuing a hypermedia-style route, be sure to post to the hypermedia-web list. lots of smart folks there who can offer feedback.</p><p>cheers.</p>",
                                            "children": []
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/http-2-finalized": [
        {
            "created": "2015-03-03T10:49:57Z",
            "name": "tenivarp",
            "disqusUser": "",
            "message": "<p>Nice post !! Thanks</p>",
            "children": []
        },
        {
            "created": "2016-03-28T13:37:42Z",
            "name": "Caesar Chi",
            "disqusUser": "CaesarChi",
            "message": "<p>thanks for your post, it is helpful.</p>",
            "children": []
        }
    ],
    "/password-hash-ew": [
        {
            "created": "2015-02-25T00:35:38Z",
            "name": "SketchNI",
            "disqusUser": "sketchni",
            "message": "<p>Article title is misleading but other than that, I agree with your claims about implementing something as important as password_hash() into the core is a bad idea.</p>",
            "children": [
                {
                    "created": "2015-02-25T00:57:15Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Good point on the title.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                },
                {
                    "created": "2016-03-28T18:32:40Z",
                    "name": "Lud Akell",
                    "disqusUser": "ludakell",
                    "message": "<p>Man, this is exactly what I thought! This text is appearing on google's searches about password_hash, but it doesn't necessarily have to do with the function. There is no problem with the function itself.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2015-02-25T01:30:31Z",
            "name": "Michael D Johnson",
            "disqusUser": "redbeardcreator",
            "message": "<p>I wholeheartedly agree. I rather like Python's methodology here. I don't know about details in core, but I can't imagine it being hard to just preload some standard PHP library, a la autoload. If done right, it always exists in the opcache and it should be in some sort of read-only memory, shared among instances.   </p>",
            "children": []
        },
        {
            "created": "2015-02-25T02:09:51Z",
            "name": "mario",
            "disqusUser": "",
            "message": "<p>The upside of course is more widespread use of *proper* password crypting of such a crucial feature. And should it ever become insufficient, then upgrading PHP isn't the only option. With its clear cut API, it's kinda trivial to provide a drop-in replacement. Monkeypatching works as well as `#define password_hash password_hash2`.</p><p>Pythons bundled module system, btw, comes with its own set of issues. The clusterf*** that was urllib* is why it hasn't widely catched on for web apps. And that's only slowly being displaced by requests. Same goes for the original PEAR bundling. Most of the elected few core packages just had unlovely APIs.</p>",
            "children": []
        },
        {
            "created": "2015-02-25T12:18:29Z",
            "name": "anoland",
            "disqusUser": "anoland",
            "message": "<p>Evert, I'm disappointed in this. You mention the actual specific reason it was added to the core and then failed to address it. One correct implementation in the entire history of PHP isn't a very good track record. One of the primary reasons that PHP has a bad rap is because it makes it so hard to do security. It was added to the core because userland developers, except for a couple, failed at the task.</p><p> None of this is news to you. </p>",
            "children": [
                {
                    "created": "2015-02-25T14:02:30Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>One of the things I tried to address in this blog post, and did (probably more clearly) on twitter, is that I feel that adding the password functions to core is the best possible decision for PHP today. What I'm hoping is that a few years down the road, the implementation could have been written in PHP and be perceived as just as good.</p><p>So yes, I see the benefits as I pointed out in my article. The article was not specifically about the password functions, it's about the last sentence:</p><p>&gt; If code for PHP is required to be written in C to be considered legitimate and<br>dependable, I think we need to admit we have a problem.</p>",
                    "children": [
                        {
                            "created": "2015-02-26T21:11:59Z",
                            "name": "P\u00e1draic Brady",
                            "disqusUser": "padraicb",
                            "message": "<p>I think Python is the most compelling point. PHP tried this, sort of, with PEAR, but it was kept outside in its own silo where it was technically optional, oversight was imperfect, and its distribution mechanism became its undoing.</p><p>What nobody would want to see, however, is having a PHP Standard Library that starts displacing anything more than what might be described as essentials to the language. We don't really want to leave behind all the gains we've made with packages and the rapid erosion of NIH and protectionism.</p><p>Imagine if PHP added some full featured PHP package to core, and then some standard came along that everyone is excited to adopt, and then all we hear for the next decade is \"backwards compatibility\" while it sits there like a lump ignoring all progress beyond its borders and largely preventing adoption of said standard. Which means writing alternatives beyond PHP and letting its Standard Library go rot.</p><p>That's pretty much the nightmare scenario, but that could work within certain restrictions to prevent PHP taking on monopolistic tendencies around an overreaching Standard Library.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-02-25T16:52:18Z",
            "name": "Chris",
            "disqusUser": "",
            "message": "<p>I'm not sure it's necessarily about legitimacy and dependability, but probably more about accessibility. Put simply, adding something as important as *good* password hashing into the core means more people will get it right without the need to have the foresight to search for a 3rd party library.</p><p>Bear in mind that if a developer doesn't realise the importance of proper hashing, they probably don't realise that there are 3rd party libraries that will do a better job of it than they ever could - hence so many people are still using broken crypto like MD5 because it's there by default and it's easy to use.</p><p>I for one think it's a great idea.  It doesn't matter how many years into the future you look, there will always be amateur coders who don't really know what they're doing, and providing them with the tools to do important jobs from the get-go is a step towards making the web a more secure place.</p>",
            "children": [
                {
                    "created": "2015-02-25T17:02:22Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Hey Chris,</p><p>I wholeheartedly agree with everything you said. But my main problem is, why does it have to be in C when it could have been in PHP?</p><p>I think the current PHP project does not allow core extensions to be created in PHP, and I think that's a major flaw.</p><p>I would love to see PHP go in a direction where a function like password_hash is part of PHP, part of the php documentation, always available and written in PHP.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-02-25T17:42:59Z",
            "name": "natmchugh",
            "disqusUser": "natmchugh",
            "message": "<p>Some very good points here, it's changed the way I think about it.</p><p>The on going password hashing competition <a href=\"https://password-hashing.net/report1.html\" rel=\"nofollow noopener\" title=\"https://password-hashing.net/report1.html\">https://password-hashing.ne...</a> will result in a new standard soon. One of the finalists battcrypt has been specifically designed to use an existing PHP primitive and hence work well in userland PHP. It is a shame that even if it is chosen it will probably be implemented in C to work with the password_hash API or else be seen as illegitimate.</p>",
            "children": []
        },
        {
            "created": "2015-02-26T05:21:34Z",
            "name": "iansltx",
            "disqusUser": "iansltx",
            "message": "<p>An advantage of a large stdlib, which PHP has, is that you can get to a point where you can build something reliable without reinventing the wheel either on your own or by pulling in a bunch of userland packages, which might conflict dep-wise to the point that you're either forced to use (and maintain) older versions, or have to do like Guzzle did and swap namespaces so you can run the newer, BC-incompatible version alongside the older one.</p><p>Don't get me wrong, I love Composer and haven't written any PHP extensions (once PHP 7 drops I may get into that biz...who knows?). But in the particular case of password_* being able to point to a best practice in core, \"Make sure you have a reasonably recent runtime and then just use this function,\" is a huge step forward security-wise for the language that powers a huge portion of the web, dev'd on by folks who vary experience-wise.</p><p>Another example here is the RFC for a reliable, real CSPRNG in core. Becuase too many people are using random(), shuffle(), mt_rand() and uniqid() improperly. You can pull in randomlib...or you can point people to use a vetted function, with polyfills available for older versions, that is a sound building block.</p><p>On the other side of the issue are things that are amazing when standardized, but are not matters of flat-out security so you can implement them in PHP or as extension (the latter for performance). The PSR-7 web server interface is a solid example of this. No need to put it into core because folks who want it will opt into it, and folks who don't aren't doing something horribly insecure by default (SQLi can happen in PSR-7 too). Same thing for the PSR-3 logging interface (in contrast to PHP's internal error and exception handling system, to which new levels have been added in recent history, which is something you want to be able to rely on).</p><p>By the way, Composer (which is itself in userland and is aggressively updated) seems to me to be a solid replacement for PEAR. Maybe I'm missing something though.</p><p>In sum, while I agree with the last sentence of your post, please pick on some other piece of core. Heck, pick on uniqid(); I think it fits your description of \"why should this be in core\" a lot better than password_hash() and password_verify() unless I'm mistaken.</p>",
            "children": []
        }
    ],
    "/dropbox-post-api": [
        {
            "created": "2015-03-02T21:43:36Z",
            "name": "nicholaides",
            "disqusUser": "disqus_Y9U2tXbUUx",
            "message": "<p>The other drawback to disconnecting the query from its result is that the server is no longer stateless (or as stateless). The server now has to record what all the query params were for a particular query.</p>",
            "children": [
                {
                    "created": "2015-03-02T21:48:18Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I generally agree and tried to address that when talking about requiring additional 'storage'. I'm a bit hesitant to use the term stateless/stateful because that term tends to have a broader meaning in the context of HTTP.</p>",
                    "children": [
                        {
                            "created": "2015-03-03T07:32:47Z",
                            "name": "gulyasm",
                            "disqusUser": "gulyasm",
                            "message": "<p>Also, you might need central storage, so when you have to scale, you can distribute the load across machines. Quite elegant solution though, I really like it.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-03-02T22:02:14Z",
            "name": "Nathan Boolean Trujillo",
            "disqusUser": "nathanbooleantrujillo",
            "message": "<p>why not just POST to a URL with GET params too and have the best of both worlds?</p>",
            "children": [
                {
                    "created": "2015-03-02T22:07:40Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Actually, that would give you the drawback of both!</p>",
                    "children": [
                        {
                            "created": "2015-03-02T23:07:47Z",
                            "name": "Nathan Boolean Trujillo",
                            "disqusUser": "nathanbooleantrujillo",
                            "message": "<p>not if you are posting JSON.</p>",
                            "children": [
                                {
                                    "created": "2015-03-02T23:31:15Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>I can't tell if you're serious!</p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                },
                {
                    "created": "2015-03-02T22:09:40Z",
                    "name": "pierpaoloramon",
                    "disqusUser": "pierpaoloramon",
                    "message": "<p>There\u2019s no such thing as \u2018GET params\u2019. That\u2019s just the (silly) PHP way of calling \u2018query parameters\u2019.</p>",
                    "children": [
                        {
                            "created": "2015-03-02T23:04:21Z",
                            "name": "Nathan Boolean Trujillo",
                            "disqusUser": "nathanbooleantrujillo",
                            "message": "<p>yeah, \"Query params\" is the proper RFC nomenclature.</p><p>You were close on the (silly) language:</p><p>use CGI;<br>$q = new CGI;<br>my $value = $q-&gt;param('my_parameter_bame');</p>",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "created": "2015-03-02T22:27:13Z",
            "name": "Jason",
            "disqusUser": "",
            "message": "<p>:s/In the same vain/In the same vein/</p>",
            "children": [
                {
                    "created": "2015-03-02T22:29:57Z",
                    "name": "Jason",
                    "disqusUser": "",
                    "message": "<p>/aestetic/aesthetic/</p>",
                    "children": [
                        {
                            "created": "2015-03-02T22:36:14Z",
                            "name": "Evert",
                            "disqusUser": "evertp",
                            "message": "<p>Thank you, fixed. That's what I get for not using spell check ;)</p>",
                            "children": [],
                            "url": "https://evertpot.com/",
                            "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                        }
                    ]
                }
            ]
        },
        {
            "created": "2015-03-02T22:42:28Z",
            "name": "vittoriozaccaria",
            "disqusUser": "vittoriozaccaria",
            "message": "<p>What about encoding the query as a base64 URL parameter of a GET? You'd probably get a bit more of flexibility..</p>",
            "children": [
                {
                    "created": "2015-03-02T22:55:31Z",
                    "name": "Boigus",
                    "disqusUser": "",
                    "message": "<p>still doesn't get past the size limitations though</p>",
                    "children": [
                        {
                            "created": "2015-03-03T12:51:05Z",
                            "name": "Sean",
                            "disqusUser": "",
                            "message": "<p>A quick search indicates that just about every client and server  supports 2 kb urls, which makes for a gigantic space of distinct queries. I use the b64 technique and it's great, save the cryptic url.</p>",
                            "children": []
                        },
                        {
                            "created": "2015-03-03T12:52:24Z",
                            "name": "Sean",
                            "disqusUser": "",
                            "message": "<p>A quick search indicates that just about every client and server  supports 2 kb urls, which makes for a gigantic space of distinct queries. I use the b64 technique and it's great, save the cryptic url.</p>",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "created": "2015-03-02T23:34:41Z",
            "name": "Mo Binni",
            "disqusUser": "mo_binni",
            "message": "<p>This is relevant to the article but also just a general question. Let's say you have a GET api endpoint with which you retrieve a certain amount of non-changing data, such as a list of partners you work with. How do you leverage caching this request to not always leverage the query to execute and thus create load on the server?</p>",
            "children": [
                {
                    "created": "2015-03-03T00:09:25Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>The easiest? Put a HTTP proxy in front of it! There's plenty that do this out of the box. Squid and Varnish come mind, but I'm sure there's others.</p>",
                    "children": [
                        {
                            "created": "2015-03-03T08:30:23Z",
                            "name": "Mo Binni",
                            "disqusUser": "mo_binni",
                            "message": "<p>Thanks, seems legit</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-03-02T23:38:22Z",
            "name": "Simon Wood",
            "disqusUser": "hpoom",
            "message": "<p>You solution detailed in \"An alternative approach\" is clearly the correct approach!</p><p>The only issue I have is GET to /queries/1 would return details of the saved 'query resource'. To get the results you would query /queries/1/results or some other path.</p><p>POST to /queries should create a new query.<br>GET, PUT and DELETE to /queries/1 would interact with or return the query resource<br>GET to /queries/1/results would return the results resource that corresponds to the saved query response.</p><p>Great response to the original Dropbox post.</p>",
            "children": []
        },
        {
            "created": "2015-03-02T23:51:54Z",
            "name": "yehosef",
            "disqusUser": "yehosef",
            "message": "<p>I think the ideal compromise would be to make a post request to a \"/queries\" endpoint.  It would return the results and the \"location\" header with a url with a sha1 (or whatever..) token which represents that request.  It you didn't want the keep the token=&gt; request body around forever just give it an expiration.  Similar to the EVAL/EVALSHA in Redis (if EVAL would also do a SCRIPT LOAD)</p>",
            "children": []
        },
        {
            "created": "2015-03-03T00:42:16Z",
            "name": "OMG_wtf",
            "disqusUser": "disqus_g2vHX4Rd2s",
            "message": "<p>I have to agree with you that this is not correct use of the HTTP standards and I think that people at Dropbox are aware of this. I would say that your solution is nice and clean. But even the article mentions this:</p><p>\"We could have somehow contorted /delta to mesh better with the HTTP <br>worldview, but there are other things to consider when designing an API,<br> like performance, simplicity, and developer ergonomics. In the end, we <br>decided the benefits of making /delta more HTTP-like weren\u2019t worth the <br>costs and just switched it to HTTP POST.\"</p><p>Which makes perfect sense to me. Basically the drawback which is introduced by your solution is too much for them and they probably considered solution like this.</p><p>Anyway good blog post!</p>",
            "children": []
        },
        {
            "created": "2015-03-03T01:20:31Z",
            "name": "orliesaurus",
            "disqusUser": "orliesaurus",
            "message": "<p>When I attended a dropbox dev event, they did say out and clear that their API isn't fully RESTful, now I understand more why...great post =)</p>",
            "children": []
        },
        {
            "created": "2015-03-03T08:37:53Z",
            "name": "Pierre",
            "disqusUser": "",
            "message": "<p>s/vain/vein/</p>",
            "children": []
        },
        {
            "created": "2015-03-03T09:55:28Z",
            "name": "SelectaSound",
            "disqusUser": "selectasound",
            "message": "<p>Great article full of detail.</p>",
            "children": []
        },
        {
            "created": "2015-03-03T09:57:57Z",
            "name": "Alexander Weber",
            "disqusUser": "",
            "message": "<p>I don't think your suggestion does make sense. First, by splitting the request from the response you introduce a security risk, because now the result of the query can be accessed by everyone knowing the response ID, especially for private data I would not like that. Apart from that the server now has to keep the result available and is going to be bloated with useless data. How long should the results be kept? You can't drop the result after receiving the first GET request, because in that case there is no sense for the GET at all, because any second request made to the same response will fail anyway. So keep it for 90 seconds? What if the user has a very slow internet connection? Keep it for an hour? With 100,000 requests/s you're kind a dead within minutes. So that doesn't scale at all. The next problem is that either you need a database or any kind of storage in the background to keep the data or you need to ensure that the GET request comes to the same host that the original POST got to; so you either need different domains (sub-domains) or a layer 7 load balancing, what you might not need for any other purpose. Another problem is the dramatically increased latency, in fact you double the latency, for a satellite connection this means that you may add up to one second to your response time. And why all that effort? Just to support an idempotent request for something that is, due to its nature, not idempotent. The reason why it is not idempotent is volatility. In fact the resource you query is modifiable and not static, therefore there is no guarantee that the same request will always return the same response (concurrency). So I think what Dropbox did makes sense and I agree to their statement. My 2 cent.</p>",
            "children": [
                {
                    "created": "2015-03-03T10:57:01Z",
                    "name": "Rob Johnson",
                    "disqusUser": "disqus_UUgDePE0jD",
                    "message": "<p>I would have imagined that you still need to attach a security header for both the query POST and the result GET. <br>Secondly, I would have also imagined that the query would be stored, not the actual results of that query. That would mean that the results can be cached appropriately when accessed and would not cause the scalability issues you've mentioned.<br>I agree with your comments on latency, but it feels like a necessary evil for me.</p>",
                    "children": [
                        {
                            "created": "2015-03-03T11:59:34Z",
                            "name": "Alexander Weber",
                            "disqusUser": "",
                            "message": "<p>If you store the query, then the result is no longer idempotent, because the seconds GET might return a different result as the first one, because the data is volatile, right?<br>Apart from that you anyway must persist the query somewhere, either local (in memory) or in an distributed storage. If you keep it around like that, you need some form of garbage collection so you produce garbage, what scales very bad.<br>It is a security issue as well, because you need either to perform authentication and authorization twice or you need again to persists the authentication and authorization response, which opens up further security issues in your back-end and removes some advantages of stateless communication.</p><p>Another point I see is that caching as a man-in-the-middle was always a bad idea (so by proxies), especially if it comes to resources that require authentication. Therefore, when using authentication, you should use TLS and any caching advantage of GET is directly gone.</p>",
                            "children": [
                                {
                                    "created": "2015-03-03T13:37:50Z",
                                    "name": "Rob Johnson",
                                    "disqusUser": "disqus_UUgDePE0jD",
                                    "message": "<p>You're right, the data will not be indempotent, but as you said, it's not by its nature. The queries could be kept in something like a redis cache or memcache, with TTLs, to address the scaling issue, but I agree about the man-in-the middle and the use of proxies.</p>",
                                    "children": [
                                        {
                                            "created": "2015-03-03T13:40:09Z",
                                            "name": "Alexander Weber",
                                            "disqusUser": "",
                                            "message": "<p>But what do you gain by using GET vs POST, except for a huge amount of disadvantages? Is there any advantage, just one?</p>",
                                            "children": [
                                                {
                                                    "created": "2015-03-03T13:46:54Z",
                                                    "name": "Rob Johnson",
                                                    "disqusUser": "disqus_UUgDePE0jD",
                                                    "message": "<p>Perhaps it is just the one, but that one is following standards. See <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\" rel=\"nofollow noopener\" title=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\">http://www.w3.org/Protocols...</a> and see the definition of POST</p>",
                                                    "children": [
                                                        {
                                                            "created": "2015-03-03T14:02:42Z",
                                                            "name": "Alexander Weber",
                                                            "disqusUser": "",
                                                            "message": "<p>And how does using POST not follow the standard? Where in the section POST does the standard mention something that prohibits the usage of POST for an API call like for example the /delta request? I don't get the point I think.</p>",
                                                            "children": [
                                                                {
                                                                    "created": "2015-03-03T14:12:33Z",
                                                                    "name": "Rob Johnson",
                                                                    "disqusUser": "disqus_UUgDePE0jD",
                                                                    "message": "<p>POST is not for GETting data.</p><p>The below is an abstract from the W3 article:<br>----------------------------------------------------<br>POST is designed to allow a uniform method to cover the following functions:<br>      - Annotation of existing resources;<br>      - Posting a message to a bulletin board, newsgroup, mailing list, or  similar group of articles;<br>      - Providing a block of data, such as the result of submitting a form, to a  data-handling process;<br>      - Extending a database through an append operation.</p>",
                                                                    "children": [
                                                                        {
                                                                            "created": "2015-03-03T15:08:58Z",
                                                                            "name": "Alexander Weber",
                                                                            "disqusUser": "",
                                                                            "message": "<p>And you think that this list is exclusive, so nothing except for this, word by word, is allowed for POST? I don't understand the RFC like that, I would say this is a much more common specification that should fit much more cases apart of these few examples. Even while this is now a bit academic, I rather read this:</p><p>\"The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line</p><p>...</p><p>The action performed by the POST method might not result in a resource that can be identified by a URI.</p><p>...<br>The actual function performed by the POST method is determined by the server and is usually dependent on the Request-URI.\"</p><p>And from that I would assume that the /delta interface may be accessed as well using POST, because: The entity posted is a new subordinate of the resource (/delta), it is a new query. The result is nothing that can be identified by URI and the actual function preformed by the POST method is determined by the server (executing the query).</p>",
                                                                            "children": [
                                                                                {
                                                                                    "created": "2015-03-03T21:47:58Z",
                                                                                    "name": "Rob Johnson",
                                                                                    "disqusUser": "disqus_UUgDePE0jD",
                                                                                    "message": "<p>I think that a RESTful API should try to adhere to standards and use the HTTP method verbs as they were intended (<a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer)\" rel=\"nofollow noopener\" title=\"http://en.wikipedia.org/wiki/Representational_state_transfer)\">http://en.wikipedia.org/wik...</a><br>A query to filter resources is not the same thing as creating a resource. From reading the definition of /delta surely to POST and create a subordinate would be to create a new instruction, not a query to filter the collection.</p>",
                                                                                    "children": [
                                                                                        {
                                                                                            "created": "2015-03-04T08:39:33Z",
                                                                                            "name": "Alexander Weber",
                                                                                            "disqusUser": "",
                                                                                            "message": "<p>There is no such thing like RESTful or REST. These are just buzzwords. You will not find any RFC that defines REST. So to say, the HTTP protocol clearly states:</p><p>\"The POST method requests that the target resource process the representation enclosed in the request according to the resource's<br>   own specific semantics.\"</p><p>See: <a href=\"http://tools.ietf.org/html/rfc7231#section-4.3.3\" rel=\"nofollow noopener\" title=\"http://tools.ietf.org/html/rfc7231#section-4.3.3\">http://tools.ietf.org/html/...</a></p><p>It does not require anything to be created nor does it require anything specific as you say. It contains the examples you mentioned, but these are just examples. So Dropbox is compliant with the HTTP protocol and therefore with the corresponding internet standard, IMHO.</p>",
                                                                                            "children": [
                                                                                                {
                                                                                                    "created": "2017-08-15T22:52:57Z",
                                                                                                    "name": "Julio Bastida",
                                                                                                    "disqusUser": "juliobastida",
                                                                                                    "message": "<p>I don't think you see your opinion as humble IMHO</p>",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "created": "2015-03-03T15:35:51Z",
                                                    "name": "Evert",
                                                    "disqusUser": "evertp",
                                                    "message": "<p>One of the core features of the web: you can link to something that can be retrieved using GET.</p>",
                                                    "children": [],
                                                    "url": "https://evertpot.com/",
                                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "created": "2015-03-03T15:39:54Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>Your definition of idempotence is wrong, because by your definition the result of any GET request can't change for it to be idempotent. A 'query' resource is no different from any other resource.</p><p>It is definitely possible to use a trusted proxy to do https requests. It doesn't have to be a traditional proxy, but it can just be an agent that forwards requests on behalf of you and does the appropriate caching.</p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "created": "2015-03-03T19:04:13Z",
            "name": "JonRimmer",
            "disqusUser": "JonRimmer",
            "message": "<p>Your alternative suggestion would require two HTTP requests in serial instead of one though, right? If I'm using the API from a device with a poor connection, like a mobile phone, then I've just doubled what already might be a second or more of latency. Personally, I'd choose a better user experience over theoretical purity in this case. The REPORT verb looks interesting though.</p>",
            "children": [
                {
                    "created": "2015-03-03T19:08:25Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I agree that an extra request is one of the drawbacks, although good RESTful design goes well beyond 'theoretical purity'. By calling it that you immediately shut the door for considering it a valid design, and you make it hard to have an actual conversation about it.</p>",
                    "children": [
                        {
                            "created": "2015-03-03T19:49:55Z",
                            "name": "JonRimmer",
                            "disqusUser": "JonRimmer",
                            "message": "<p>I don't deny it's a valid design. But I feel there is a difference between good RESTful design and perfect RESTful design. With POST queries you lose cacheability, but is the cacheability of such complex queries important? Is it worth the necessity to persist queries as a separate resource, and to introduce extra latency? It might be, but if forced to choose, I would make the decision based on the resulting user experience and not the RESTful-ness of the API.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-03-03T20:04:33Z",
            "name": "Eric",
            "disqusUser": "disqus_fCG2HTQ7GH",
            "message": "<p>I don't understand how using POST for a complex query in not RESTful.</p><p>I can't find anything where Fielding says not to do this.  I've read several blog posts and listened to him give speeches at conferences where he says POST is fine when there isn't a good alternative among the other common verbs.</p><p>What am I missing?</p>",
            "children": []
        },
        {
            "created": "2015-03-04T20:18:45Z",
            "name": "Greg Sohl",
            "disqusUser": "gregsohl",
            "message": "<p>Doesn't the alternative approach require a stateful server? Would this violate the REST constraint of statelessness?</p>",
            "children": [
                {
                    "created": "2015-03-04T20:21:22Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>It's as much stateful as a regular POST/PUT is. If you issue a method like that, you change the server state, and this will cause a different response to be returned after a subsequent GET.</p><p>So, no... this behaves exactly like any other resource.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-03-07T17:51:55Z",
            "name": "Zdenek",
            "disqusUser": "disqus_9BFkBIoFZl",
            "message": "<p>Great post &amp; discussion!</p>",
            "children": []
        },
        {
            "created": "2015-03-11T08:24:41Z",
            "name": "Eric Lubisse",
            "disqusUser": "eric_lubisse",
            "message": "<p>Great post! I like your alternative approach to the problem. Interesting discussion as well :-)</p>",
            "children": []
        },
        {
            "created": "2015-03-18T15:05:30Z",
            "name": "orubel",
            "disqusUser": "orubel",
            "message": "<p>POST is fine. PROXY should not be the intermediary. preHandler/postHandler or preFilter/postFilter (depending on your framework) act as mediarys. This keeps the distributed architectured singled threaded and CPU bound.</p>",
            "children": []
        },
        {
            "created": "2015-10-16T10:06:18Z",
            "name": "Henrik Kindvall",
            "disqusUser": "henrik_kindvall",
            "message": "<p>When developing a REST-api to be provided for customers to implement in their custom projects, in my case my customers are expecting the API to be fully functional for them to start querying objects. If I were to provide them with your alternative approach, telling them to create queries which can later be found and queried by looking in the response header, my guess is that they would be dissapointed I don't have an api that out-of-the-box provides the relevant queries they need. (They are expecting me to provide all the relevant queries needed to get the information needed for the service). <br>With this in mind, I could create the queries before handing them the api , and mention the url-locations (queries/1 , queries/2 , queries/3 aso..) in the api-doc. However this makes me write static documentation on queries that gets rendered on run-time. And this gives me a documentation hell.</p><p>Thanks for an interesting article!</p>",
            "children": [
                {
                    "created": "2017-09-20T08:21:26Z",
                    "name": "Matt Welke",
                    "disqusUser": "mattwelke",
                    "message": "<p>I think a potential solution to your problem would be to hard code the queries in the application (as you would if you were developing a hacky POST endpoint for querying for each query), use PUT for the query resources in the author's  alternative approach, and have your application \"upsert\" these query resources every time they are to be used.</p><p>The server will only create the query resources when they haven't been used yet. Either way, given a successful response code (indicating that the query was either already there or just created), your application can then perform a GET on \"queries/:id/results\".</p>",
                    "children": []
                }
            ]
        }
    ],
    "/psr-7-issues": [
        {
            "created": "2015-03-04T07:31:26Z",
            "name": "Alex",
            "disqusUser": "",
            "message": "<p>Hi. Thank you for this interesting post. I think you have some valid points.</p><p>Could the immutability problem while returning the content from the response be solved by not returning the content istsself but only a reference to the steam?</p><p>I agree with you that returning large amounts of data is a quite common usecase and should be supported somehow. Maybe also the solution here would be to make the output stream accessible. When sending data to the stream you do not alter the response object and do not break immutability IMO.</p><p>Cheers,<br>Alex</p>",
            "children": [
                {
                    "created": "2015-03-04T08:34:24Z",
                    "name": "Emeric Kasbarian",
                    "disqusUser": "emerickasbarian",
                    "message": "<p>Hello there,</p><p>I think that technically, an immutable object could not contain a reference to a mutable object. Otherwise, the Response object's state could be different following the state of the Stream object, and that would make the Response not really immutable.</p><p>I wonder which category of bugs can be avoided when having these immutable objects? Because I never saw an HTTP abstraction considering response as immutable. I would be interested in reading their arguments, and compare them against the ability to compose the Response.</p>",
                    "children": [
                        {
                            "created": "2015-03-05T20:35:30Z",
                            "name": "Rasmus Schultz",
                            "disqusUser": "rasmusschultz",
                            "message": "<p>I guess they were shooting for consistency - which is important, but in this case doesn't really accomplish what we need. I say make the whole thing consistently mutable - if you think making objects immutable helps prevent bugs, I'm going to suggest maybe PHP isn't the language for you; there are languages where all objects are immutable values, but those languages, and more importantly all the software written in them, were designed with that in mind. PHP code, as shown in this post, generally is not written with that expectation, and immutable types only really exist for very special cases such as timestamps, which are naturally value types.</p>",
                            "children": []
                        },
                        {
                            "created": "2015-11-10T02:00:20Z",
                            "name": "Richard Remer",
                            "disqusUser": "richardremer",
                            "message": "<p>The Response is immutable regardless of whether the associated stream is.  The response will always refer to the same stream, no matter what, and cannot be changed.  Now, the state of that stream can change, but that doesn't mean the request was mutated.  This forces the application to only read the request stream once, which is more efficient.</p>",
                            "children": [
                                {
                                    "created": "2015-11-10T02:57:34Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>This makes absolutely no sense.</p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "created": "2015-03-04T09:57:18Z",
            "name": "Olivier Laviale",
            "disqusUser": "olvlvl",
            "message": "<p>I share your option about the PSR-7. Although I also implemented ICanBoogie's Request class as a somewhat immutable instance, parameters (request, path, query) are the one thing that should be mutable. Because it's often the case that the parameters of a request need to be altered during the process of a request. This includes sanitization, or controllers adding default values, or removing others.</p><p>Also I don't like these withXxx() methods, if you need to change multiple things you create a lot of intermediate instances for nothing. I elected to implement a change() method that allows me to obtain an altered copy of a request with many changed aspects in a single step.</p><p>Contrary to Request instances, ICanBoogie's Response instances are completely mutable. And I don't see it any other way because the instance is often altered during the life time of the application, by controller actions or event hooks for instance. I can always supply a different Response instance if I need to completely replace a response.</p><p>Regarding streams, I chose to use Closures. They are not seekable or anything, but really who cares about that? Thus, if the response body is a Closure I send the headers then invoke the closure to output the body. Pretty simple and efficient.</p><p>This is ICanBoogie's implementation of the Request/Response pattern: <a href=\"https://github.com/ICanBoogie/HTTP\" rel=\"nofollow noopener\" title=\"https://github.com/ICanBoogie/HTTP\">https://github.com/ICanBoog...</a></p>",
            "children": []
        },
        {
            "created": "2015-03-04T13:51:23Z",
            "name": "Fusty",
            "disqusUser": "disqus_VAbF3xwtY5",
            "message": "<p>Could anyone enlighten me as to the theory behind making the object immutable?  What would stop people from making a mutable response object that generates the immutable response object just before the end of execution (or would this simply be bypassing PSR-7)?</p><p>Thanks for the write up!</p>",
            "children": [
                {
                    "created": "2015-03-04T15:44:47Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>It would totally be possible to take this approach, but then you would only really take partial advantage of what PSR-7 offers. You lose out on things like middlewares.</p>",
                    "children": [
                        {
                            "created": "2015-05-19T14:20:44Z",
                            "name": "David Lundgren",
                            "disqusUser": "drlundgren",
                            "message": "<p>StackPHP, laravel, and I'm sure others have had middleware for quite a <br>while now, I don't think there is a real loss here. Middleware that is PSR-7 compliant should work ok. The exception I can see is as mentioned in another comment where forensic analysis is being done AFTER other middleware, at which point I'd suggest to move it, just as Rasmus suggested.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-03-04T15:16:29Z",
            "name": "lucifurious",
            "disqusUser": "turdfire",
            "message": "<p>Immutability at the response level is retarded. Obviously these alleged experts haven't coded many HTTP applications with REST APIs.</p><p>It sounds like they want to turn PHP into Java. Ew...</p>",
            "children": [
                {
                    "created": "2015-03-06T13:44:17Z",
                    "name": "Olivier Laviale",
                    "disqusUser": "olvlvl",
                    "message": "<p>+1 for your comment about turning PHP into Java. Most PHP frameworks nowadays don't even use properties, it's all about setThis(), getThat()\u2026</p>",
                    "children": [
                        {
                            "created": "2016-04-16T17:59:54Z",
                            "name": "Phil",
                            "disqusUser": "PhilipNicolcev",
                            "message": "<p>We often joke about how symfony started turning php into java at work.</p><p>And it's not said as a compliment.</p>",
                            "children": []
                        }
                    ]
                },
                {
                    "created": "2015-04-03T08:17:33Z",
                    "name": "Jakub Zalas",
                    "disqusUser": "jakub_zalas",
                    "message": "<p>Attributes are application and request specific, and actually CAN be mutable.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2015-03-04T16:35:13Z",
            "name": "Tomasz Kowalczyk",
            "disqusUser": "tomasz_kowalczyk",
            "message": "<p>How about solving immutability issue with ResponseBuilder? When someone needs to change Response object, ResponseBuilder::fromResponse($response)-&gt;setHeader('name', 'value')-&gt;getResponse() comes in handy and PSR-7 principles stand. I assume that when creating Response object constructor will be sufficient.</p>",
            "children": [
                {
                    "created": "2017-03-17T06:11:58Z",
                    "name": "Vincent van Dijk",
                    "disqusUser": "vincentvandijk",
                    "message": "<p>I think builders and factories are always a good idea. A lot of PSR-7 implementations use static factories on the request and response object. Classes get very bloated and violate SRP.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2015-03-04T18:31:40Z",
            "name": "Miles Johnson",
            "disqusUser": "miles_johnson",
            "message": "<p>I definitely agree with what you're talking about. I love immutability when it is useful and I feel like this situation isn't one of them.</p>",
            "children": []
        },
        {
            "created": "2015-03-04T20:23:25Z",
            "name": "Alex Sears",
            "disqusUser": "searsaw",
            "message": "<p>I completely agree that the Request object should be immutable.  However, the Response object should definitely be mutable.  The whole point is that it will constantly be changing until the server sends it back to the client.  Continually creating new objects seems like a waste of overhead and memory.</p><p>I'm not sure if this is possible, but could the request object, on instantiation, do some sort of checking to see if the request is over some threshold?  If it is, then it streams the request in when running $request-&gt;getBody()-&gt;getContent().  This could be given a \"sensible\" default in PSR-7 but is open enough to be able to be changed by people or frameworks that feel it should be a higher or lower threshold.  A user could check if it's streaming using $request-&gt;isStreaming() and then run a loop over the object - if it implemented the Traversable interface of course!  This also means the $request-&gt;getBody()-&gt;getContent() method could check for streaming, loop over it and save it locally, and then return the whole thing to the application.  This way, when using the Request object, the developer doesn't need to worry about all the streaming issues if they don't want to.</p><p>.....oooooooor create a subclass of the Request object called StreamingRequest or something that can be used if a developer knows they are streaming in content.</p>",
            "children": [
                {
                    "created": "2015-03-04T20:34:22Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>An immutable response was one of the earlier proposals, but that's also an issue in the client-situation where you want the exact opposite. It also ignores an (imho valid) use-case to allow plugins or middlewares (or whatever) to make small alterations to a request.</p><p>Lastly, by introducing a split non-streaming/streaming behavior would just make any streaming-related problem more complicated because you need to expect both situations. You can't just support one of them.</p>",
                    "children": [
                        {
                            "created": "2015-03-05T20:25:11Z",
                            "name": "Rasmus Schultz",
                            "disqusUser": "rasmusschultz",
                            "message": "<p>agree, middleware in PHP is up and coming, and it's going to be hugely important any day now.</p>",
                            "children": []
                        },
                        {
                            "created": "2015-05-15T12:13:54Z",
                            "name": "Pies",
                            "disqusUser": "Pies",
                            "message": "<p>Middlewares can very much alter the request information, just not by modifying the actual object. That means that any alterations to the request object must be done in a proper way - you can easily provide an interface that allows a module to interject itself into the Request object creation pipeline.</p><p>And if you're doing something completely non-standard that requires you to allow Request to be mutable, don't use the PSR-7 standard :) It's not obligatory.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-03-05T20:13:02Z",
            "name": "Rasmus Schultz",
            "disqusUser": "rasmusschultz",
            "message": "<p>My own request and response models in the past have always been mutable. Why? Because these are objects, not values, unlike e.g. DateTime which desperately needed an immutable counterpart. Requests and responses? Definitely not values. Objects for sure. In PHP, objects are mutable, the only exception being value objects such as time stamps, because changing the time stamp makes it inherently a new value. Every case I can think, with immutable request and response models, I will have to simply throw away the previous instance after making a change - which makes immutability rather pointless, if in every case, the new object is going to replace the old, the net effect is equivalent to simply changing the object in the first place. So you will be fighting immutability every step of the way, and, as you pointed out, APIs will end up looking rather kinky.</p><p>As for issues with streaming larger volumes of data, I agree completely. A common use case for me is a long running CSV or XML export, which has to stream and cannot be buffered because it won't fit in memory. Even if it fit, buffering is unnecessary and a waste of resources, and requires the end user to wait for the whole data stream to be prepared before they can start downloading the result. That's crazy. My own response models in the past have always simply had a send() method, which would write to the output buffer - a simple approach that doesn't get in the way of testing, as you can simply turn on another output buffer, if needed. Whether it's sending a 100MB binary or a partial response or an HTML document or something else, has never been an issue for me with that model. Here is the simple response model I have been using:</p><p><a href=\"https://github.com/mindplay-dk/spatch\" rel=\"nofollow noopener\" title=\"https://github.com/mindplay-dk/spatch\">https://github.com/mindplay...</a></p>",
            "children": [
                {
                    "created": "2015-04-23T06:54:08Z",
                    "name": "frostymarvelous",
                    "disqusUser": "frostymarvelous",
                    "message": "<p>If I am still holding on to the original object, your changes won't affect me. <br>While you throw away, I'm still keeping it. <br>I don't make invalid assumptions about state this  way. </p>",
                    "children": [
                        {
                            "created": "2015-04-23T16:56:01Z",
                            "name": "Rasmus Schultz",
                            "disqusUser": "rasmusschultz",
                            "message": "<p>Yeah, that's fine in a lot of cases, but not this one - due to the life-cycle of a PHP request, which matches that of an HTTP request, the number of Request and Response objects required during the life-cycle of a single isolated script run (one HTTP request) is precisely one; there's never more than one incoming Request, or more than one Response returned, during the same script run.</p><p>That's not set to change in PHP 7, nor likely to change in any future version of PHP, so the assumption about state here seems correct to me.</p><p>The exception would be unit-testing, but I design for the use-case first, not for testing.</p>",
                            "children": [
                                {
                                    "created": "2015-04-23T16:58:57Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>A lot of people need the use of 'sub requests'. I certainly do.</p>",
                                    "children": [
                                        {
                                            "created": "2015-04-23T17:43:54Z",
                                            "name": "Rasmus Schultz",
                                            "disqusUser": "rasmusschultz",
                                            "message": "<p>Again, that's one Request per sub-request, you don't need more than one Request instance to handle one sub-request. The parity remains the same - there is no case in which you would need more than one Request instance per request or sub-request.</p><p>IMO, the only case where immutable Request objects may be an advantage, is for testing - in every other case it's weird and unnatural and leads to strange code trying to \"emulate\" normal (in PHP) mutable objects by designing APIs that enable you to replace the Request object, leading essentially to garbled, messy code that effectively accomplishes the same thing.</p><p>I don't get it. This approach does nothing useful for me, it just complicates something that should be simple, and would be if you would follow the normal, natural object life-cycle generally used in PHP code.</p>",
                                            "children": [
                                                {
                                                    "created": "2015-04-23T22:09:07Z",
                                                    "name": "Evert",
                                                    "disqusUser": "evertp",
                                                    "message": "<p>I wasn't arguing against mutability. I'm obviously a proponent. I'm just saying that this statement:</p><p>&gt; The number of Request and Response objects required during the life-cycle<br> of a single isolated script run (one HTTP request) is precisely one</p><p>Is very far from the truth for many applications. Sub-requests is one of them.</p>",
                                                    "children": [
                                                        {
                                                            "created": "2015-04-23T22:27:38Z",
                                                            "name": "Rasmus Schultz",
                                                            "disqusUser": "rasmusschultz",
                                                            "message": "<p>What I'm trying to say is that each individual request or sub-request requires one request/response object pair - the request that actually gets dispatched, and the response that actually gets returned. The intermediary objects (or object states if mutable) are uninteresting, except maybe for testing or diagnostics. Each immutable object is identical to a mutable object state, and only the final state or object is actually dispatched. Immutability in this case just means more fighting for control - in the end, what we want is to be able to alter the request in stages; mutable objects enable that, while immutable objects hinder it. </p>",
                                                            "children": [
                                                                {
                                                                    "created": "2015-04-28T07:07:10Z",
                                                                    "name": "frostymarvelous",
                                                                    "disqusUser": "frostymarvelous",
                                                                    "message": "<p>Let me add that I'm not a proponent for immutability. I like php the old fashioned way. <br>I'm just playing the Devils advocate trying to find leaks in the immutability argument. </p>",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "url": "https://evertpot.com/",
                                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                }
                                            ]
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                },
                                {
                                    "created": "2015-04-24T17:44:28Z",
                                    "name": "frostymarvelous",
                                    "disqusUser": "frostymarvelous",
                                    "message": "<p>Exactly! If the various middleware keep modifying the request, e.g. A  middleware that cleans up the input etc then the actual request changes. Another middleware down the line might want to inspect the actual request that came in say for forensics or even logging. What happens then? </p>",
                                    "children": [
                                        {
                                            "created": "2015-04-26T13:22:02Z",
                                            "name": "Rasmus Schultz",
                                            "disqusUser": "rasmusschultz",
                                            "message": "<p>So just inject your middle-ware in the correct order? If you want to inspect the original request, inject that middle-ware first - why would you inject it last and then try to work your way backwards to the original request? That seems backwards.</p><p>The only scenario I can think of, where this is useful, is if the request processing chain were to fork for some reason - e.g. creating two different, parallel request creation pipelines. In that particular case (assuming there are any real use-cases) that particular middleware could simple use the clone keyword to create an identical request object - that makes more sense to me than cloning everything by default with every incremental change, when most of the time the previous object simply falls out of scope and gets garbage-collected anyway.</p><p>I just don't see immutability solving a real problem here. For example, have you heard a lot of Symfony developers complain about mutability of the Request object? Does it cause real-world problems that are addressed by immutability? I don't get the impression that there's a lot of that going around.</p>",
                                            "children": [
                                                {
                                                    "created": "2015-04-28T07:01:56Z",
                                                    "name": "frostymarvelous",
                                                    "disqusUser": "frostymarvelous",
                                                    "message": "<p>Your assumption being I know the workings of all my middleware in and out to know which one does what?</p><p>Remember, the example is simplistic. All my middleware can be modifying while trying to consume the original request.</p><p>And yes, the idea of psr7 is to allow us to reuse middleware from other frameworks.</p>",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "created": "2015-11-12T12:51:11Z",
            "name": "nickshanks",
            "disqusUser": "nickshanks",
            "message": "<p>I would like to see a community-accepted extension to the PHP-FIG spec, that adds mutability to Response, and middleware written to *that* API instead. Then everyone would be happy, the purists can use the spec as it was written, and the realists can use the spec that works in the real world.</p>",
            "children": []
        },
        {
            "created": "2015-12-31T20:47:18Z",
            "name": "Bishop",
            "disqusUser": "disqus_EcosbObrup",
            "message": "<p>Sure, PSR-7 seems to give users the finger, but remember that the FIG PSR aim to foster interoperability. In this case, interoperability between middleware stacks. Despite holding state, request and response are shared amongst a pool of middleware components who may know nothing of one another and who may be able to affect one another.  Viewed in this light, the default behavior of immutability makes sense, though it means FIG has more of a sales job to do to hook developers into this mentality.</p><p>Yes, immutability seems contrary to the common application use case, but I think it fosters a pluggable middleware ecosystem.  And that, in my mind, is the biggest win.  Because if we have a robust selection of middleware, we can eschew monolithic frameworks and instead start from gaunt micro-frameworks that applications fatten with suitable middleware.</p>",
            "children": []
        },
        {
            "created": "2016-11-29T03:49:34Z",
            "name": "bruce",
            "disqusUser": "disqus_JsDtwOxPcM",
            "message": "<p>I have not tried psr-7 but i think immutable is not a problem. I think immutable objects can be copied simply by making a copy of a reference to it instead of copying the entire object or we could implement 'copy on write' technique.</p>",
            "children": []
        },
        {
            "created": "2017-03-10T01:03:07Z",
            "name": "Matrix AI",
            "disqusUser": "matrixai",
            "message": "<p>You need generators, the response object should store a generator expression. That is controllers within the http kernel are all lazy, response transformations gets mapped to each other as an expression, and only at the final point of emission do you perform the task of fetching the content and emitting the response to the client. This way you get the flexibility of having out-of-order construction of responses, and ordered execution of the response.</p>",
            "children": []
        },
        {
            "created": "2017-03-17T06:24:26Z",
            "name": "Vincent van Dijk",
            "disqusUser": "vincentvandijk",
            "message": "<p>Any change in thoughts nowadays? PSR-7 is all about PHP 5.3, what about looking forward with such nice things as type hinting and return types in PHP 7?</p>",
            "children": []
        }
    ],
    "/an-xml-library-you-may-not-hate": [
        {
            "created": "2015-04-02T05:12:33Z",
            "name": "rkr",
            "disqusUser": "",
            "message": "<p>What about xpath? The examples you've shown, could be archived with little overhead using DOM. The only real feature so far (as I got it) is the mapper. Can you make it more clear were the differences between DOM and sabre/xml are? </p>",
            "children": [
                {
                    "created": "2015-04-02T14:23:35Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Aside from object mapping, the other benefits are really the same benefits that XMLReader has over the DOM. XMLReader is single-pass, low on memory and I believe that it has a nicer API.</p><p>This library is lifted effectively from sabre/dav, which is a library for webdav, caldav and carddav. Those protocols use a ton of XML, and I have been using the DOM for years. For me this was a major upgrade, and will also allow me to do streaming XML responses for large bodies in the future, whereas with the DOM I just had to submit to hundreds of MB in memory usage.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-04-02T07:23:57Z",
            "name": "z2z",
            "disqusUser": "",
            "message": "<p>PHP really needs something like JAXB. Searching for one...</p>",
            "children": []
        },
        {
            "created": "2015-04-02T21:05:55Z",
            "name": "Petah",
            "disqusUser": "PetahNZ",
            "message": "<p>Repeating the namespace is a bit annoying</p>",
            "children": []
        },
        {
            "created": "2017-12-01T17:45:26Z",
            "name": "Ryan Tate",
            "disqusUser": "disqus_TghuFm2znW",
            "message": "<p>Repeating the namespace all over is not that DRY. Needs some sort of namespacing tool.</p><p>function mkNS(string $ns){<br>    return function(string $key = '') use($ns){<br>        return $key ? \"{{$ns}}$key\" : $ns;<br>    };<br>}</p><p>$ns = mkNS('<a href=\"http://example.org\" rel=\"nofollow noopener\" title=\"http://example.org\">http://example.org</a>');<br>$xmlWriter = new Sabre\\Xml\\Writer();<br>$xmlWriter-&gt;openMemory();<br>$xmlWriter-&gt;startDocument();<br>$xmlWriter-&gt;setIndent(true);<br>$xmlWriter-&gt;namespaceMap = [$ns() =&gt; 'b'];</p><p>$xmlWriter-&gt;write([<br>    $ns('book') =&gt; [<br>        $ns('title') =&gt; 'Cryptonomicon',<br>        $ns('author') =&gt; 'Neil Stephenson',<br>    ]<br>]);</p>",
            "children": []
        }
    ],
    "/on-callables-and-closures": [
        {
            "created": "2015-05-06T19:08:35Z",
            "name": "Matthew Weier O'Phinney",
            "disqusUser": "weierophinney",
            "message": "<p>I'd argue it's a PHP bug, as it means there's an inconsistency between what the typehint callable deems valid, and what can actually be directly invoked by PHP. This is exactly the sort of inconsistency that Zeev and Dmitry were also attempting to fix with their alternate STH patch (not with regards to STH, but with regards to ensuring the engine casting rules are implemented consistently).</p>",
            "children": [
                {
                    "created": "2015-05-07T15:25:37Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Looks like there was a bug already! <a href=\"https://bugs.php.net/bug.php?id=68475\" rel=\"nofollow noopener\" title=\"https://bugs.php.net/bug.php?id=68475\">https://bugs.php.net/bug.ph...</a></p>",
                    "children": [
                        {
                            "created": "2015-05-08T14:59:24Z",
                            "name": "Olivier Laviale",
                            "disqusUser": "olvlvl",
                            "message": "<p>What's worse is that is_callable() says \"a::b\" is callable, but currently it isn't.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-05-07T08:23:49Z",
            "name": "Nicolas Grekas",
            "disqusUser": "nicolasgrekas",
            "message": "<p>See <a href=\"https://bugs.php.net/bug.php?id=68475\" rel=\"nofollow noopener\" title=\"https://bugs.php.net/bug.php?id=68475\">https://bugs.php.net/bug.ph...</a></p>",
            "children": [
                {
                    "created": "2015-05-07T15:24:41Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Thanks! Glad to see I was not alone =)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-05-07T16:25:58Z",
            "name": "Aaron Piotrowski",
            "disqusUser": "trowski",
            "message": "<p>Any idea if this has been fixed in PHP7?</p><p>I was looking forward to changing the call_user_func_array($callback, $args) calls in my code to $callback(...$args). Instead, now it looks like they'll be staying and I may have to go change $callback() to call_user_func($callback).</p>",
            "children": [
                {
                    "created": "2015-05-07T17:03:03Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Unfortunately not yet. Take a look here:</p><p><a href=\"http://3v4l.org/Kkr3F\" rel=\"nofollow noopener\" title=\"http://3v4l.org/Kkr3F\">http://3v4l.org/Kkr3F</a></p>",
                    "children": [
                        {
                            "created": "2015-05-07T17:08:17Z",
                            "name": "Aaron Piotrowski",
                            "disqusUser": "trowski",
                            "message": "<p>Now I'm debating if I want to just tell people to not use the \"Class::method\" syntax or actually change all my code to support it.</p><p>I could also consider finding the code that makes $callback() possible in the interpreter and see if I could patch it, then do the same for PHP 5.5 and 5.6.</p>",
                            "children": [
                                {
                                    "created": "2015-05-07T17:14:59Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>A patch would be awesome ;) check the bug in one of the other comments.</p><p>I had the same thought myself about telling people not use the syntax vs. using call_user_func everywhere. Since it's considered a PHP bug, I'm leaning towards telling people to stop using it.</p>",
                                    "children": [
                                        {
                                            "created": "2015-05-07T17:46:19Z",
                                            "name": "Aaron Piotrowski",
                                            "disqusUser": "trowski",
                                            "message": "<p>From the comments on that bug report, it looks like I'd have better luck if I removed the compatibility from is_callable() and the callable type-hint rather than try and support it in the $callback() syntax.</p><p>I think I will also just advise people not to use it, since it's just duplication of ['ClassName', 'methodName'].</p>",
                                            "children": []
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        },
                        {
                            "created": "2016-05-14T09:16:48Z",
                            "name": "mnapoli",
                            "disqusUser": "matthieunapoli",
                            "message": "<p>Just a quick update: it was actually implemented in PHP 7 (after your comment). If you follow the link you can see it now works correctly.</p><p>That will avoid raising doubts to future readers (like me) ;)</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/sabredav-3-released": [
        {
            "created": "2015-06-12T16:20:05Z",
            "name": "J'informatique",
            "disqusUser": "jinformatique",
            "message": "<p>Thanks for the news. Why not swith directly to PHP 5.6 ?</p>",
            "children": [
                {
                    "created": "2015-06-16T13:43:11Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Don't want to cut off PHP 5.5 users just yet. Also, PHP 5.6 doesn't really offer that much, relative to PHP 5.5</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/switching-to-generators": [
        {
            "created": "2015-08-10T17:39:53Z",
            "name": "Matthias Noback",
            "disqusUser": "matthiasnoback",
            "message": "<p>Although it doesn't fix the issue with <code>array_*</code> functions and iterators, <a href=\"https://github.com/nikic/iter\" rel=\"nofollow noopener\" title=\"https://github.com/nikic/iter\">https://github.com/nikic/iter</a> may help bridge the gap.</p>",
            "children": [
                {
                    "created": "2015-08-10T17:45:25Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Nice! Excellent link =)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-08-17T19:04:38Z",
            "name": "stuartcarnie",
            "disqusUser": "scarnie",
            "message": "<p>array_map and array_filter not being supported is not a mistake. Generators allow for efficient composition or pipelining. In fact, PHP already has an analog for array_filter using the \\CallbackFilterIterator. It is trivial to write a MapIterator or anything else your heart desires. The problem with array_map and array_filter is they require the full array, and therefore lose the memory efficiency of generators</p>",
            "children": []
        },
        {
            "created": "2015-08-25T18:10:27Z",
            "name": "HappyArchLabsUser",
            "disqusUser": "HappyArchLabsUser",
            "message": "<p>&gt; Unfortunately, PHP also does not allow you to use the array traversal functions on generators, including array_filter, array_map</p><p>why u should use them if u have \"foreach\" ?</p><p>&gt; foreach($model-&gt;getArticles() as $article) {</p>",
            "children": [
                {
                    "created": "2015-11-30T09:42:39Z",
                    "name": "Christopher Thomas",
                    "disqusUser": "disqus_MvlKJWBGGr",
                    "message": "<p>easy, because I can do this and it's much compact and conceptually simple</p><p>$result = array_map(\"trim\",$input);</p>",
                    "children": [
                        {
                            "created": "2016-03-09T12:45:42Z",
                            "name": "philjohn2",
                            "disqusUser": "philjohn2",
                            "message": "<p>Even better - put it in the generator if you're going to do it in the first place anyway ...</p>",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "created": "2015-09-11T12:56:05Z",
            "name": "Mark Baker",
            "disqusUser": "disqus_bPg2S9hlgX",
            "message": "<p>You can simulate array_filter() and array_map() (and even array_reduce()) pretty easily for Generators:</p><p>function generator_map(Traversable $filter, Callable $callback) {<br>            foreach ($filter as $value) {<br>                        yield $value =&gt; call_user_func($callback, $value);<br>            }<br>}</p><p>function generator_reduce(Traversable $filter, Callable $callback, $initial=0.0) {<br>    $result = $initial;<br>    foreach($filter as $value) {<br>        $result = call_user_func($callback, $value, $result);<br>    }<br>    yield $result;<br>}</p>",
            "children": []
        },
        {
            "created": "2016-03-08T13:42:32Z",
            "name": "Johannes",
            "disqusUser": "disqus_ivZZOHDR2W",
            "message": "<p>Mind that the PDOStatement is an Iterator (more precise: Traversable) already.</p><p>You can therefore simplify getArticles to this:</p><p>function getArticles() {<br>  return $this-&gt;db-&gt;query('SELECT * FROM articles');<br>}</p><p>No need for generators there.</p><p>Also by using Iterators you can also use a custom Iterator to do the mapping:</p><p>class HTMLListIterator extends IteratorIterator {<br>public function __construct(Traversable $inner) {<br>    // PDOStatement is a Traversable, which doesn't have a \"current\"<br>    // method, therefore we wrap it, so we have a current() in the <br>    // function below<br>    parent::__construct(new IteratorIterator($inner));<br>}</p><p>    public function current() {<br>  return \"&lt;li&gt;\", htmlspecialchars($this-&gt;getInnerIterator()-&gt;current()-&gt;title), \"&lt;/li&gt;\";<br>    }<br>}</p><p>foreach(new HTMLListIterator($model-&gt;getArticles()) as $article) {<br>    echo $article;<br>}</p><p>The interesting effect here (maybe not so much in that specific example, but abstract it a bit ...) is that we separate different aspects. If we want to replace the database with an array or some other source we don't have to change any other code. If we want to use the same formatting somewhere else (i.e. to write a rendered cache file) we can re-use it etc.</p><p>Iterators are really powerful, but you need some boilerplate ... and be careful to understand what's going one lateron.</p>",
            "children": []
        },
        {
            "created": "2017-03-03T15:33:11Z",
            "name": "Matrix AI",
            "disqusUser": "matrixai",
            "message": "<p>If you use `rowCount()` on a PDOStatement, does this end up counting through all the rows to get you the number, thus defeating the purpose of using the same PDOStatement as an iterator? Or is there another way to find out whether there are any results without doing any iteration?</p>",
            "children": []
        }
    ],
    "/switching-to-linux": [
        {
            "created": "2015-12-09T23:27:04Z",
            "name": "Hans Schmeidenbacher",
            "disqusUser": "hansschmeidenbacher",
            "message": "<p>Regarding the battery life, you might want to consider adding this to your toolset:</p><p><a href=\"http://linrunner.de/en/tlp/docs/tlp-linux-advanced-power-management.html\" rel=\"nofollow noopener\" title=\"http://linrunner.de/en/tlp/docs/tlp-linux-advanced-power-management.html\">http://linrunner.de/en/tlp/...</a></p><p>It's nothing more than some clever shell scripts (open source, of course) utilising any available powersaving feature in the linux kernel. This usually has doubled the battery life of about any laptop / notebook i used it on. This might actually push your battery life the promised runtime. Best part of it, it's install and go. The basic configuration usually is enough. Try it.</p>",
            "children": []
        },
        {
            "created": "2015-12-10T02:09:46Z",
            "name": "Todd Caldwell",
            "disqusUser": "disqus_8KPxhMmT5p",
            "message": "<p>Asus c300 or c200, 18h of battery, full Linux in chroot and all the benefits of chromeos.</p>",
            "children": []
        },
        {
            "created": "2015-12-10T07:50:15Z",
            "name": "Vincent Petry",
            "disqusUser": "PVince81",
            "message": "<p>I'm also using Plasma 5 (5.4.3) with the Dell XPS 13 dev edition 9333 (the previous model)</p><p>Regarding tearing, maybe this could help <a href=\"http://xps13-9333.appspot.com/#video_tearing\" rel=\"nofollow noopener\" title=\"http://xps13-9333.appspot.com/#video_tearing\">http://xps13-9333.appspot.c...</a></p><p>For the touchscreen with Firefox I have an extension called \"Grab and Drag\".<br>And another one for HiDPI auto-adjust, it's called \"AutoHiDPI\".</p><p>Regarding battery life, I ran powertop and added the settings permanently. Basically set almost everything to power save mode (even the touchscreen) except the sound card. If you don't use bluetooth, add the \"btusb\" module in your blacklist file.</p><p>I use KOrganizer and Kontakt with ownCloud's calendar/contact apps and it seems to work fine. :-)</p><p>Cheers,</p><p>Vincent</p>",
            "children": [
                {
                    "created": "2015-12-10T20:50:28Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I saw 'grab and drag', but the problem is that it disables text-selection by default. There's a possibility to set a keyboard shortcut to switch this functionality, but that kind of defeats the point for me.</p><p>What I want is the operating system to understand intent, or alter it's behavior based on the specific input type.</p><p>I did also do powertop and set all their recommendations... but maybe it's just me, I just didn't see a strong difference. The change seems minimal. How much time are you getting out of your battery?</p><p>I don't know yet what the Korganizer bug is, but new events I create simply don't end up on the server. Silently :/</p><p>I'll definitely take a look at the suggestions regarding tearing though!</p>",
                    "children": [
                        {
                            "created": "2015-12-11T07:25:53Z",
                            "name": "Vincent Petry",
                            "disqusUser": "PVince81",
                            "message": "<p>Regarding touchscreens, it seems Plasma isn't there yet. Gnome 3 seems to already have better touch support with gestures. It would definittely be cool if the OS could adjust accordingly!<br>However, programs like Firefox which aren't directly part of / integrated in the OS don't come with proper touchscreen support (yet), so unfortunately still need to resort to plugins. I agree that \"grab and drag\" isn't optimal, I haven't found anything better yet. Looks like Chromium works better on that side, I'm able to drag pages with touch.</p><p>Regarding powertop, when I bought the laptop I managed to reach 6-7 hours of battery life with moderate use. Now it's down to 5 apparently.</p><p>For KOrganizer, I use \"DAV groupware resource\" which has both CalDAV and CardDAV. It always worked fine for me since the KDE 4 days, so not sure what's happening in your env.</p>",
                            "children": [
                                {
                                    "created": "2015-12-16T08:43:26Z",
                                    "name": "Jos Poortvliet",
                                    "disqusUser": "jospoortvliet",
                                    "message": "<p>My experience with the Samsung S9 I've had for years is that Linux kernels make a huge difference. Some are good, others are worse, things go up and down for a bit until it settles after a year or two at a decent level. Good luck :P</p>",
                                    "children": []
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-12-10T09:10:35Z",
            "name": "gour_atmarama",
            "disqusUser": "gour_atmarama",
            "message": "<p>Hiya,</p><p>I was using Gentoo &gt; 5yrs, then same with Arch. Then switched to Debian (Sid) with XFCE, but then moved to openSUSE (GNOME3) and I can really recommend to try it out. I e.g. like snapper tool which enables you to create snapshot of your OS before upgrading (I'm using rolling Tumbleweed) and in case something goes wrong, it's very easy to rollback and boot in the old working version. ;)</p>",
            "children": [
                {
                    "created": "2015-12-10T20:54:56Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Definitely interested to give Gnome3 a roll in the future, but I really like running Debian-like systems. I'm comfortable ;)</p>",
                    "children": [
                        {
                            "created": "2015-12-12T10:10:24Z",
                            "name": "Dremor",
                            "disqusUser": "disqus_6Zs5WUDVCL",
                            "message": "<p>Then you can try Ubuntu Gnome, or Debian itself. Both use Gnome 3 as default desktop environment.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-12-10T11:11:18Z",
            "name": "Patrik Nilsson",
            "disqusUser": "disqus_bfTkbFTepy",
            "message": "<p>Chromium/chrome should work with HiDPI out of the box. If not here is a great resource for getting it working, as well as HiDPI support in general:<br><a href=\"https://wiki.archlinux.org/index.php/HiDPI#Chromium_.2F_Google_Chrome\" rel=\"nofollow noopener\" title=\"https://wiki.archlinux.org/index.php/HiDPI#Chromium_.2F_Google_Chrome\">https://wiki.archlinux.org/...</a></p><p>The ArchWiki is a great reference, even for Ubuntu based distributions. Of course it helps if you are familiar with both and can read between the lines.</p><p>By the way chromium/chrome also has nice scrolling on touchscreens (the way you expect it to work) out of the box.</p><p>P.S. I have nothing against Firefox! I use both.</p>",
            "children": [
                {
                    "created": "2015-12-10T20:50:45Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>That page is great. My chrome is now normal size again. Awesome!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-12-10T15:20:29Z",
            "name": "Alberto Mardegan",
            "disqusUser": "albertomardegan",
            "message": "<p>Since you mentioned Ubuntu and Amazon: <a href=\"http://www.whizzy.org/2015/12/online-searches-in-the-dash-to-be-off-by-default/\" rel=\"nofollow noopener\" title=\"http://www.whizzy.org/2015/12/online-searches-in-the-dash-to-be-off-by-default/\">http://www.whizzy.org/2015/...</a></p>",
            "children": [
                {
                    "created": "2015-12-10T17:42:50Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Bit late, but good that they're finally doing that. I think it's kind of against what Linux stands for.</p>",
                    "children": [
                        {
                            "created": "2015-12-10T18:31:42Z",
                            "name": "jon_downfromthetrees",
                            "disqusUser": "jon_downfromthetrees",
                            "message": "<p>Well, it's been opt-out for a long time (Systems Settings), now it looks to be opt-in in 16.04.</p><p>I never saw it as a privacy concern, just something that added to the visual clutter.</p>",
                            "children": [
                                {
                                    "created": "2015-12-10T20:47:00Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>It's advertising + tracking deeply integrated in the core desktop experience. Whether or not care has been taken treating the data somewhat privately (meta-data only, etc..) I think Ubuntu should set the bar, not find the lowest point what people still find acceptable.</p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-12-11T19:53:20Z",
            "name": "alex knol",
            "disqusUser": "alexknol",
            "message": "<p>I run elementary os on an Asus ux303la with a 1080 touchscreen with 12gb ram and ssd+hdd. Far better user experience than the macbook pro my employer forced on me at roughly half price.</p>",
            "children": []
        },
        {
            "created": "2015-12-14T12:40:32Z",
            "name": "Tim",
            "disqusUser": "disqus_dGUSklh9xX",
            "message": "<p>Check out KeePass as a 1Password replacement. I did the switch and don't regret it, KeePass has a lot of plugins and works on all my devices.<br><a href=\"http://keepass.info/\" rel=\"nofollow noopener\" title=\"http://keepass.info/\">http://keepass.info/</a></p>",
            "children": []
        },
        {
            "created": "2015-12-14T15:24:41Z",
            "name": "Peter",
            "disqusUser": "disqus_30iaz2MUbG",
            "message": "<p>I've found enpass (<a href=\"https://enpass.io/)\" rel=\"nofollow noopener\" title=\"https://enpass.io/)\">https://enpass.io/)</a> to be a great alternative to 1Password, I would basically call it a clone, works great for me (syncing with dropbox, import from 1Password, clients for basically all platforms)</p>",
            "children": []
        },
        {
            "created": "2015-12-16T08:41:43Z",
            "name": "Jos Poortvliet",
            "disqusUser": "jospoortvliet",
            "message": "<p>Welcome to Linux and KDE, Evert! I agree that Plasma has come a long way and looks quite awesome in its latest incarnation. And the XPS 13 seems an awesome laptop.</p>",
            "children": []
        },
        {
            "created": "2015-12-16T14:39:56Z",
            "name": "SillyWalk",
            "disqusUser": "dakira",
            "message": "<p>The Gnome folks are working on a calendar app which I'm rooting for. It was released with the latest version of Gnome (that new version isn't available in Ubuntu yet, though). For passwords I've always used Lastpass and their handling of security issues has convinced me to stick with them.</p>",
            "children": []
        },
        {
            "created": "2015-12-28T02:59:35Z",
            "name": "ALV",
            "disqusUser": "alvinchevolleaux",
            "message": "<p>Hi, great article but I feel like you've missed out an important Linux distro; Fedora. I've used Ubuntu and Arch but Fedora is the best IMHO. It also works \"out of the box\" these days, the most I've had to do in recent times was install a wireless driver for a laptop but everything else was fine right after install.</p><p>I learnt how to use Linux on Red hat a long time ago so I may be a little biased here.</p><p>Also I run Steam in Fedora and can play loads of brand new PC games, Linux has come a long way no matter which distro you choose. Only thing I miss is Photoshop which I need to use as I do front end stuff for web. I just run Virtual Box though and it runs fine, I don't recommend wine as it just doesn't have the same feel as Photoshop on Windows or Mac. Oh and you can always do a dual boot with Windows like I have but I barely use my Windows boot these days!</p>",
            "children": [
                {
                    "created": "2016-01-05T10:26:25Z",
                    "name": "Mike",
                    "disqusUser": "",
                    "message": "<p>It's curious, but I've been using Fedora for many, many years (from Fedora Core 2 to Fedora 20, I think), but in the end decided to go with Arch. The only thing I miss are the packages with debuginfo. Even when using Fedora I've aways ended up on Arch wiki with my problems...</p>",
                    "children": [
                        {
                            "created": "2016-01-05T11:21:55Z",
                            "name": "ALV",
                            "disqusUser": "alvinchevolleaux",
                            "message": "<p>I'm curious as to why you prefer Arch? I've used it but didn't think it was superior to Fedora. Am I missing something? I also second ending up on the Arch wiki a lot :)</p>",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "created": "2016-01-13T13:22:20Z",
            "name": "demonkoryu",
            "disqusUser": "demonkoryu",
            "message": "<p>Mint can now upgrade between releases using the upgrade manager.</p>",
            "children": []
        },
        {
            "created": "2016-02-01T04:27:14Z",
            "name": "hengels",
            "disqusUser": "hengels",
            "message": "<p>It took me years to get fully in control of Linux (primarily Kubuntu and Ubuntu MATE). But nowadays I can hardly imagine going back to Mac OS X or Windows. On top of the superiority as a developer platform, working with Linux is a life-style - like what it was with a Mac 10 years ago.</p>",
            "children": []
        },
        {
            "created": "2016-04-26T08:28:20Z",
            "name": "George Geladaris",
            "disqusUser": "disqus_qo96XFVf1B",
            "message": "<p>I wonder why you didn't try a superior Apple machine like an Apple MacBook Pro 15\"? Or did you?</p>",
            "children": [
                {
                    "created": "2016-04-26T11:24:36Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I just don't really want to lug a massive machine around. Very happy now with the XPS 13. 13\" screen but much smaller even than the air.</p><p>Besides, I'm very happy to step off the Apple train. Very sick of always ending up with the choice of either upgrading, or gradually see the machine perform worse with the same tasks.</p><p>Linux works well on very old hardware, and I want to support that from an ideological stand point. Once Apple gets better at running on old / \"underpowered\" hardware I might consider switching again.</p><p>Apple, to me, is the new big evil corporation and I'm happy to support the new underdog, like I did with Apple in 2006. I'd like to be a leader not a follower ;)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2017-08-07T11:15:28Z",
            "name": "Ramiz Uddin",
            "disqusUser": "ramiz_uddin",
            "message": "<p>Get more sleek with <a href=\"https://elementary.io/\" rel=\"nofollow noopener\" title=\"https://elementary.io/\">https://elementary.io/</a>.</p><p>Ubuntu was my workstation for many years, and I always had a complain for not being sleek. Although, there are plenty of options to make it more pleasant but every time you get OS updates the tweak won't get compatible - always an hassle.</p><p>Elementary OS serves well - it has a clean UI - I'd say best in Nix world and built on Ubuntu Core.</p><p>I always admire macOS for their clean and friendly UI and always seek for something at least same standards but never came cross to something even near to it. Elementary OS comes very close what I always asked for.</p><p>I may sound like ElementaryOS advocate but its just a matter of having it installed and never look back.</p>",
            "children": []
        }
    ],
    "/now-on-ssl-and-http2": [
        {
            "created": "2015-12-12T09:10:14Z",
            "name": "Alessandro (cosenal)",
            "disqusUser": "cosenal",
            "message": "<p>I believe the problem is with custom domains, isn't it? My website is on Github Pages too and it's on encrypted HTTP: <a href=\"https://cosenal.github.io/\" rel=\"nofollow noopener\" title=\"https://cosenal.github.io/\">https://cosenal.github.io/</a></p>",
            "children": []
        },
        {
            "created": "2015-12-12T11:29:39Z",
            "name": "Daniel Hansson",
            "disqusUser": "enoch85",
            "message": "<p>What? You didn't use Cloudflare before? You really missed out on something there. ;)</p>",
            "children": []
        }
    ],
    "/php-code-in-2006-and-2016": [
        {
            "created": "2015-12-14T09:38:01Z",
            "name": "Beobachter",
            "disqusUser": "Coocooclock",
            "message": "<p><code><br> * @license http://www.freebsd.org/copyright/license.html BSD License (4 Clause)<br>w<br>* @version Release: @package_version@</code></p><p>Ha! Vim novices. :)</p>",
            "children": [
                {
                    "created": "2015-12-14T13:02:53Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Busted!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-12-14T10:58:52Z",
            "name": "Joshua Gigg",
            "disqusUser": "joshuagigg",
            "message": "<p>In your 2016 code, you say you drop public from function definitions, but you still have it as part of `getSongs()`</p>",
            "children": [
                {
                    "created": "2015-12-14T13:01:21Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Fixed thanks :) copy paste mistake</p>",
                    "children": [
                        {
                            "created": "2015-12-17T16:20:15Z",
                            "name": "Fab G",
                            "disqusUser": "fabg",
                            "message": "<p>secret() has the \"function\" keyword missing ;)</p>",
                            "children": [
                                {
                                    "created": "2015-12-18T01:43:19Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>Thanks! Crazy how many little mistakes I ended up having.</p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-12-14T12:53:41Z",
            "name": "aaronbieber",
            "disqusUser": "aaronbieber",
            "message": "<p>A lot's changed. When I first learned PHP, it was version 3 and didn't have classes at all! The \"register globals\" setting was turned on by default and we mashed HTML and PHP code, with database queries, into the same files!</p>",
            "children": [
                {
                    "created": "2015-12-14T15:29:22Z",
                    "name": "sdwrage",
                    "disqusUser": "sdwrage",
                    "message": "<p>OCommerce, is that you? :P</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2015-12-14T14:28:28Z",
            "name": "Carlos Rodrigues",
            "disqusUser": "disqus_UBQCrJFtEQ",
            "message": "<p>Why do you think people will follow PSR-1, which contains \"important stuff\" if you don't follow PSR-2? People might think that PSR-1 is not \"important stuff\" as well. Not trying to be an ass, just asking you to think about this.</p>",
            "children": [
                {
                    "created": "2015-12-14T14:38:25Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I think if you are a seasoned PHP developer and you read PSR-1 and PSR-2, you will likely land on the same conclusion. Even if you think PSR-2 is a great idea, it's hard to argue that PSR-1 has a greater set of benefits over PSR-2.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-12-14T14:30:17Z",
            "name": "am",
            "disqusUser": "",
            "message": "<p>You have</p><p>private $key;<br>twice in 2016</p>",
            "children": []
        },
        {
            "created": "2015-12-14T21:10:25Z",
            "name": "Lewis Cowles",
            "disqusUser": "lewiscowles",
            "message": "<p>Sabre\\MusicPlayer\\Player...</p><p>Would you ever consider dropping MusicPlayer and switching to Music?</p><p>Sabre\\Music\\Player</p><p>I Just think it reads more easily.</p>",
            "children": [
                {
                    "created": "2015-12-14T21:40:51Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Yea fair enough =P It was a fictional example though!</p>",
                    "children": [
                        {
                            "created": "2015-12-14T21:59:01Z",
                            "name": "Lewis Cowles",
                            "disqusUser": "lewiscowles",
                            "message": "<p>Yeah Sabre is the Dav solution in PHP right?</p>",
                            "children": [
                                {
                                    "created": "2015-12-14T22:00:22Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>Yea, and a few other libraries: <a href=\"http://sabre.io/\" rel=\"nofollow noopener\" title=\"http://sabre.io/\">http://sabre.io/</a></p>",
                                    "children": [],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-12-14T22:57:16Z",
            "name": "Freddy",
            "disqusUser": "",
            "message": "<p>If I'm not mistaken, by droping the public keyword you are actually making changes.<br>When the public keyword is missing, the method is also automatically a static method.</p><p>In most cases this won't be an issue, but just mentioning ;)</p>",
            "children": [
                {
                    "created": "2015-12-14T23:00:59Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I had to check to make sure, but this is definitely not true. The public keyword in function declarations does nothing. See here for proof:</p><p><a href=\"https://3v4l.org/AjY42\" rel=\"nofollow noopener\" title=\"https://3v4l.org/AjY42\">https://3v4l.org/AjY42</a></p>",
                    "children": [
                        {
                            "created": "2015-12-14T23:11:50Z",
                            "name": "Freddy",
                            "disqusUser": "",
                            "message": "<p>Oops, your right.</p><p>In 5.6 it worked only with this:</p><p>error_reporting(E_ALL ^ E_STRICT);</p>",
                            "children": [
                                {
                                    "created": "2015-12-14T23:16:01Z",
                                    "name": "Freddy",
                                    "disqusUser": "",
                                    "message": "<p>But it also works with the public, so yes your right.<br>It doesn't do anything ...</p>",
                                    "children": []
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-12-16T22:35:09Z",
            "name": "NigelGreenway",
            "disqusUser": "NigelGreenway",
            "message": "<p>Cheers for the article. A good and interesting read in regards to using `var` instead of `public` and dropping `public` from class methods. Always good to see other ways of implementing.</p><p>My only concern is the explicitness, in the sense that other people touching the code will know what type of access the method has with an instant glance.</p><p>Just wanted to know your thoughts on it really?</p>",
            "children": [
                {
                    "created": "2015-12-16T22:39:32Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I believe it's one of those things that if you *know* the default visibility is public, it will be super easy to adjust to. The only category of people I'm a bit worried about are the ones that have never seen a 'naked' function and need to find out first what the behavior is.</p><p>But that's not unlike someone running into 'yield' for the first time, and that's something I can live with. I think that as soon as you start using it, adding 'public' really quickly seems very verbose. I hate looking at abstract static public function ;)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2015-12-17T16:19:20Z",
            "name": "Fab G",
            "disqusUser": "fabg",
            "message": "<p>If you put \"public\" before a method or property, it tells me that it was your intention to make it public.</p><p>From that point we have an agreement, that you won't make backwards-compatibility breaks on your public api. Surely only as long as you don't release a next major version.</p><p>If not, I could possibly think it could be an mistake and will dive deeper into your code, to make sure it was really your intention. I don't have the time to think about your implementation details.</p><p>Sometimes coding means convention, even if it doesn't make sense.</p>",
            "children": []
        },
        {
            "created": "2016-12-15T16:43:54Z",
            "name": "mirabilos",
            "disqusUser": "mirabilos",
            "message": "<p>The copyright years are actually necessary, *and* you\u2019re **not** supposed to update them all on a new year, but only when something that actually has content over the \u201cthreshold of originality\u201d was committed, and only to those files then.</p>",
            "children": [
                {
                    "created": "2018-02-19T18:32:28Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Necessary for what reason? And where do you get these rules? I know US copyright law requires this for works from before 1989, but are there others? Copyright rules are not world-wide the same or universal, so please specify what you're talking about.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2018-02-19T14:51:57Z",
            "name": "Phillip Haydon",
            "disqusUser": "PhillipHaydon",
            "message": "<p>Old post, but I'm curious, why would it cause: \"It causes a massive \u2018Happy new year\u2019 commit\"???</p><p>The copyright year would never change so there is never a 'happy new year' commit...</p>",
            "children": [
                {
                    "created": "2018-02-19T18:30:48Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I wanted the copyright year to reflect the first and last time work was done on it. So it might be 2005-2018</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/finding-a-better-registrar": [
        {
            "created": "2015-12-22T23:10:47Z",
            "name": "Steffen",
            "disqusUser": "steffenweber",
            "message": "<p>I don't have anything to add to your calculation. But Namecheap is the company that spreads FUD about free certificates and Let's Encrypt: <a href=\"http://blog.kelunik.com/2015/11/22/namecheap-ssl.html\" rel=\"nofollow noopener\" title=\"http://blog.kelunik.com/2015/11/22/namecheap-ssl.html\">http://blog.kelunik.com/201...</a></p>",
            "children": []
        },
        {
            "created": "2015-12-23T03:13:08Z",
            "name": "Robert Seastrom",
            "disqusUser": "robertseastrom",
            "message": "<p>If you get over the notion that ALIAS records are a good thing (they're not - they're not actual DNS records; they're logic that happens in the authoritative DNS server and therefore blur the line between authoritative and recursing nameservers), you have many many more choices.</p>",
            "children": [
                {
                    "created": "2015-12-23T03:48:26Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>As an end-user ALIAS records are a good thing, because they allow me to \"get the job done\". How does \"blurring the lines between authoritative and recursing nameservers\" affect me negatively?<br>I'm not really a DNS expert.<br></p>",
                    "children": [
                        {
                            "created": "2015-12-23T04:04:19Z",
                            "name": "Robert Seastrom",
                            "disqusUser": "robertseastrom",
                            "message": "<p>Putting in an A record (you might want to consider a AAAA too - it's always good to support the current version of the internet protocol); to send people where you want them to go \"gets the job done\" too.</p><p>An authoritative nameserver shouldn't recurse (even though people routinely do it). But you have to in order to implement ALIAS logic.  It was incorrect of me to call them \"records\" earlier; they don't have an actual RR type.</p><p>What problem are you solving by requiring a non-standard layer of indirection from your DNS hoster?</p>",
                            "children": [
                                {
                                    "created": "2015-12-23T04:11:29Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>The problem is that some application service providers have changing IP's.</p><p>I can absolutely use an A record but the implication is that I need to keep a watch on when this IP changes so I can manually change it. But what point is there to make this a manual process when the ALIAS 'record' effectively does this for me?</p><p>Me manually keeping an eye on the IP and manually making modifications is effectively a person implementing the ALIAS record, so still not sure what the problem is.</p><p>Could you name a real drawback to this approach?</p>",
                                    "children": [
                                        {
                                            "created": "2015-12-23T04:24:57Z",
                                            "name": "Robert Seastrom",
                                            "disqusUser": "robertseastrom",
                                            "message": "<p>Sure, here's someone who's done some writing on the subject:</p><p><a href=\"https://iwantmyname.com/blog/2014/01/why-alias-type-records-break-the-internet.html\" rel=\"nofollow noopener\" title=\"https://iwantmyname.com/blog/2014/01/why-alias-type-records-break-the-internet.html\">https://iwantmyname.com/blo...</a></p><p>Authoritative and recursive in the same DNS instance is \"a practice which is generally discouraged\":  <a href=\"https://kb.isc.org/article/AA-00817/\" rel=\"nofollow noopener\" title=\"https://kb.isc.org/article/AA-00817/\">https://kb.isc.org/article/...</a></p><p>If you find accessed-via-your-domain-name application service providers  who change addresses without notice to be inconvenient, I recommend you vote with your wallet.  It's kind of like changing your API without notice.</p>",
                                            "children": [
                                                {
                                                    "created": "2015-12-23T04:38:03Z",
                                                    "name": "Evert",
                                                    "disqusUser": "evertp",
                                                    "message": "<p>I actually found that article after your initial comment. The reasons stated seemed a bit weak to me though.</p><p>The three reasons stated are:</p><p>1. Caching issues. This is fair, but acceptable for me. Both me and the provider I'm aliasing to are aware of a potential 'double cache' so I also realize that changes might take a bit longer than normal.<br>2. GeoIP issues. Does not apply to me.<br>3. It's not standard. Mostly an academic argument with no real-world implications.</p><p>I'm no stranger to making academic arguments, but this seems pretty minor to me. All I'm doing is 'automating a user changing an A record on occasion'. Surely keeping a program in charge of this instead of a person ends up in a more robust Internet?</p><p>And being able to rely on DNS names instead of IP's carries a host of benefits by themselves. An A record to a different application provider effectively restricts them from making any infrastructure changes without notifying everyone affected. We live in an age of transient virtual machines that travel between data centers, it's not your father's Internet.</p><p>I also kind of disagree with the notion that they are changing the API without notice. They are basically clearly stating that 'The IP is not part of our API. Do not rely on it'. There's no contract breach there.</p>",
                                                    "children": [
                                                        {
                                                            "created": "2015-12-23T05:08:20Z",
                                                            "name": "Robert Seastrom",
                                                            "disqusUser": "robertseastrom",
                                                            "message": "<p>If I wanted to offer dynamic updates to customer zones as an ASP I'd be inclined to choose a way that was both standards-based and doesn't require funky recursive/authoritative mixing.  The obvious approach is RFC 2136 DNS Update messages, signed with TSIG (RFC 2845).  This gets an added advantage of horizontal scalability by moving customers transparently to a new address - something you don't get with an ALIAS scheme unless you're pointing at a DNS entry that is unique to you as a customer.</p><p>My designs tend to favor accomplishing endpoint (IP address) mobility with routing protocols, so the whole \"transient virtual machines\" argument falls a bit flat with me.  If you're curious as to how this sort of thing might work for people who aren't networking folks and just want their VM infrastructure to work transparently for them, check out Metaswitch's Project Calico.</p><p>Anyway, bedtime here in UTC-5 land.  My original comment stands - if you manage to get past thinking you need ALIAS \"records\", you have a lot more choices.</p>",
                                                            "children": [
                                                                {
                                                                    "created": "2015-12-23T07:02:47Z",
                                                                    "name": "Evert",
                                                                    "disqusUser": "evertp",
                                                                    "message": "<p>But I'm not the ASP in this context. I'm the consumer that needs a super easy to deploy solution. If you can point me towards DNS providers that do things the standard way, that are somewhat easy to use, and I can use with super simple hosting providers I'm 100% willing to give that a shot for the sake of adhering to standards.</p><p>I obviously don't actually care about ALIAS records, I just want to get the job done ;) </p>",
                                                                    "children": [],
                                                                    "url": "https://evertpot.com/",
                                                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "url": "https://evertpot.com/",
                                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                                }
                                            ]
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/sabre-xml-value-objects": [
        {
            "created": "2015-12-30T09:25:53Z",
            "name": "Jorge L\u00f3pez P\u00e9rez",
            "disqusUser": "jorgelzpz",
            "message": "<p>Glad to see sabre/xml gets even better.</p><p>Keep up the good work, Evert!</p>",
            "children": []
        },
        {
            "created": "2015-12-30T11:22:39Z",
            "name": "Alessandro Pellizzari",
            "disqusUser": "AlessandroPellizzari",
            "message": "<p>The sabre/xml-atom link is broken. :)</p><p><a href=\"https://packagist.org/packages/sabre/xml-atom\" rel=\"nofollow noopener\" title=\"https://packagist.org/packages/sabre/xml-atom\">https://packagist.org/packa...</a></p>",
            "children": [
                {
                    "created": "2015-12-30T16:21:42Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Thanks, just fixed this!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/looking-back-at-2015-with-markov-chains": [
        {
            "created": "2016-01-04T06:56:37Z",
            "name": "Lars Johansson",
            "disqusUser": "disqus_EzB0iOMSek",
            "message": "<p>Nice post, <br>First I thought you had a real bad hangover when you wrote the post, the text is not very coherent. I have to admit though I do not know the subjects that good.<br>I never heard about Markov chains. But I will check it out. :)</p>",
            "children": []
        }
    ],
    "/strict-types-pollresults": [
        {
            "created": "2016-01-15T08:10:04Z",
            "name": "Rasmus Schultz",
            "disqusUser": "rasmusschultz",
            "message": "<p>Yep, that's pretty much the first thing I thought when I saw PHP 7 would be getting scalar type-hints and return type-hints.</p><p>\"Awesome!\", I thought. \"Finally I can move from those silly php-doc type-hints to actual type-hints, and things will actually get checked at run-time. PHP is turning into a gradually-typed language! Yay!\"</p><p>Not so much. I have thought for a while about how we can fix this, and actually, strict mode wasn't the first thing that brought it on - declaring the encoding was.</p><p>How can we fix this? Stream wrappers seem like a hack and yet another work-around.</p><p>I've got only one idea so far: add some kind of project root file, e.g. \"php.json\", something comparable to \"composer.json\" for Composer, or \"tsconfig.json\" for TypeScript - this would contain the declarations for files in that folder and all sub-folders. You could place it in your project root, check it in with your Composer package, etc.</p><p>It's not perfect, but has some big advantages, and could even pave the way in the future for breaking changes to APIs (introducing long sought-after consistency in certain functions' argument lists) and possible even changes/improvements to PHP language syntax that require BC breaks.</p>",
            "children": []
        }
    ],
    "/10-years-of-linkedin": [
        {
            "created": "2016-03-07T06:53:52Z",
            "name": "Sudhir Khanger",
            "disqusUser": "sudhirkhanger",
            "message": "<p><a href=\"https://evertpot.com/resume.html\" rel=\"nofollow noopener\" title=\"https://evertpot.com/resume.html\">https://evertpot.com/resume...</a></p><p>Your resume 404s.</p>",
            "children": [
                {
                    "created": "2016-03-07T12:45:48Z",
                    "name": "ja",
                    "disqusUser": "",
                    "message": "<p>rotfl :)</p>",
                    "children": []
                },
                {
                    "created": "2016-03-07T12:57:22Z",
                    "name": "Kyah Rindlisbacher",
                    "disqusUser": "kyahrindlisbacher",
                    "message": "<p>Yo its <a href=\"https://evertpot.com/resume/\" rel=\"nofollow noopener\" title=\"https://evertpot.com/resume/\">https://evertpot.com/resume/</a></p>",
                    "children": []
                },
                {
                    "created": "2016-03-07T13:01:28Z",
                    "name": "Oo Nwoye - @OoTheNigerian",
                    "disqusUser": "ositanwoye",
                    "message": "<p>that's why he needs linkedin?</p>",
                    "children": [
                        {
                            "created": "2016-03-07T13:54:41Z",
                            "name": "Evert",
                            "disqusUser": "evertp",
                            "message": "<p>Jekyll 3.0 changed how it handles links :/. Fixed now though</p>",
                            "children": [],
                            "url": "https://evertpot.com/",
                            "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                        }
                    ]
                }
            ]
        },
        {
            "created": "2016-03-07T13:08:30Z",
            "name": "bzg",
            "disqusUser": "bzg",
            "message": "<p>How many contracts did you make through linkedin?  When I realized it was ~0 for me, I quit.  It's been a year and I'm perfectly fine.</p>",
            "children": [
                {
                    "created": "2016-03-07T13:50:56Z",
                    "name": "Richard Davey",
                    "disqusUser": "photonstorm",
                    "message": "<p>I agree! Closed mine down too and don't regret it for a second.</p><p>I still get spam mail from them of course though.</p>",
                    "children": [
                        {
                            "created": "2016-03-07T14:26:35Z",
                            "name": "jtlien",
                            "disqusUser": "jtlien",
                            "message": "<p>I have a thow away linked account that only notifies me when someone else looks at it.  Otherwise it has no information about me.   I believe LinkedIn is where HR people can go to get a quick reason why you cannot be hired.   In my case it was my age.</p>",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "created": "2016-03-07T13:52:58Z",
            "name": "willemodendaal",
            "disqusUser": "disqus_97YWlAyv2N",
            "message": "<p>Yes, I feel the same. I'm also an independent contractor, but I loathe having to go onto LinkedIn. I did get a job offer from Amazon though, so keeping my account active for now.</p>",
            "children": []
        },
        {
            "created": "2016-03-07T13:55:01Z",
            "name": "independent_forever",
            "disqusUser": "independent_forever",
            "message": "<p>I never thought about that but you are right on point.  It's NEVER helped my job searches or finding actual, useful business contacts as I've always been able to do it the old fashioned way quite well.  Maybe it's time to opt out of all of these \"social\" sites as I got along without any problems long before these types of websites existed.</p>",
            "children": []
        },
        {
            "created": "2016-03-07T14:12:44Z",
            "name": "martinsnyder",
            "disqusUser": "martinsnyder",
            "message": "<p>sage</p>",
            "children": []
        },
        {
            "created": "2016-03-07T15:10:32Z",
            "name": "jmhowitt",
            "disqusUser": "jmhowitt",
            "message": "<p>Junked all of them except twitter but never visit there, even left a small social net i ran, handed it over to another user. It has given me a load of extra time to use in more productive ways. It varies and i know some who find various social media productive, but you need to think not accept and analyse. They are at the end of the day just tools.</p>",
            "children": []
        },
        {
            "created": "2016-03-07T16:01:32Z",
            "name": "Brian Kung",
            "disqusUser": "briankung",
            "message": "<p>Definitely just shut my LinkedIn account for the very same reasons. Am now awkwardly dealing with \u201cI don\u2019t have one because of principles.\u201d</p><p>It's a work in progress.</p>",
            "children": []
        },
        {
            "created": "2016-03-07T17:44:09Z",
            "name": "Doug Smith",
            "disqusUser": "disqus_dH6wSra6w4",
            "message": "<p>Luckily I no longer need Linked In for jobs and I disabled my account a couple of years ago after realizing their intrusive ways are in fact pretty evil.  If I had to though as some commenters, I'd run it in a VM where it couldn't access my email or any other data.  I suggest Virtual box and Ubuntu or something simple to get a web browser going.</p>",
            "children": []
        },
        {
            "created": "2016-03-07T18:14:36Z",
            "name": "Jay Cuthrell",
            "disqusUser": "qthrul",
            "message": "<p>Exactly. <a href=\"https://twitter.com/JayCuthrell/status/551254076164288513\" rel=\"nofollow noopener\" title=\"https://twitter.com/JayCuthrell/status/551254076164288513\">https://twitter.com/JayCuth...</a></p>",
            "children": []
        },
        {
            "created": "2016-03-08T06:42:29Z",
            "name": "sworddance",
            "disqusUser": "sworddance",
            "message": "<p>Is there anything that LinkedIn or a similar service offer? It seems like there should be some value to a \"purely professional\" network service.</p><p>Because it seems like all the issues you have with LinkedIn apply to any of the social networking services.</p>",
            "children": []
        },
        {
            "created": "2016-03-10T19:21:21Z",
            "name": "mike lin",
            "disqusUser": "MikeLinSF",
            "message": "<p>Haters going to hate.</p>",
            "children": []
        }
    ],
    "/npm-revoke-breaks-the-build": [
        {
            "created": "2016-03-23T06:17:34Z",
            "name": "KJ Singh",
            "disqusUser": "kjsinghdel",
            "message": "<p>Immutable makes sense! Many maven repos don't remove the older versions of the packages (aka jars)</p>",
            "children": [
                {
                    "created": "2016-03-23T10:03:40Z",
                    "name": "Magino",
                    "disqusUser": "onigam",
                    "message": "<p>Yes immutable is the best option. Nice article, it's good to launch this debate, so many projects are based blindly to npm.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-03-23T06:41:02Z",
            "name": "bSzala",
            "disqusUser": "bSzala",
            "message": "<p>I don't think packages should be append-only. This could end up with hundreds of sub-versions &amp; garbage package(s),  which normally could be abandon/removed. I would instead recommend to allow package owners to make a remove request, without actually removing a package. Then let say Packagist could clean up all of those flagged packages at a specific time.</p>",
            "children": [
                {
                    "created": "2016-03-23T07:11:02Z",
                    "name": "Julien",
                    "disqusUser": "juliennegrotto",
                    "message": "<p>I don't like the idea of being able to remove packages that others depend upon on a whim. When a package is published, it's public and should stay that way. Maybe a mechanism for marking a package or version as obsolete or insecure would be desirable, but not removing it outright.</p><p>I do like the idea of a decentralized, distributed system, but until that shows up I'm more interested in fixing what we already depend upon every day.</p>",
                    "children": []
                },
                {
                    "created": "2016-03-23T07:14:17Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Just like a blockchain, it would not be needed for everyone to have the whole history. You'd need some other system to help people figure out which packages are relevant and useful. The model I'm describing is a data-model, not a UI.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-03-23T07:59:55Z",
            "name": "Pm",
            "disqusUser": "",
            "message": "<p>Isn't un-unpublishing even worse than unpublishing?  Who's the owner of the package and who can make decisions for it, the author or NPM? So yes: decentralized all the way but also remember that if the author decides to make a package unavailable there might be licenses that would prevent us to keep using it no matter if we have thousands of local copies.</p>",
            "children": []
        },
        {
            "created": "2016-03-23T10:04:25Z",
            "name": "Spudley",
            "disqusUser": "",
            "message": "<p>In the PHP world, there is Toran Proxy (<a href=\"https://toranproxy.com/)\" rel=\"nofollow noopener\" title=\"https://toranproxy.com/)\">https://toranproxy.com/)</a>, which is basically an extra layer on top of Composer designed to allow you to have a local build process that doesn't necessarily rely on Packagist and Github. Something like that would definitely have solved this problem on NPM; the package could have been completely removed, but as long as you already had a working local build, your build would carry on working just fine.</p>",
            "children": [
                {
                    "created": "2016-03-23T11:58:37Z",
                    "name": "Robclancy",
                    "disqusUser": "Robclancy",
                    "message": "<p>We also get a vendor prefix, composer.lock that actually locks (unlike shrinkwrap) and even though it is slow as fuck it isn't anywhere near as slow as NPM.</p><p>Funny how PHP has a far far better package manager than node when node is apparently the best language ever.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-03-23T10:30:24Z",
            "name": "wscott",
            "disqusUser": "wscott",
            "message": "<p>We should be using something like Nixpkg (<a href=\"https://nixos.org/nix/)\" rel=\"nofollow noopener\" title=\"https://nixos.org/nix/)\">https://nixos.org/nix/)</a> but using packages distributed on IPFS (<a href=\"https://ipfs.io/)\" rel=\"nofollow noopener\" title=\"https://ipfs.io/)\">https://ipfs.io/)</a>.  This way anyone can publish a package, but the 'hosting' of this package is distributed and as long as someone is using it, then it still exists.</p>",
            "children": []
        },
        {
            "created": "2016-03-23T11:56:57Z",
            "name": "Robclancy",
            "disqusUser": "Robclancy",
            "message": "<p>NPM is easily the worst package manager unless you classify things like pip and bower as package managers (really they are just download managers).</p><p>I have to deal with a new NPM issue every week. Be it breaking randomly for no reason or someone doing something on some random repository that NPM decides you need because it is too stupid to be able to lock dependencies reliably.</p><p>Hopefully this starts the end of NPM.</p>",
            "children": []
        },
        {
            "created": "2016-03-23T12:29:20Z",
            "name": "domm_plix",
            "disqusUser": "domm_plix",
            "message": "<p>You might want to check out how CPAN handles all of this, especially BACKPAN: <a href=\"http://backpan.cpantesters.org/\" rel=\"nofollow noopener\" title=\"http://backpan.cpantesters.org/\">http://backpan.cpantesters....</a></p><p>Perl++</p>",
            "children": []
        },
        {
            "created": "2016-03-23T14:57:52Z",
            "name": "Jim Lehmer",
            "disqusUser": "dullroar1",
            "message": "<p>I think in general immutability is the correct approach, but (there's always a but), how would you handle a package version that either (a) is discovered to have a severe security vuln (can be quite likely, depending on the package), or (b) is discovered to actually be malicious (less likely), or (c) as in this case is actively under attack for some IP issue that may not just drag the author into the fray but also anyone using it? If there isn't an \"unpublish\" (forget the \"un-un-publish\" fiasco), how do you mark such a package as \"Do not use\" in a way that isn't in effect an \"unpublish\"? Not arguing your point (again, I think it's correct), just trying to think through the real-world scenarios.</p>",
            "children": [
                {
                    "created": "2016-03-23T18:14:00Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I think we'd have to accept that there will be broken packages in the history. But in the same way you can create a revokation certificate for gpg, it should be possible for an author to also mark someone as 'do not use' after the fact, without making real changes.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                },
                {
                    "created": "2016-03-24T07:26:44Z",
                    "name": "Adam O'Grady",
                    "disqusUser": "adam_o_grady",
                    "message": "<p>On top of these reasons, what happens if someone accidentally publishes personal info they were using in development but forgot to delete? People publish API keys, usernames/passwords, and the like to GitHub all the time by accident; \"unpublishing\" (versions, preferably not whole repos) allows them to fix this.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-03-23T15:01:37Z",
            "name": "Erik Rose",
            "disqusUser": "grincheroo",
            "message": "<p>Mozilla\u2019s npm-lockdown gets you immutability, which is a start, verifying packages against local hashes before they get installed: <a href=\"https://github.com/mozilla/npm-lockdown/\" rel=\"nofollow noopener\" title=\"https://github.com/mozilla/npm-lockdown/\">https://github.com/mozilla/...</a>. We use it on our production servers, along with similar strategies for Python code.</p><p>I'm the author of peep and of the new hash-verification functionality in the latest version of the Python installer pip. We went through these same growing pains in the Python world. Step 1 was to make uploaded packages immutable. Combined with hash verification (where you check the hashes into your source tree), that obviated the need for many personal mirrors. Delete-proofing is a tantalizing next step.</p>",
            "children": []
        },
        {
            "created": "2016-03-23T20:04:45Z",
            "name": "joelatone",
            "disqusUser": "joelatone",
            "message": "<p>Related...</p><p><a href=\"https://github.com/mhhf/spore\" rel=\"nofollow noopener\" title=\"https://github.com/mhhf/spore\">https://github.com/mhhf/spore</a> is a decentral package manager for dApp development based on ethereum and ipfs.</p><p><a href=\"https://github.com/whyrusleeping/gx\" rel=\"nofollow noopener\" title=\"https://github.com/whyrusleeping/gx\">https://github.com/whyrusle...</a> is a packaging tool built around the distributed, content addressed filesystem IPFS.</p>",
            "children": []
        }
    ],
    "/drop-public-not-var": [
        {
            "created": "2016-03-26T21:14:20Z",
            "name": "MFixPL",
            "disqusUser": "MFixPL",
            "message": "<p>Totally disagree. I even think you should always specify visibility level - even if you write the default - public - you have to consider if it is accurate so the chance for error in the code drops. Also argument about reading speed is not really good. Our sight is scanning first - when we are used to it we skip it so fast that we shouldn't really bother about drop in speed (if any). More we should care how many of us will have to slow down our code reading to get to know it is public (because not stated, we have to think about it). May do more harm than good imho. And for the var - will look ok for public, will be very strange when you will have public and private next to each other.</p>",
            "children": [
                {
                    "created": "2016-03-26T21:30:43Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>What you're saying is that there would be an adjustment period, which I fully agree with.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-03-26T21:26:09Z",
            "name": "technik",
            "disqusUser": "techniktechniczny",
            "message": "<p>Being honest, I really tend to agree with that proposal.<br>But still ... following PSR standards is being taken by almost everyone as principal of \"good\" coding. <br>Which is sometimes frustrating because, a lot of people tend to put names and blindly disagree to whoever propose something new, instead firstly actually think about the proposal and than simply test it. <br>As far as I know,  in Ruby default visibility is public and you don't  declare it, and no one has any problem with it.</p>",
            "children": [
                {
                    "created": "2016-04-06T11:28:45Z",
                    "name": "DFYX",
                    "disqusUser": "DFYX",
                    "message": "<p>In Ruby, only methods are public by default. In fact, instance variables can never be public on their own, they're always private*. You can use the attr_accessor helper to generate the some default getters and setters with the same name as the instance variable but apart from some eval trickery there's no way to directly access another object's instance variables.</p><p>* Ruby's private works more like protected in other languages.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-03-26T23:19:12Z",
            "name": "OOP_guru",
            "disqusUser": "",
            "message": "<p>I disagree. I never used 'var' and never miss that. Keep public keyword is ok, but private visibility should be default.</p>",
            "children": []
        },
        {
            "created": "2016-03-27T01:45:25Z",
            "name": "Boyd Bueno de Mesquita",
            "disqusUser": "boydbuenodemesquita",
            "message": "<p>I switch between C# and PHP a lot. I feel that omitting 'public' (and 'private') will take me a split second to remember what the default is. Not strongly against omitting though.<br>I actually didn't know about the 'var' keyword in PHP, so I wouldn't miss that.</p>",
            "children": [
                {
                    "created": "2016-04-04T04:19:13Z",
                    "name": "AndrewEddie",
                    "disqusUser": "AndrewEddie",
                    "message": "<p>Agree. Because not all languages (and possibly future versions of PHP) share the same \"default\", it's better to be explicit.</p>",
                    "children": [
                        {
                            "created": "2017-05-06T08:05:30Z",
                            "name": "Ben Carroll",
                            "disqusUser": "disqus_misxsTH5Py",
                            "message": "<p>If typing</p><p>`$foo = ;`</p><p>Was default to `true`, I sure wouldn't use the syntax.</p>",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "created": "2016-03-27T08:40:00Z",
            "name": "Fahad Hossain",
            "disqusUser": "lucifer0morningstar",
            "message": "<p>I disagree as well, if i see the word public I know immediately what the scope/visibility is. Its not so clear when you just say static. and var is almost never used and doesn't provide any extra insight into the scope of said variable. and with JS developers growing, it will just confuse them thinking that's how variables are declared everywhere...</p>",
            "children": []
        },
        {
            "created": "2016-03-27T12:06:02Z",
            "name": "Rik Meijer",
            "disqusUser": "rikmeijer",
            "message": "<p>I'd rather see private be the default for instance variables and thus want to explicitly use public. Public instance variables blow up encapsulation. </p>",
            "children": [
                {
                    "created": "2016-03-30T06:14:21Z",
                    "name": "Rasmus Schultz",
                    "disqusUser": "rasmusschultz",
                    "message": "<p>Best comment on this thread so far :-)</p><p>Of course also completely unrealistic, because of backwards compatibility, but you're still right.</p><p>Of course what this post proposes in the first place is completely unrealistic for the same reason, and the whole discussion is a total waste of time - though I suspect the hidden, rhetorical point the author is really trying to make with this post is not \"deprecate public\", but more like trying to make the point that you could argue in favor of removing public just as well as for removing var. And he kind of has a point. The difference of course being that almost nobody actually uses var and almost everyone uses public.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-03-27T12:52:10Z",
            "name": "Fab G",
            "disqusUser": "fabg",
            "message": "<p>Btw: Properties can't be defined as final:</p><p>\u201eNote: Properties cannot be declared final, only classes and methods may be declared as final.\u201c<br><a href=\"http://php.net/manual/en/language.oop5.final.php\" rel=\"nofollow noopener\" title=\"http://php.net/manual/en/language.oop5.final.php\">http://php.net/manual/en/la...</a></p>",
            "children": [
                {
                    "created": "2016-03-27T15:01:58Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Thanks. Makes no sense looking back :)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-03-27T14:34:09Z",
            "name": "Olivier Laviale",
            "disqusUser": "olvlvl",
            "message": "<p>\"public\" has actually a purpose because it can be used to changed the visibility of an inherited method/property. Quick example:</p><p>```php<br>class A<br>{<br>    protected function do_something()<br>    {<br>        echo \"something\";<br>    }<br>}</p><p>class B extends A<br>{<br>    public function do_something()<br>    {<br>        parent::do_something();<br>    }<br>}</p><p>$b = new B;<br>$b-&gt;do_something();<br>// \"something\"<br>```</p>",
            "children": [
                {
                    "created": "2016-03-27T15:01:34Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>In your code sample you can omit public, and it will still do the same thing.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-03-27T17:22:53Z",
            "name": "toughduck",
            "disqusUser": "toughduck",
            "message": "<p>Best practices change and paradigms are questioned. PHP is, and has been, a very flexible language.</p><p>\"If ditching public becomes the status-quo, then needing public for properties might actually become confusing.\"</p><p>Indeed. And what if you decide to ditch visibility entirely? ;)</p>",
            "children": [
                {
                    "created": "2016-03-28T17:40:52Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I think there are benefits to visibility. Some people even mark their classes consistently as 'final' to prevent overloading. I could definitely live with making the private and protected keywords 'suggestive'-only though.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-03-28T12:51:49Z",
            "name": "Deric Cain",
            "disqusUser": "dericcain",
            "message": "<p>Using var would take some getting used to for me. However, I wouldn't mind dropping the public declaration.</p>",
            "children": []
        },
        {
            "created": "2016-03-28T16:54:01Z",
            "name": "PHLAK",
            "disqusUser": "PHLAK",
            "message": "<p>This argument makes a lot of sense to me and I agree PHP should remove \"public\" and keep \"var\" for the specific case mentioned.  The resulting code definitely feels cleaner and more readable.</p>",
            "children": []
        },
        {
            "created": "2016-03-28T19:05:17Z",
            "name": "Sander",
            "disqusUser": "",
            "message": "<p>When a method has no public in front of it you'll never know if someone forgot to think about the scope or not.</p>",
            "children": [
                {
                    "created": "2016-03-28T19:07:19Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I've never really ran into that situation. I imagine that's only really the case in really sloppy/badly designed code-bases. When do you ever not know what visibility to use?</p>",
                    "children": [
                        {
                            "created": "2016-04-04T12:33:17Z",
                            "name": "Sander",
                            "disqusUser": "",
                            "message": "<p>I mean that you don't know if someone forgot the scope key word (and the method should not be public) or omitted it on purpose. Of course that's a bad thing but their might be juniors working on the project with less skills.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-03-29T06:22:46Z",
            "name": "Rasmus Schultz",
            "disqusUser": "rasmusschultz",
            "message": "<p>I use \"public\" simply to indicate that I've thought about visibility - so no one has to wonder if I simply forgot to declare the visibility or really intended for something to be public. I also do other double assertions in my code, for example I use an @return void tag to assert that a function isn't intended to return anything - again, it just communicates the fact that I've thought about it, and didn't just forget the return statement. It helps with static analysis in PhpStorm as well.</p><p>Have I ever missed public for things like classes and consts? Of course not. That's completely rhetorical. Classes do not HAVE visibility levels, so the concept of \"public\" doesn't even apply. Silly.</p>",
            "children": []
        },
        {
            "created": "2016-03-30T08:36:43Z",
            "name": "Danne",
            "disqusUser": "disqus_fULiXyujDZ",
            "message": "<p>We already have an identifer for a variable; $. Why would we need \"var\"? Also, \"public\" is there for consistency, for when \"protected\" and \"private\" is not used.</p>",
            "children": []
        },
        {
            "created": "2016-03-30T09:56:29Z",
            "name": "Alankar More",
            "disqusUser": "",
            "message": "<p>May be my suggestion is wrong but if some ask me what I would like to write var or public I will go for the public keyword. The reason behind this is that if we observe the other object oriented languages like Java (Which is pure object oriented language) the visibility is must while declaring the function or the class members.</p><p>If we omit this \"public\" keyword and when we declare any protected or private function at that time we have to put the visibility keyword before the function name. So for keeping the same structure and not to make code ugly I would go for the public keyword even if \"public\" is completely optional.</p>",
            "children": []
        },
        {
            "created": "2016-03-31T13:27:37Z",
            "name": "Ricardo S\u00e1nchez",
            "disqusUser": "udarkness",
            "message": "<p>The problem is that it is too simple that everybody can have an opinion on this, bikeshedding :) <br>All should be public and simple, it is php, not java or c++, all these validations are in runtime, what a failure of design. After all, they can be called from other contexts with the help of a closure and bind method.<br>It is sad to see that the php developers waste their energies in this topic instead of inlining functions or defining a less verbose closure definition like hack language does.</p>",
            "children": []
        },
        {
            "created": "2016-03-31T19:17:04Z",
            "name": "Micheal Mand",
            "disqusUser": "KMDmikemand",
            "message": "<p>It looks like the RFC did not pass.</p><p>I agree with several people here that have said private should be the default if no scope was set. It just makes more sense to me that you have to explicitly allow a property or method to be publically accessible.</p>",
            "children": []
        },
        {
            "created": "2016-04-06T07:46:49Z",
            "name": "zakius",
            "disqusUser": "zakius",
            "message": "<p>Explicitly stating access is really good thing IMO: whenever you switch between languages with different defaults, whenever you had longer break with given language or even whenever you just had enough it makes things clear, it is just like with braces: you can omit them for single liners, but why would you do that?<br>But the var is redundant as it serves exactly no purpose (unless you omit the public keyword)</p>",
            "children": []
        },
        {
            "created": "2016-04-19T17:49:44Z",
            "name": "Saithis",
            "disqusUser": "disqus_ruC1hNXtzT",
            "message": "<p>If you have omit the public on yout methods methods and also have some with private/protected, then you can't scan that easily from top to bottom over the method names, because the difference where they start is greater. Also it's harder for people, that switch between languages (mostly C#/Java).</p><p>I would rather see the \"function\" as optional and then drop that in my code.</p>",
            "children": []
        },
        {
            "created": "2016-12-09T12:11:21Z",
            "name": "Christian Ramelow",
            "disqusUser": "",
            "message": "<p>Omitting the accessor will force your code to be unportable while other languages have another default accessors.</p><p>In a private context you can act how you prefer it. And a small script can be fixed quiet fast. No one but you cares. And it's ok.</p><p>But in a business context this descision is based on currently unknown but maybe upcoming further needs. Big projects will become deadly costly when porting them.</p><p>We had libraries to port into JAVA and every language dependend issue is a matter of time and money then. And a lot of issues can be forced on the one hand or be prevented on the other one.</p><p>It's a decision of beeing disciplined from scratch. That means to decide for restrictions to increase standardized usability, language independend lifetime cycles and cost reduction. So the PHP RFC voting has to focus on standards.</p><p>Kick out var.</p><p>It had its rights to exist but it's a relict. Codes using var are relicts, too. Using these codes is often necessary until now and I accept a reasonable importance. But these codes should be executed in a separated secure environment supporting older versions of PHP. Things cannot be downwards compatibile til the end of time.</p>",
            "children": []
        }
    ],
    "/writing-sql-for-postgres-mysql-sqlite": [
        {
            "created": "2016-04-28T14:24:04Z",
            "name": "asoki",
            "disqusUser": "",
            "message": "<p>hi Evert, thanks for the interesting article.</p><p>just one comment on the lastInsertId. At least on postgresql, lastInsertId will return a wrong id when the insert command creates more than one rows in the table. For example when some after trigger inserts an additional row you will get the id of the \"last\" inserted row.</p><p>you should use INSERT ... RETURNING ... instead.</p>",
            "children": [
                {
                    "created": "2016-04-28T14:27:05Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Ah interesting, but I imagine that this is the same on MySQL, no? Regardless, it's a good thing to be aware of =)</p>",
                    "children": [
                        {
                            "created": "2016-04-28T15:05:14Z",
                            "name": "asoki",
                            "disqusUser": "",
                            "message": "<p>not tried on mysql, but i assume it should be the same as on pg</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                },
                {
                    "created": "2016-05-02T08:14:26Z",
                    "name": "Dani\u00ebl van Eeden",
                    "disqusUser": "danielvaneeden",
                    "message": "<p>No RETURNING at all for MySQL. MariaDB supports RETURNING for single table DELETE.</p><p>Feature request:<br><a href=\"https://jira.mariadb.org/browse/MDEV-10014\" rel=\"nofollow noopener\" title=\"https://jira.mariadb.org/browse/MDEV-10014\">https://jira.mariadb.org/br...</a></p><p>Also note that RETURNING is not in the SQL standard afaik. To write portable SQL you should try to conform to the standard.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-05-02T05:14:01Z",
            "name": "Rotimi Ade",
            "disqusUser": "rotimiade",
            "message": "<p>Aura Sql Query ( <a href=\"https://packagist.org/packages/aura/sqlquery\" rel=\"nofollow noopener\" title=\"https://packagist.org/packages/aura/sqlquery\">https://packagist.org/packa...</a> ) is a good package to use for writing portable SQL. I am currently using it in a lightweight orm package (leanorm <a href=\"https://packagist.org/packages/rotexsoft/leanorm)\" rel=\"nofollow noopener\" title=\"https://packagist.org/packages/rotexsoft/leanorm)\">https://packagist.org/packa...</a> I am developing. Aura Sql Query can be used in conjunction with <a href=\"https://packagist.org/packages/aura/sql\" rel=\"nofollow noopener\" title=\"https://packagist.org/packages/aura/sql\">https://packagist.org/packa...</a> (a package that extends PDO) and <a href=\"https://packagist.org/packages/aura/sqlschema\" rel=\"nofollow noopener\" title=\"https://packagist.org/packages/aura/sqlschema\">https://packagist.org/packa...</a> (a packaged for retrieving schema meta data via PDO).</p><p>Aura Sql Query handles some of the issues you listed above such as lastInsertID, applying the right quotes in queries for each DBMS ...</p><p>It doesn't handle DDL queries though.</p>",
            "children": []
        },
        {
            "created": "2016-05-06T10:24:33Z",
            "name": "Quabla",
            "disqusUser": "",
            "message": "<p>You can set MySQL's sql_mode = 'PIPES_AS_CONCAT,ANSI_QUOTES' to get a more consistent handling for the quotes.</p>",
            "children": []
        },
        {
            "created": "2016-05-09T15:40:34Z",
            "name": "Marco Pivetta",
            "disqusUser": "ocramius",
            "message": "<blockquote>PostgreSQL is by far the sanest database, and I would recommend everyone to<br>  move from MySQL towards it.</blockquote><p></p><p>I wish more people said that #feelingThePain</p>",
            "children": []
        },
        {
            "created": "2016-06-16T19:08:51Z",
            "name": "Lewis Cowles",
            "disqusUser": "lewiscowles",
            "message": "<p>To be honest the very effort you speak of is exactly why I started telling people not to try to support multiple data-tier back-ends in an app. It's far easier to use a service with a common protocol if multiple storage back-ends need to be left open as an option. It has the benefit of common syntax regardless of back-end; transitioning the back-end becomes almost trivial; and you can be lazy supporting one-database at a time, not diluting your time, the readability or ease of following code; or that of the team left to support.</p>",
            "children": []
        }
    ],
    "/why-php-fig-matters": [
        {
            "created": "2016-05-14T00:22:50Z",
            "name": "Navarr Barnier",
            "disqusUser": "Navarr",
            "message": "<p>I would like to take this comment to respond to your logging interface.</p><p>I am only a mid-level developer, but this is where I'm a little confused.  Where should the line be drawn?</p><p>The one log function is great and all that is probably needed for cross-framework log drop-in/drop-out, where the logging mechanism can be pulled it from anywhere, instantiated if it follows the PSR, and \"just work\" when plugged into the framework.</p><p>But on the other end is when you want the PSR to be helpful to the users, not the frameworks.  For example, To decrease the amount of friction between swapping out logging components.  If they're not using a framework, or their \"framework\" doesn't have a built in logging mechanism with which they would swap out the base logger, these -&gt;emergency() commands etc cause additional strain for them to move away from their logger.</p><p>Where should the FIG put it's attention?  If it's solely for framework interop, then I guess at the `log`.  But if its for additional developer benefit - then `emergency`.</p><p>We could end up instead at an interesting place where you have the FIG responsible for the plumbing and the CDS responsible for the developer-friendly API.</p><p>(And they setup in the psr namespace by default, but there is of course an active discussion about what it SHOULD be)</p>",
            "children": [
                {
                    "created": "2016-05-14T19:16:46Z",
                    "name": "Mark P",
                    "disqusUser": "mnpenner",
                    "message": "<p>If a developer wanted a nicer interface to work with while still being able to swap out the concrete implementation (Monolog) at a whim, he could create his own wrapper.</p><p>class BetterLogger {<br>     function __construct(SimplePsrLoggingInterface $logger) { ... }</p><p>     function emergency($msg, $context) {<br>         $this-&gt;logger-&gt;log(6, $msg, $context);<br>     }<br>}</p><p>$betterLogger = new BetterLogger(new Monolog());</p><p>Then just typehint against BetterLogger instead of SimplePsrLoggingInterface directly. Since BetterLogger is under your control, you can design the API however you like while still allowing the concrete implementation to do the gruntwork, and the PSR interface to handle the plumbing. (And if you don't want to typehint against a class, have BetterLogger implement BetterLoggerInterface).</p><p>Doesn't this solve everyone's needs?</p>",
                    "children": [
                        {
                            "created": "2016-05-14T19:42:58Z",
                            "name": "Evert",
                            "disqusUser": "evertp",
                            "message": "<p>Yes this is the point. Keep in mind that I took the logging example mainly to make the point because it's pretty clear. The impact of making the logger simpler/complexer is low, but the same situation exists in PSR 6 and 7 and the impact/cost of these decisions were much higher.</p>",
                            "children": [
                                {
                                    "created": "2016-05-15T05:52:33Z",
                                    "name": "Mark P",
                                    "disqusUser": "mnpenner",
                                    "message": "<p>Right. I'm just saying that making the interfaces simpler doesn't hurt anyone. It's fewer methods library authors have to implement, and end developers can wrap the interfaces anyway they see fit.</p>",
                                    "children": []
                                }
                            ],
                            "url": "https://evertpot.com/",
                            "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                        },
                        {
                            "created": "2016-05-14T21:13:44Z",
                            "name": "Ryan Winchester",
                            "disqusUser": "fungku",
                            "message": "<p>i spy a magic number!   *slaps wrist*</p>",
                            "children": []
                        }
                    ]
                },
                {
                    "created": "2016-05-14T19:44:12Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>The point of FIG is framework/library interop. If you solely have the 'end user hat' on in this, then you are NOT the target audience.</p><p>Well, you shouldn't have been...except the PSR's were written in a way that you are, and this is a bad thing.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-05-14T01:06:53Z",
            "name": "Marc J. Schmidt",
            "disqusUser": "marcjschmidt",
            "message": "<p>&gt; disrespectfully in the psr composer vendor name</p><p>This changed already: <a href=\"https://github.com/php-cds/php-cds/issues/4\" rel=\"nofollow noopener\" title=\"https://github.com/php-cds/php-cds/issues/4\">https://github.com/php-cds/...</a></p>",
            "children": []
        },
        {
            "created": "2016-05-14T02:51:34Z",
            "name": "beberlei",
            "disqusUser": "beberlei",
            "message": "<p>I really like your description of plumbing for libraries/Frameworks, that is *exactly* what the FIG should have been about.</p><p>I can share my story of proposing, what in the end sort-of became PSR-. Initially it was about an Http Client and my proposal was something along the lines of:</p><p>$response = $client-&gt;request($method, $uri, $payload, $headers);<br>$response-&gt;getStatusCode(); $response-&gt;getBody();</p><p>I gave up defending this after some weeks already, everybody wanted a dedicated Request to solve *all* their problems an we know from the end, Request and Response made it in and Client oesn't even exist anymore, although it was the most important part of the proposal from a plumbing POV.</p><p>Back then (this must have been 2010 or something), could we have agreed on this issue, then we wouldn't have all the HTTP client problems that we are currently seeing everywhere, with third party api libraries using various versions of Guzzle, Buzz et. al. and incompatibilities.</p><p>php-http tried to step in to build a wrapper, but it essentially ended up re-inventing another very complex API all over again, something that cannot be standardized because of the complexity. The tutorial literally starts with an example on asynchronous http, which is not even a 10% use case for most of the developers.</p>",
            "children": [
                {
                    "created": "2016-05-14T19:41:27Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>10% is very, very generous. A super sane subset would have actually been just the read-only interfaces. They would have worked for virtually every usecase. For what it's worth I do think it was worth getting to the bottom of figuring out the response correctly. The underlying data model of the headers and uri/request target is _really good_.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-05-14T20:37:15Z",
            "name": "G",
            "disqusUser": "",
            "message": "<p>As I see it, in the first part of your article you write about bureaucracy and then later you become bureaucrat:) Maybe that's the same problem as with the people you complain about.</p><p>Regarding HTTP message PSR, as others you have your opinion too. You seem very exclusive about it, no one could change your mind. I'm sorry to say that but that's wrong attitude for participating in any kind of group. Especially if it's accompanied by a lack of knowledge - the following sentence proves it: \"The folks that sign up to taking an \u201cevent sourcing\u201d / functional approach<br>to PHP have largely dictated the design of PSR-7\". It's really not about approach, it's about security, safety, simplicity, etc. I think you don't have a clue about event sourcing, functional approach, value objects, modelling... and yet you scream about it.</p><p>Sorry if my reply sounds offending but as I read your article I felt sorry about poor guy who devoted his time to participate in creating something extraordinary. Not without flaws but better than alternatives.</p>",
            "children": [
                {
                    "created": "2016-05-14T20:54:17Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>&gt;As I see it, in the first part of your article you write about <br>&gt; bureaucracy and then later you become bureaucrat:) Maybe that's the same<br> &gt; problem as with the people you complain about.</p><p>If that's what you take from this, then the only solution against the management problems is no management at all. I do indeed disagree with that notion. So you read that correctly. I think rules and regulations are important, but if we spend the majority of the 8 years discussing them, then the process is broken. That does not imply that the remedy is no process at all...</p><p>&gt; to PHP have largely dictated the design of PSR-7\". It's really not <br>&gt; about approach, it's about security, safety, simplicity, etc. I think <br>&gt; you don't have a clue about event sourcing, functional approach, value <br>&gt; objects, modelling... and yet you scream about it.</p><p>I don't take a pro or against stance against that school of thought. If you took from it that I wanted to invalidate the approach, you misread. My point is that this particular approach to application design is used by a small subset of people. Whether you think it's a good thing or not, you can't argue that it's a niche. You also can't argue that it does not match what the vast majority of people are actually doing.</p><p>If you look at some more recent PHP-FIG messages about middleware, you'll actually see that people are still figuring out the design patterns around it and don't fully know yet what does and doesn't work. This is an indication that it's in its infacy and people are learning as they go. Which is fine. I'm not saying one thing is better or worse.</p><p>But of course a more convenient interpretation is that I'm just an idiot who doesn't know what he's talking about. Lets just attack my lack of knowledge of the subject instead of discussing the merits of my point. Thanks anonymous person. Very brave of you.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-06-14T05:04:32Z",
            "name": "s.molinari",
            "disqusUser": "scamo",
            "message": "<p>I am a nobody PHP developer, but I too hope the PHP-FIG can get over the politics and remember its purpose and work towards that purpose much more fervently. Why? Because it is, IMHO, the next evolution to the PHP language and its community. If it works well, the interoperability will be the needed propulsion to push PHP's further success. If it fails, I am afraid PHP will stagnate (even more than it has in the past). I'd like to see a much more promising future for PHP and PHP-FIG plays a major leadership role, by doing its work efficiently. That is a huge responsibility. It is NOT prestige. It takes modesty, caring and giving to come together to support a greater whole as a group. It is an honor and a duty. And as such, it takes diligence and fortitude. And everyone needs to keep the greater purpose in mind....all the time!</p>",
            "children": []
        }
    ],
    "/sabre-xml-repeating-elements": [],
    "/blogging-for-10-years": [],
    "/PHP-Sucks": [
        {
            "created": "2016-06-15T22:54:05Z",
            "name": "Rafael Morais dos Santos",
            "disqusUser": "rafamds",
            "message": "<p>Beeing a PHP for 3 years(in a professional way), I get everything you said, and thats very sad. I think many of us saw ourselves in your words. Well, I wish you good luck in your future, learning Golang xD</p>",
            "children": []
        },
        {
            "created": "2016-06-16T02:27:12Z",
            "name": "Helge",
            "disqusUser": "disqus_eR3zypX69f",
            "message": "<p>I pretty much disagree with everything you wrote, which is presumably what you expect as a PHP dev ;-) How can you write \"I think it fine to say \u201cPHP is worse than Java, Ruby, Python, and many others ... it will likely lose\"\" and in the next sentence \"So the critics are right, and so are PHP developers\". No, the latter are not. The former are arguably better choices, why would you choose something that is worse? Yes, a good developer can get stuff done in any language, but choosing an arbitrary one (the one you use to know) doesn't make a good choice. There are non-non-sensical reasons why PHP (and MySQL!) is blamed the way it is, and this is really not related to n00bs (they are plenty in Java, RoR and Node too, I consider neither very good yet way better than PHP). But whatever, I applaud that you look into other stuff now, that is a really good thing. Acerbus puts it really well: \"If PHP is your only skill, then you did that to yourself\". If you are choosing PHP because its a great fit for the job, yes, go ahead. But I'm pretty sure your view will change once you learn how other environments work (and I'm a little surprised that you never cared before). You are so multi-lingual in real-life, it's surprising that you didn't apply that skill to programming languages ;-)</p>",
            "children": [
                {
                    "created": "2016-06-16T02:45:20Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>The problem with this perspective is that PHP is actually also quite good at solving problems. I don't really feel like making the argument why, there are plenty of resources out there that do a better job.</p><p>The point I tried to make is that if you look at the language alone in isolation, it's easy to dismiss. But clearly that's not the only factor, because otherwise we'd all be writing lisp.</p><p>This is not a rant against PHP, it's a frustration with its reputation. </p>",
                    "children": [
                        {
                            "created": "2016-06-16T03:00:42Z",
                            "name": "Helge",
                            "disqusUser": "disqus_eR3zypX69f",
                            "message": "<p>No one questions that it is \"quite good at solving problems\" (a plain saw is a pretty freaking awesome invention, yet a CNC machine does have some pros too). I certainly didn't read your text as a rant against PHP, in contrary, hence the \"I pretty much disagree with everything you wrote\". The key point for me is that you are looking into other stuff now, and that can only be good, even if you then come back and tell us that you could solve all that in PHP way easier (which I consider highly unlikely ;-) P.S.: We certainly wouldn't be writing Lisp but Smalltalk or Self.</p>",
                            "children": []
                        },
                        {
                            "created": "2016-06-16T15:37:31Z",
                            "name": "KeithK",
                            "disqusUser": "KeithKikta",
                            "message": "<p>A long time ago I left ColdFusion for the same reason. It was (probably still is) a good language but due to the low barrier to entry there were a lot of people writing shoddy code. These days I mostly use C# which I love and seems to have a good reputation and Python which is awesome but I fear that over time it will also suffer, again based on its low barrier to entry.</p><p>Best of luck</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-06-16T06:22:46Z",
            "name": "markentingh",
            "disqusUser": "markentingh",
            "message": "<p>C# is the greatest language for the web &amp; for everything else. Hands down.</p>",
            "children": [
                {
                    "created": "2016-06-16T08:31:29Z",
                    "name": "hitchhiker999",
                    "disqusUser": "hitchhiker999",
                    "message": "<p>As much as I hate to support MS, yes - after 35+ years of programming, I can say I've never been more impressed with any other language. Now also being able to execute code on lin/osx it has truly become an 'unpopular' favourite of mine.</p>",
                    "children": []
                },
                {
                    "created": "2016-06-16T12:55:12Z",
                    "name": "Richard Torcato",
                    "disqusUser": "richardtorcato",
                    "message": "<p>You obviously haven't learned Swift yet</p>",
                    "children": []
                },
                {
                    "created": "2016-06-16T17:32:56Z",
                    "name": "Michael Assad",
                    "disqusUser": "michaelassad",
                    "message": "<p>I'm a big fan as well. I got into it right when it came out back in 2001 or whatever. Worked in it exclusively for about 5 years and then drifted out of programming and into sales, marketing, etc. as my business grew. Last year, when my new company required a programmer without the funds to pay one, I dusted off the old (well new) Visual Studio and started to crank. I am amazed at how easy it was to get back into it and how fast I can build stuff. C# practically programs itself!</p>",
                    "children": []
                },
                {
                    "created": "2016-07-18T07:49:17Z",
                    "name": "blaze",
                    "disqusUser": "loimu",
                    "message": "<p>No thanks. I prefer Python. You can express everything in one or two lines of code and still it will be readable and good looking. A perfect choice for perfectionists!</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-06-16T07:04:45Z",
            "name": "Ogr79",
            "disqusUser": "",
            "message": "<p>I was a PHP developer. For most of my career. I am ZCE, too. I am working in Java, now. But, I have a huge respect for PHP language, PHP developers and its community. Yes, I agreee, PHP is not a perfect language. And yes, I agree, PHP allows to write bad code. But, it is possible to write a bad code in Java, too. I saw it with my own eyes.</p><p>Very nice article. Respect for You.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T08:18:59Z",
            "name": "Matt Knighton",
            "disqusUser": "mrkdevelopment",
            "message": "<p>I wouldn't choose another language just for salary. PHP has some good paying jobs out their. I think full stack coders are always in demand. I love PHP because I can write a small bit of code to fix a small problem in a small amount of time.</p><p>In bigger projects we use Lint tools and other elements to help keep code under control as well as unit testing.</p><p>If you have that sort of background I think you would be in a pretty good place to earn some good dollars.</p><p>Javascript / Typescript and the like are also good things to learn so I'd be inclined to advise you go full stack. The number of PHP developers that can code good css with SASS and write Typescript and get it working over REST with a JWT auth library and launch it in a Ubuntu environment with a redis cache and opcache and actually know what is going on is very rare. Put  in Nginx and some video streaming with mpeg encoders and your even more rare.</p><p>So what am I saying - just expand your tool set. PHP on it's own is not going to win you a great salary.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T08:20:20Z",
            "name": "kalkulatorek",
            "disqusUser": "",
            "message": "<p>I agree with you. I've been php dev for 6y. Salary for php devs is lower (in Poland) than many other programming jobs. I'm learning python now, it's fun language, prettier than php, no more {}, ; but slower. PHP it's not bad, but of course could be better. There is many annoying things in this language, == vs ===, casting, function names, errors, exceptions, @ sign. No official standards like pythons pep.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T08:49:21Z",
            "name": "Peter Petermann",
            "disqusUser": "PeterPowers",
            "message": "<p>Personally i believe that a good developer should have a variety of tools that he/she is using. <br>I don't see myself as a PHP Developer even though PHP is probably the one that I have used most in my professional career, I'm a software and game developer, PHP is just a tool that i pick for specific tasks.</p><p>To anyone considering programming as a career: never nail yourself down to one language. If you want to make a good career than remember that your craft is developing software, no writing code in a specific language.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T09:57:36Z",
            "name": "David Frame",
            "disqusUser": "davidframe",
            "message": "<p>Switching to another language for a higher salary is one thing, but why put so much stock in what other people think?</p><p>Try to realize that what you've experienced happens in any industry. People will always find something to look down upon when it makes them feel superior to do so. The old playground mentality of \"my games console is better than yours\" doesn't just stop at adolescence.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T10:02:36Z",
            "name": "m8",
            "disqusUser": "m8",
            "message": "<p>I'm going insane over here, can anyone explain why echo b\"foo\"; is valid php?</p>",
            "children": [
                {
                    "created": "2016-06-16T10:13:46Z",
                    "name": "Thijs",
                    "disqusUser": "tlenss",
                    "message": "<p>b stands for binary string</p>",
                    "children": []
                },
                {
                    "created": "2016-06-16T11:01:35Z",
                    "name": "Martin Danielsson",
                    "disqusUser": "disqus_tnxvhnu0P2",
                    "message": "<p>the b prefix casts the string to binary:<br><a href=\"http://php.net/manual/en/language.types.type-juggling.php\" rel=\"nofollow noopener\" title=\"http://php.net/manual/en/language.types.type-juggling.php\">http://php.net/manual/en/la...</a></p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-06-16T10:08:07Z",
            "name": "Random Done",
            "disqusUser": "bernhardposselt",
            "message": "<p>Personally my biggest issue is class isolation and all the ridiculous possible php.ini settings.</p><p>Use composer? Great, it's really nice! Depend on two libraries that depend on a common library in different versions? Well you're fucked since every class in a namespace can only exist once. This is a non issue in basically any other language like Java or even on Node. Going back to require or include also won't fix it.</p><p>Then the php.ini stuff, don't even get me started. You need to check for every weird setting (there's a setting that changes all non unicode string functions into unicode ones, WTF) and need tons of extensions usually that some weirdo did not enable on his setup. Python really shines here (batteries included).</p><p>You can work around all the other issues like === and inconsistent function parameters but build anything more complex and for a broader audience than a simple template and you're going to pull your hair out and flip the table in frustration. The language is just fundamentally broken beyond repair for anything serious.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T12:46:08Z",
            "name": "Richard Torcato",
            "disqusUser": "richardtorcato",
            "message": "<p>Actually the second best time to plant a tree is 19 years, 11 months and 28 days ago.</p><p>I went from Flash to <a href=\"http://ASP.net\" rel=\"nofollow noopener\" title=\"ASP.net\">ASP.net</a> to Php and learned Codeigniter and Laravel. It's hard to find Laravel projects and most companies that want wordpress is because it's cheap and quick (not  the best companies to work for).</p><p>I've moved over to node and express and finally found something that seems far better. So Node  isn't perfect but i dont have to deal with all the php config/apache crap on the server. Now my server and client code can share the same libraries.</p><p></p>",
            "children": []
        },
        {
            "created": "2016-06-16T13:07:45Z",
            "name": "relaxnow",
            "disqusUser": "relaxnow",
            "message": "<p>Hey Evert! I totally agree that after having worked with PHP for a decade or so the lack of respect really does start to wear on you.<br>Then again, I think no community is immune from this. Ruby is desperately tied to Rails and certain anti-patterns. Python has it's civil 2 v.s. 3 war. Java developers are too Enterprise to get hired by startups. C# devs are tied to Microsoft, a company that can't seem to keep up with innovation.<br>You can go on and on here. A decade in any of those technologies and you'd probably feel the same way.<br>Golang is new and hot now, but in time it will get it's own 'reputation'.</p><p>That said, a new language and community sounds like an excellent way to bring back some fun! I'd be afraid I'd miss too many libraries to be competitive with other technologies but I guess you can find Golang work where that's a non-issue.<br>Personally I've always been tempted by Haskell or C#, maybe one day...</p><p>Anyway I'll miss seeing you in FIG discussions, but hope you have fun!</p><p>PS: You might want to change your sig to say \"Looking for a Golang developer\" ;-)</p>",
            "children": [
                {
                    "created": "2016-06-16T14:16:43Z",
                    "name": "Daniel Craig Jallits",
                    "disqusUser": "jallits",
                    "message": "<p>\"Golang is new and hot now, but in time it will get it's own 'reputation'.\"</p><p>Yes. Yes. Yes.</p><p>That said, I have shared the same feeling as @evertp:disqus  for a long time. I had/have hopes that the massive advances in PHP as a language, and the ecosystem around it (ex. Composer, PHP-FIG) would shift the views to a more favorable light. The chaos within the FIG, in my opinion, killed any momentum that PHP had. I have no counter argument when this is brought up with my friends in other languages.</p><p>I have often thought about jumping ship to something different. The nice thing about a new language like Golang is that it doesn't have a reputation yet. At least there you are started at zero versus the negative view that is held by a great majority of our peers in other languages and the business community.</p>",
                    "children": [
                        {
                            "created": "2016-06-16T14:50:02Z",
                            "name": "Tim Hawkins",
                            "disqusUser": "tim_hawkins",
                            "message": "<p>Aint going to happen, becuase all the haters are still stuck with a mental picture of php that harks back to php3 or php4. Modern PHP is a completly different animal. </p>",
                            "children": [
                                {
                                    "created": "2016-06-16T15:34:33Z",
                                    "name": "Daniel Craig Jallits",
                                    "disqusUser": "jallits",
                                    "message": "<p>Yes, but that picture is strongly reinforced when the most popular known project uses an archaic architecture and its lowest point of entry is PHP 5.2.4+</p>",
                                    "children": [
                                        {
                                            "created": "2016-06-16T15:43:04Z",
                                            "name": "Tim Hawkins",
                                            "disqusUser": "tim_hawkins",
                                            "message": "<p>Possibky, we are heading to golang  too, but we are keeping php,  our next generation of systems will have thin php frontend layer backed by go based microservices.  Use each for its strengths. </p>",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "created": "2016-06-16T15:03:26Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>All pretty great points! Thanks for the nice words </p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-06-16T13:25:28Z",
            "name": "JGrant",
            "disqusUser": "",
            "message": "<p>I'm amused that you feel like you're looked down upon by Java developers considering that in my experience they are the bottom of the barrel due to ease of outsourcing and the fact that they never have to learn to do a lot of things that Java does for them so their skills don't translate outside Java land.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T13:38:45Z",
            "name": "David McCan",
            "disqusUser": "",
            "message": "<p>I remember in the year 2000 my office mate and I were talking about a project where he had to use a lot of JavaScript.  He held his nose, said \"Eww\" and laughed.  Since then a lot of amazing things have happened with JavaScript.  Just because the popular opinion is that the world is flat, does not mean that you will fall off the edge if you keep sailing.</p><p>Like JavaScript, PHP is also evolving. There are more good chapters to the the PHP story still being written and the fact that you can quickly craft a good solution using the language is your trump card.  PHP is not just popular because it is easy to get started with, has extensive libraries and resources, or a vast community of talented programmers.  One of the main reasons it is popular is that it has a relatively low resource footprint and can be easily deployed on low cost servers around the world.  Mom, pop, buddy, and sis can use it, as well as Goliath enterprises like those you mention.</p><p>If you are ready for something new, then go for it, but is \"others think PHP is uncool\" a good reason?</p>",
            "children": [
                {
                    "created": "2016-06-16T15:07:22Z",
                    "name": "Dave",
                    "disqusUser": "disqus_jJieF48VHL",
                    "message": "<p>JavaScript is popular, but you can't deny that it has lots of problems. The world being flat and all ;). left-pad anyone?</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-06-16T13:42:30Z",
            "name": "Francisco Yllera",
            "disqusUser": "franciscoyllera",
            "message": "<p>I did that move years ago, i switched from PHP to Java, to learn how to do things \"correctly\" and then move on again to something better, Scala with Akka.<br>Even though C# is a nice lang its tied to MS, not an option for me, ill stick to open source.</p>",
            "children": [
                {
                    "created": "2016-06-16T14:40:02Z",
                    "name": "markrendle",
                    "disqusUser": "markrendle",
                    "message": "<p><a href=\"https://github.com/dotnet/roslyn/blob/master/License.txt\" rel=\"nofollow noopener\" title=\"https://github.com/dotnet/roslyn/blob/master/License.txt\">https://github.com/dotnet/r...</a></p>",
                    "children": []
                },
                {
                    "created": "2016-06-16T14:42:33Z",
                    "name": "Lasse Meland",
                    "disqusUser": "lassemeland",
                    "message": "<p>The dotnet compiler is open source, and now, a lot of the .net libraries is also open sourced, and can be run on linux and osx: <a href=\"https://github.com/dotnet/corefx\" rel=\"nofollow noopener\" title=\"https://github.com/dotnet/corefx\">https://github.com/dotnet/c...</a></p>",
                    "children": []
                },
                {
                    "created": "2016-06-16T16:18:24Z",
                    "name": "Scott",
                    "disqusUser": "disqus_3tyItl3bgQ",
                    "message": "<p>Another vote here for Scala</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-06-16T13:44:16Z",
            "name": "Grumpys view",
            "disqusUser": "grumpysview",
            "message": "<p>Why do you care so much what other people think. The majority of the web is still PhP and will be for a long long time.  I do a 110k a year with PhP, not bad for a script buddy ( as others would put it ). I can write in other languages but i prefer PhP for its rapid development.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T13:55:46Z",
            "name": "carlzulauf",
            "disqusUser": "carlzulauf",
            "message": "<p>The Ruby community welcomes you. It's nice here. MINSWAN</p>",
            "children": []
        },
        {
            "created": "2016-06-16T14:12:42Z",
            "name": "disqus_hohlPjp95I",
            "disqusUser": "disqus_hohlPjp95I",
            "message": "<p>Reminds me on the general hate that gets directed towards jQuery. If it allows noobs to do magic, it must be bad. Right?</p>",
            "children": []
        },
        {
            "created": "2016-06-16T14:18:48Z",
            "name": "Sigurt Bladt Dinesen",
            "disqusUser": "sigurtbladtdinesen",
            "message": "<p>I want to thank you for your insights in this post, and to say hi; I'm the guy who thinks php sucks for everything it is and isn't. I'm the guy who thinks less of you as a professional, and as a person --- all because you are a php developer (if I'm ever the guy who tries to trash-talk you to the woman you love, I want you to punch me in the face).</p><p>I'm happy to read that you're a \"get things done\" person. It makes me think less less of you for standing by the absolute trainwreck that I perceive php to be.</p><p>Let me get this out of the way; you absolutely are a real programmer. The notion that the language, not the task, determines this is absurd. I also don't care if my doctor's prescriptions are in latin or danish (I live in Denmark), so long as I don't have to read them.</p><p>But you actively choose php every day. Which means you make poor decisions every day (again, in my percept). Am I supposed to not look down on you for that?</p><p>You admit that php falls short in comparison to other languages, that it is less \"correct\". When you then stand by it for letting you \"get things done\", I have to ask myself why these languages, that you think better, do not? Is it not incompetence standing in your way then?</p><p>I would go on about \"the right tool for the right job\" if you only know PHammerP, about the value of \"getting it done\" by using what you know, about enjoying the patterns and architectures of your work, and being appalled by the idiosyncrasies of php, about the lack of a design/labour division in software engineering that I think this debate might have spawned from, but I think this comment is long enough by now.</p><p>I sincerely meant it when I thanked you for your insights, you opened my eyes to something I had not seen. Perhaps I am naive to think I might offer the same in a comment, but here goes.</p>",
            "children": [
                {
                    "created": "2017-05-01T15:02:31Z",
                    "name": "Grumpys view",
                    "disqusUser": "grumpysview",
                    "message": "<p>One of the most ignorant reads for a long long time. Lets compare track records!</p>",
                    "children": [
                        {
                            "created": "2017-05-04T15:07:36Z",
                            "name": "Sigurt Bladt Dinesen",
                            "disqusUser": "sigurtbladtdinesen",
                            "message": "<p>Compare track records?<br>Okay, I'll start.<br>I have _not_ recently bumped a year-old comment, with nothing to add except dick measuring and name calling.<br>Enjoy your life rando..</p>",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "created": "2016-06-16T14:23:48Z",
            "name": "capital_P_dangit",
            "disqusUser": "",
            "message": "<p>WordPress is spelled with a capital \"W\" and a capital \"P\".</p>",
            "children": []
        },
        {
            "created": "2016-06-16T14:52:07Z",
            "name": "ufmace",
            "disqusUser": "masongup",
            "message": "<p>Honestly, I just laughed for like a minute straight when I saw that, just below your conclusion section saying that you're getting out of PHP and don't recommend it to new developers, is an ad for yourself as a PHP developer.</p>",
            "children": [
                {
                    "created": "2016-06-16T15:01:06Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I can appreciate the irony ;)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-06-16T15:08:54Z",
            "name": "Gabriel Gallardo",
            "disqusUser": "disqus_r4BJ6QzIXq",
            "message": "<p>Resources and best practices make PHP the best or one of the best ways for business, or at least is my day to day, the rest is just advertising.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T15:30:49Z",
            "name": "Scott",
            "disqusUser": "disqus_3tyItl3bgQ",
            "message": "<p>Give Scala a try, I think you might be surprised. As a mostly Java developer the past ten years I have started feeling about Java the way you feel about PHP, now that I program in Scala.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T15:32:11Z",
            "name": "Julius E.",
            "disqusUser": "ryan_stecken",
            "message": "<p>Great post! I totally agree with you regarding the image of PHP as programming language. I've been laughed at for doing PHP kinda often in my company, even if the PHP backend (handling over 50 mio. users) is the main cash driver. So yeah, I kinda like the tweet from Chris.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T15:36:29Z",
            "name": "Lordofthenet",
            "disqusUser": "lordofthenet",
            "message": "<p>I think the issue is that we like to think in boxes. This technology is better than the other etc... Instead of analysing the requirements incl. time &amp; budget in order to decide which is the best technology for each project and it's goals.<br>Personally I love to code no matter which language, thus it's key to understand app design, design patterns as also the pro's and cons of the final prod. environment.<br>Depending on that I put a dev team together. Sure there is an average salary depending on market but Personally what I pay on top is based on code review as this show's me how skilled a dev is.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T15:39:10Z",
            "name": "dakoon2003",
            "disqusUser": "dakoon2003",
            "message": "<p>Somehow I don't think carpenters or mechanics really get into these types of discussions about the types of hammers or wrenches other mechanics or carpenters use.... The language is a tool, plain and simple. If a guy comes up with a tire tool to change a tire I don't look down on him because he bought it at Walmart instead of Sears... To judge somebody by the tools they use is the fastest way to kill the problem solving spirit in a young developer. PHP, Ruby, Python, GoLang, Javascript, COBOL are all just tools to be used to solve problems. To learn one at the exclusion of the others limits your ability to solve problems but it doesnt make you less of developer. I love learning a new language. I started in PHP but never turned down the opportunity to learn a different language when the situation called for it.</p>",
            "children": [
                {
                    "created": "2016-06-16T16:13:43Z",
                    "name": "Johnny",
                    "disqusUser": "",
                    "message": "<p>\"The language is a tool, plain and simple.\"</p><p>The language is also a design choice, a building material, and a communications medium.  I have to wonder why apologists keep trying to insist that languages matter less than they do.</p><p>If the guy had a replacement *tire* he bought for $5 at a scrapyard, would you treat it as equal to a $100 tire from Sears?  You don't seem to believe that programming languages are also the building material of your software.</p><p>If this blog post had been written in Mandarin, would it have equal value to you?  You claim to believe that the language is just a tool, after all.</p>",
                    "children": [
                        {
                            "created": "2016-06-16T17:03:19Z",
                            "name": "dakoon2003",
                            "disqusUser": "dakoon2003",
                            "message": "<p>Actually I would value it as much :) as far as the tire analogy goes if you are stranded and need a tire and he has one that holds air you would turn it down? I don't devalue the language choice but I fail to see it as a basis for judging someone. You can nail a nail with a shoeheel but a hammer does work better. Languages matter but a working product matters more.</p>",
                            "children": [
                                {
                                    "created": "2016-06-16T17:05:24Z",
                                    "name": "Evert",
                                    "disqusUser": "evertp",
                                    "message": "<p>I'm shutting down this discussion if there's more posts about the pros and cons of PHP. It's a tired subject and non of the points either of you will be making have not been said before.</p>",
                                    "children": [
                                        {
                                            "created": "2016-06-16T17:11:03Z",
                                            "name": "dakoon2003",
                                            "disqusUser": "dakoon2003",
                                            "message": "<p>Understood, probably easier to get everybody to agree on pizza toppings lol...</p>",
                                            "children": []
                                        }
                                    ],
                                    "url": "https://evertpot.com/",
                                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "created": "2016-06-16T15:48:43Z",
            "name": "Achin Sharma",
            "disqusUser": "achshar",
            "message": "<p>&gt; Looking for a PHP developer for your next project? I'm looking for work! Check out my resume or drop me a line!</p><p>Oh the irony.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T16:00:15Z",
            "name": "Andy Skelton",
            "disqusUser": "skeltoac",
            "message": "<p>Congrats and enjoy learning Golang---it's a ton of fun! You might like to change the thing that says \"Looking for a PHP developer for your next project? I'm looking for work! Check out my resume or drop me a line!\" at the bottom of your post. ;-)</p>",
            "children": []
        },
        {
            "created": "2016-06-16T16:16:20Z",
            "name": "Sam",
            "disqusUser": "",
            "message": "<p>\"Yes, there is a lot of bad PHP code out there.\"</p><p>I don't think that has anything to do with it.  There's even more terrible C code out there, but I don't think it has a bad reputation because of this.  I've waded through more than my share of terrible Ruby and Python, as well.</p><p>\"Every time someone says \"PHP sucks\" an elephpant laughs and keeps counting their money earned from getting things done\"</p><p>True.  That's why I write everything in Befunge!  Why should I care about the future maintainer?  :-)</p>",
            "children": []
        },
        {
            "created": "2016-06-16T16:32:41Z",
            "name": "Stan Bright",
            "disqusUser": "stanbright",
            "message": "<p>Hey, if you are going to move to Go, I'd suggesting checking out <a href=\"https://go.libhunt.com\" rel=\"nofollow noopener\" title=\"https://go.libhunt.com\">https://go.libhunt.com</a> . It could be useful. Cheers!</p>",
            "children": []
        },
        {
            "created": "2016-06-16T17:22:25Z",
            "name": "Osman \u00dcng\u00fcr",
            "disqusUser": "osmanun",
            "message": "<p>Hello evert, `o` from github. Few years ago i had same feelings like yours. Switched to Java (and Spring Boot) and i'm very happy for a long time. (I hate Scala's syntax, but if you like it, it's highly recommended)</p>",
            "children": []
        },
        {
            "created": "2016-06-16T17:24:37Z",
            "name": "troyvit",
            "disqusUser": "troyvit",
            "message": "<p>Hahah clickbaity title indeed. I I saw it and thought, \"Man I haven't read a 'PHP sucks' article in at least a year. About time to get my hackles up again...\"</p>",
            "children": []
        },
        {
            "created": "2016-06-16T17:48:12Z",
            "name": "John Haldson",
            "disqusUser": "johnhaldson",
            "message": "<p>It's unfortunate that you are switching away from a language because you are worried about what others think.</p><p>I use and get paid to code in more than 1 programming language, PHP being one of them. When somebody is dismissive towards me if I am discussing a project that is coded in PHP and they write it off without being able to explain why, sorry but I will write that person's opinion off on pretty much everything. I don't care about what misinformed people think who form their opinions by popularity. There's nothing I can't learn from this person that I can't learn from trolling the discussions on reddit and HN.</p><p>The people's opinions that are worth caring about aren't unguided people who bash a language because of it's reputation. This is truly something I wish I could have told my programmer self 10+ years ago. Language bashing wars - it's just noise. Don't mind these people and you'll be much better off.</p>",
            "children": [
                {
                    "created": "2016-06-16T17:50:03Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>It's not because I'm occasionally hurt by a random person's opinion. In fact, I completely empathize with why someone might have that opinion if they don't have all the facts. After all, the \"PHP sucks\"-mantra is repeated all the time.</p><p>My problem is that there's a general bias against PHP and I'm worried about the long-term negative effects that will have on my career.</p>",
                    "children": [
                        {
                            "created": "2016-06-17T15:44:24Z",
                            "name": "Will",
                            "disqusUser": "willmelbourne",
                            "message": "<p>I agree with you 100% on this. The stigma is huge and will hurt you in a lot of interviews.<br>Realisticaly though a language is only a tool and is only ever as good as the person who writes it, it's just that with PHP it is so easy to write sloppy code. Even though PHP is easy intialy I actualy think it is harder to write good code in a because it is so lenient in what it accepts. Something stricter like JAVA, Go or C# enforces you to think more about what you are passing and returning. This takes a little more time when writing the code but saves soooo much time when maintaining or extending the code.<br>Plus learning Go or Python I find faster than PHP because the language style is more consistent and has less gotchas in it.<br>Good article and enjoy Go it's clarity and productivity is hugely refreshing after working with PHP.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                },
                {
                    "created": "2016-07-18T09:04:32Z",
                    "name": "Hast",
                    "disqusUser": "Hast",
                    "message": "<p>You're so god damn right.</p>",
                    "children": []
                }
            ]
        },
        {
            "created": "2016-06-16T17:49:14Z",
            "name": "Aigars Mahinovs",
            "disqusUser": "aigarius",
            "message": "<p>PHP is like living in a bad neighbourhood - after a while you get to know the parts of the streets that you can walk on to stay clean and the gang signs to flash to stay safe and get your work done, but you are still in a bad place with garbage on every corner and murder in the side streets. Move if you can.</p><p>Nowadays what a good software engineer or a software craftsman needs is a set of tools and materials with which he could feasibly build anything and where there are people that do build any such thing out there in the real world. For me that combination of languages has been: Python, HTML, SQL, JavaScript (JQuery and ReactJS is enough), CSS (Bootstrap is enough) and just enough Bash and Linux command line tools to get by. With that you can build anything you really want - from a website to a large scale data processing system to embedded software to desktop apps to API services to data analytics dashboards to hardware testing setups to financial transaction auditing software to that script to trigger your smart lightbulb.</p><p>Python has a TON of great libraries and nice bindings to C libraries for things where speed matters more than readability as well as an active community that takes good code quality and zen very seriously. You can write any software in Python and when you sometimes do hit an actual speed issue (and not just bad design that iterates over 100 million entries multiple times needlessly) then you can easily drop down to C for that one critical function.</p><p>The critical part is the feeling that with what you know you can tackle any software problem. That is very inspiring.</p>",
            "children": []
        },
        {
            "created": "2016-06-16T21:30:53Z",
            "name": "Jakob Lorberblatt",
            "disqusUser": "jakoblorberblatt",
            "message": "<p>I am a DBA working in a LAMP Stack environment for years and I personally am trained as Java Developer (and have been employed as one as well as an engineer supporting Java based web applications) but prefer python for administration automation do to the simplicity and efficiency as well as object oriented aspects of the language.<br>    I do understand why to say PHP has deficits, its difficult to debug and slightly longer to write similar routines when used for sysadmin related scripts at times however it does get a LOT done, works and continues to work for decades at a time. <br>   What do you think the impact of modernization will have, PHP 7 is boasting efficiency gains that no other languages revision is promising; I'm actually coming full circle to think PHP may have as much future as other languages especially based on the number of people who know the language. Do you think PHP 7 will catch on, I know php has the same reputation as Java; for developers and app stacks clinging to old versions since upgrading involves the unknown and is difficult to test thoroughly to prove the transition will be okay? If the language is efficient and uses less hardware and provides a stable platform, sloppy libraries and other oddities are more a barrier to new incoming developers then to the experienced; do you in your experience think it may be able to overcome them?</p>",
            "children": [
                {
                    "created": "2016-06-16T21:38:08Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I think the negativity surrounding PHP has for a while not been for technical reasons. So to answer the question of if it will overcome the stigma, I don't think we have to look at performance or features but more at positive momentum in terms of people's mind space.</p><p>I find it hard to make predictions either way.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-06-17T03:36:04Z",
            "name": "Impurist",
            "disqusUser": "impurist",
            "message": "<p>Props for a well written post..<br>I cut my teeth on PHP in the dotcom days of the late 90's<br>After several projects I realised PHP was not going to push my career to where I wanted to be.<br>I dabbled with Python and Java but it was not until Ruby on Rails came to my attention in 2005 that I dropped PHP all together. Rails changed the game and one of best things about it is the Ruby language. I did work end up on a large PHP Code Igniter project which was a bit of nightmare.. Thankfully partway into it they decided to change the stack to Rails. One of the main reasons sited by the Lead Developer was lack of quality PHP devs. <br>10 years and my career is awesome. I don't look for work anymore. It finds me..<br>I am now focused on JavaScript which is where I see much of the innovation going on.<br>All best with your next tech stack of choice.</p>",
            "children": []
        },
        {
            "created": "2016-06-17T15:32:03Z",
            "name": "Mark",
            "disqusUser": "disqus_Xe2guWY1ou",
            "message": "<p>PHP was my second language (after Python) and recently (the last 12months) I have been using Go-Lang professionally in my day job. I agree with you, PHP has a really bad rep and its boring now, the same comments over and over and the thing is I LOVE programming in PHP, yes the lack of type casting really bothers me but what I can get done in PHP in a set time simply can not be matched by any other language.</p><p>I was lucky to get a job working with GO which I also really enjoy working with purely because there just aren't that many jobs for it. For any web development jobs PHP is by far the dominate language in my area along with Javascript based frontends.</p><p>It's just a shame that PHP is so easy to pick up and use that it gives it a negative press when 'have a go heros' produce really bad code. This can be said for any language, the developer is to blame not the language but unfortunately the low barrier of entry makes it a prime language for new comers</p>",
            "children": []
        },
        {
            "created": "2016-06-17T15:53:28Z",
            "name": "Sheldon Hearn",
            "disqusUser": "sheldonh",
            "message": "<p>You're doing the right thing. Even if you don't stop working with PHP, mastering more languages will be good for you. And I don't think you're off base; I find PHP as primary language on a resume a huge turn off and it takes something special to get me to look past it.</p>",
            "children": []
        },
        {
            "created": "2016-06-19T00:33:08Z",
            "name": "toughduck",
            "disqusUser": "toughduck",
            "message": "<p>Golang is cool, and so is PHP.</p><p>We're ditching Ruby for PHP7 on a recent project, so go figure.</p><p>I'm in a hiring position, and PHP on a resume is not a turn off. Not before I've asked a couple of questions.</p><p>People are different. I just got off the phone with a seasoned banking back end dev who felt that PHP gets a lot of undeserved criticism. Earlier today I read a comment by a beginner JS guy who regurgitated some anti-PHP sound bites he didn't really understand.</p><p>The best of luck to you! :) I firmly believe learning more that one language is a very wise decision.</p>",
            "children": []
        },
        {
            "created": "2016-06-19T12:20:15Z",
            "name": "Ivo Jansch",
            "disqusUser": "ivojansch",
            "message": "<p>I have defended PHP for a long time. I even wrote an enterprise PHP book to defend the use of PHP in enterprise environments. But in recent years things have changed and I stopped defending it. The web is more and more API driven but with PHP's lack of multithreading or the ability to handle things asynchronously, you end up handling all API calls sequentially which means not great performance. I still use PHP a lot but it's often combined with NodeJS to make up for the asynchronicity shortcoming.</p><p>Also, I have wielded the '70% of the web uses PHP' argument. But these days I realize that probably 60% of the web simply uses Wordpress or Drupal and doesn't really care about the underlying language.</p><p>Finally, PHP in recent years seems to suffer from lack of fresh blood. Since about 2012 I see the average age of developers at PHP conferences increase (or maybe that's just me). </p>",
            "children": []
        },
        {
            "created": "2016-06-19T13:53:40Z",
            "name": "Shafiq",
            "disqusUser": "disqus_AJsax1X5Rx",
            "message": "<p>No language is100% perfect. Php is best for all kind of website. You can do everything with php within ur client budget. Java and c# is good for entrprise application where client have big budjet. As you know facebook is developed with php. It clear that php is more <a href=\"http://scalable.secure\" rel=\"nofollow noopener\" title=\"scalable.secure\">scalable.secure</a> and best for big projects. If you are a good programmer then you will write good code with any programming language .<br>Its true a programmer should learn other language like c++ c# java etc which will secure the programmer carrier.. <br>Thanks<br>Shafiq</p>",
            "children": []
        },
        {
            "created": "2016-06-19T19:11:49Z",
            "name": "Edwin",
            "disqusUser": "disqus_n4qlVlJWwH",
            "message": "<p>Great post. I took PHP off from my portfolio years ago for that same reason: the stigma for being a PHP developer. I confess that I still use it on the downlow when I want to give away freebies to friends and family.</p>",
            "children": []
        },
        {
            "created": "2016-06-24T19:50:43Z",
            "name": "ArtStoneUS",
            "disqusUser": "ArtStoneUS",
            "message": "<p>In programming jobs, pay is inverse to the simplicity of the tool.  If anyone can use it, you get minimum wage.  If the tool requires 6 months of vendor certification before you can write Hello World\\n, you make big bucks.</p>",
            "children": [
                {
                    "created": "2016-06-24T19:52:38Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>You can really make grand statements like that without backing it up with stats. It's much more likely that supply and demand is the major factor here.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-06-28T00:56:15Z",
            "name": "Brade",
            "disqusUser": "bradezone",
            "message": "<p>Interesting post! But I can say that PHP has paid off handsomely for me, and I'm currently senior dev at a heath-care industry startup where I've primarily built our apps in the PHP framework Phalcon. I have a degree in CS and have experience in a wide array of languages, but I'm a pragmatist first and foremost so PHP fits my personality perfectly. Also I tend to be a devil's advocate, so when I sense snobbery towards something like PHP, it makes me want to defend it all the more. If you want to switch languages, that's fine. But we only have one life, so we might as well take a few risks and do what we enjoy. That's my POV anyway.</p>",
            "children": []
        },
        {
            "created": "2016-07-18T07:40:40Z",
            "name": "Dmitri Ponomarjov",
            "disqusUser": "dmitriponomarjov",
            "message": "<p>PHP is not less-payed compared to other languages. It has less average wages. What's the difference? The difference is in low \"barrier to entry\" you've written about. Just because we have a wider range of developers skills doesn't mean that top-qualified Java developer gets better salary than top-qualified PHP developer.<br>A social stigma? Sorry, but I'm laughing over it. New hype-languages come and go, empires rise and fall, and yet there still is a PHP, better than ever. We are the ones who look at new raw hype-named technologies sceptically now, not the otherwise. World has changed, take a look at it :) I haven't heard any criticism for PHP from potential clients in years. They don't want any risky experiments, they want to have things done.</p><p>Anyway, thanks for an opinion. I think that you are just generally tired from using one and the same language for 16 years, which is pretty much.</p>",
            "children": []
        },
        {
            "created": "2016-07-18T09:29:41Z",
            "name": "Dima Taras",
            "disqusUser": "AucT",
            "message": "<p>php is not bad. But I agree that I need to learn and practice some new language.</p>",
            "children": []
        },
        {
            "created": "2016-07-18T14:27:15Z",
            "name": "\u0421\u0435\u0440\u0433\u0435\u0439 \u041b\u0443\u043d\u0435\u0432",
            "disqusUser": "disqus_yr0IPSMVXm",
            "message": "<p>PHP sucks? <br>As language design, may be, but don't think so as for PHP7.<br>As ecosystem? May be. But with tools such as composer, phpunit and other, don't think so also.</p><p>My experience tells me that people from other languages that shits on other languages don't have enough level of programming.</p>",
            "children": []
        },
        {
            "created": "2017-03-26T19:17:24Z",
            "name": "Appels+Oranjes",
            "disqusUser": "iashin",
            "message": "<p>I felt the same with that Javascript horror for apps, I switched to Swift, I'm really happy now</p>",
            "children": []
        },
        {
            "created": "2017-03-28T17:19:56Z",
            "name": "Vision Websoft",
            "disqusUser": "visweb",
            "message": "<p>So...what new language did you decide to learn? Golang by chance? Highly recommend that one...https://<a href=\"http://golang.org/\" rel=\"nofollow noopener\" title=\"golang.org/\">golang.org/</a></p>",
            "children": []
        }
    ],
    "/rest-is-in-the-eye-of-the-beholder": [
        {
            "created": "2016-07-26T18:37:47Z",
            "name": "J7mbo",
            "disqusUser": "J7mbo",
            "message": "<p>This is great!</p><p>Not only are so many 'REST' APIs not actually RESTful, the same goes with many other things in tech.</p><p>Take 'MVC' in web context, for example. Take some design patterns. All it takes is for a popular framework maintainer to spout nonsense mixed with marketing and you get a huge group of people believing that a Facade is actually something else, or in this case, non-RESTful is actually RESTful.</p><p>Thanks for posting the above links, fowler etc, they're very useful :-)</p>",
            "children": [
                {
                    "created": "2016-07-26T19:56:06Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Well, I don't really care that much if meanings of terms get changed over time. I just think in this particular case it actually creates complications.</p>",
                    "children": [
                        {
                            "created": "2016-07-26T20:37:10Z",
                            "name": "J7mbo",
                            "disqusUser": "J7mbo",
                            "message": "<p>It's not that the 'meanings of terms' have changed, it's that they still exist and are being inaccurately represented as fact - which is what seems to be happening here and what is annoying those purists (who sometimes help keep us on the straight and narrow).</p><p>Regardless, it was a complement to your blog post and I tweeted it. Cheers!</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-07-27T14:09:46Z",
            "name": "philsturgeon",
            "disqusUser": "philsturgeon",
            "message": "<p>Spot on. Whilst it's hard and usually not very helpful to \"That's not actually RESTful\" people, I try to separate what makes for a good \"HTTP API\" and a \"Hypermedia API\".</p><p>A lot of people think they need REST when they don't need Hypermedia, struggle to implement it all, and call it REST anyway. It's a weird thing.</p>",
            "children": []
        },
        {
            "created": "2016-08-28T07:43:04Z",
            "name": "Alain Van Hout",
            "disqusUser": "alainvanhout",
            "message": "<p>I've always found HATEOAS a weird match for the rest of REST (no pun intended, at this point):<br>- it mixed data and meta-data, in contrast with the rest of REST, which aims to disentangle concerns<br>- it insists that resource urls should be meaningless strings, while the rest of REST aims to add convenient semantics rather than reduce them<br>- it tries to solve the issue of a changing API by (essentially) adding hard-coded strings to the definition of a resource, which in turn means that when the API changes, those hard-coded strings would become obsolete (excluding special measures be taken)</p><p>So all in all, I see HATEOAS (REST 'proper', whatever that means) as being quite different than the rest of REST (as a result, for myself I tend to distinguish between 'RESTful' and 'restful').</p><p>Excellent blog post btw!</p>",
            "children": []
        }
    ],
    "/syntax-highlighting-in-presentations": [
        {
            "created": "2016-10-25T00:45:15Z",
            "name": "Philipp Kewisch",
            "disqusUser": "pkewisch",
            "message": "<p>Interesting, I just had the same need a few days later. Last time I needed this I actually used  services like <a href=\"https://tohtml.com/\" rel=\"nofollow noopener\" title=\"https://tohtml.com/\">https://tohtml.com/</a> which generate colored HTML that can easily be pasted into Impress or the likes. This time around I was not quite happy with the color themes and wanted a local solution.</p><p>What I ended up doing, since I write my code with vim, is using the neat :TOhtml feature, which takes the current buffer and generates a HTML file that looks exactly like it. Yes, this includes line numbers if you have them enabled.</p><p>The HTML it generates uses CSS classes to set the colors, so changing the colors afterwards is fairly easy. Now this does not get you colored pasteable content yet, because the colors are not set inline. Since only a fraction of the HTML gets copied, the CSS rules are not included and OpenOffice will not see them.</p><p>The next step I took is to install one of those CSS inliner tools often used when creating HTML Email templates. The one I used is juice from <a href=\"https://github.com/Automattic/juice\" rel=\"nofollow noopener\" title=\"https://github.com/Automattic/juice\">https://github.com/Automatt...</a> which works fairly well. In vim I can then do :%!juice /dev/stdin /dev/stdout (I have an alias for this so I just have to use %!juice and it will inline the CSS.</p><p>Finally, I can open this in the browser and get a picture perfect copy of what I saw in vim, which I can copy and paste into OpenOffice with all the colors.</p><p>Given the extra CSS inlining step I realize this may not be the quickest solution, but for vim fans I think it works quite well, especially since you can easily change the colors.</p>",
            "children": [
                {
                    "created": "2016-10-25T02:40:37Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Nice alternative!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2016-10-27T12:13:21Z",
            "name": "Jeroen Noten",
            "disqusUser": "jeroennoten",
            "message": "<p>If you use any JetBrains IDE (e.g. PhpStorm), when you copy source code from there, markup will be copied as well, and you can just paste it into your presentation! :D</p>",
            "children": []
        }
    ],
    "/switching-to-amp-and-back-again": [
        {
            "created": "2016-10-25T07:05:52Z",
            "name": "Shameer C",
            "disqusUser": "sahmeerc",
            "message": "<p>Thanks for writing this! <br>I was also thinking of moving to AMP, but retracted after realizing the amount of work required for it. The benefits are not worth the effort and I highly doubt AMP will go mainstream in it's current form.</p>",
            "children": []
        },
        {
            "created": "2016-12-15T19:27:53Z",
            "name": "Rafael Pereira",
            "disqusUser": "bsides",
            "message": "<p>I found it was really hard to include the sass generated css into the head of my AMP site, then I found this code, that builds the css into the head after liquid makes all the fuss: {% capture include_to_scssify %}{% include main.scss %}{% endcapture %}{{ include_to_scssify | scssify }}. Also, I'm trying to include disqus to the posts but that's been proving really hard, even with the official hack. To post it in another domain is just tiring. I'm also interessed in StaticMan <a href=\"https://staticman.net/docs/\" rel=\"nofollow noopener\" title=\"https://staticman.net/docs/\">https://staticman.net/docs/</a> maybe. Anyway, thanks for this post, was really helpful!</p>",
            "children": []
        },
        {
            "created": "2017-01-01T10:09:46Z",
            "name": "Chandan",
            "disqusUser": "techzac",
            "message": "<p>After enabling AMP my Adsense earnings are decreasing. How to remove amp from my pages?</p>",
            "children": []
        }
    ],
    "/working-with-hal-in-put": [
        {
            "created": "2016-12-16T06:00:40Z",
            "name": "ruFog",
            "disqusUser": "ruFog",
            "message": "<p>About:blank looks appropriate! Nice solution.</p>",
            "children": []
        },
        {
            "created": "2016-12-22T12:47:19Z",
            "name": "Jorik",
            "disqusUser": "",
            "message": "<p>In my opinion, you should express a relation in a json body of a put request by representing it as simple as a http link. Nothing more. This works fine if the related objects already exist. Furthermore get and put do not need to use the same structure of the body. Refer CQRS</p>",
            "children": [
                {
                    "created": "2016-12-22T14:40:38Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>CQRS has little to do with this imho. What you're suggesting is not a different data-model for GET and PUT, but just a different format. If the actual underlying data-model was different, then you should really just use multiple resources (uris) for GET and PUT, and not content-negotation.</p><p>But that's not what you're suggesting. You're suggesting using the same data-model, but just a different format for GET and PUT. I fail to see the benefit of this. What problem are you trying to solve with this?</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2017-03-24T22:35:11Z",
            "name": "Wes Biggs",
            "disqusUser": "wes_biggs",
            "message": "<p>Why not use PATCH when updating? The PATCH spec (<a href=\"https://tools.ietf.org/html/rfc6902)\" rel=\"nofollow noopener\" title=\"https://tools.ietf.org/html/rfc6902)\">https://tools.ietf.org/html...</a> works well for well-defined resources like this:</p><p>PATCH /blog/6 HTTP/1.1<br>Content-Type: application/json-patch+json</p><p>{<br>  \"_links\" :{<br>    \"category\" : null<br>  }<br>}</p><p>would remove the category link.</p>",
            "children": [
                {
                    "created": "2017-03-25T17:48:41Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>PATCH is not REST for a number of reasons. You are no longer transferring state, and lose idempotency.</p><p>Probably a good solution for some systems, but not our design goal.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/sabredav-eol": [
        {
            "created": "2017-03-09T06:36:08Z",
            "name": "Morris",
            "disqusUser": "morrisjobke",
            "message": "<p>First of all: Thanks, Evert for this nice project!</p><p>Sad to hear that you step down, but it's also understandable from your point of view. It was a pleasure to met you in person and having great discussion with you. I always looked at the code of the sabre projects to get some inspiration about well written code. ;) I wish you all the best for your future journeys.</p><p>Cheers<br>Morris</p>",
            "children": []
        },
        {
            "created": "2017-03-09T09:07:50Z",
            "name": "Thomas",
            "disqusUser": "wsdwl",
            "message": "<p>Also from me: Thanks for all the work you did invest into the subject. It was a pleasure to work with you @CalConnect!</p><p>Sad to see that happening, but I can understand the reasons. I wish you a lot of fun with all your future topics!</p><p>Thomas Sch\u00e4fer</p>",
            "children": []
        },
        {
            "created": "2017-03-09T13:10:33Z",
            "name": "Jeff Puckett II",
            "disqusUser": "jeffpuckettii",
            "message": "<p>Thanks Evert for all that you've done! I hope these projects find a new guardian, but you deserve a break.</p>",
            "children": []
        },
        {
            "created": "2017-03-09T15:10:33Z",
            "name": "Hans de Raad",
            "disqusUser": "hansderaad",
            "message": "<p>Shame to see things not working out for you business wise with this awesome piece of, I'd say without any doubt, internet kitchensink software! Good to see you've found a new and positive environment to do great stuff. All the best!</p>",
            "children": []
        },
        {
            "created": "2017-03-09T15:38:55Z",
            "name": "Larry Garfield",
            "disqusUser": "larrygarfield",
            "message": "<p>Thank you Evert for all your work, and for trying to step down gracefully.  Good luck in your new role.</p><p>Maybe those projects that now rely on it like ownCloud would be interested in maintaining Sabre going forward? ;-)</p>",
            "children": [
                {
                    "created": "2017-03-09T16:14:16Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>I'm kind of hoping that that ends up being the case. The ideal situation is probably having 1 or more maintainers that also use the software on a daily basis</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2017-03-09T22:17:44Z",
            "name": "Carlos Tim\u00f3teo",
            "disqusUser": "carlostimteo",
            "message": "<p>Hello Evert. It's sad to read this. sabre/dav was your passion and almost your live when we met in Lisbon. Myself already shifted my career 4 times. It's good to change. Learn new stuff. Good luck with the transition process, and future. If you consider a visit to Portugal, again, ping me! Bye</p>",
            "children": [
                {
                    "created": "2017-03-09T22:51:00Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Thank you Carlos. Lisbon was definitely one of my highlights!!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2017-04-03T06:11:33Z",
            "name": "Stefan Kilp",
            "disqusUser": "",
            "message": "<p>Thanks for that superb project, Evert.</p><p>I think that evert would be the best person to support te project now an d in the future, So  i would hope to find a way that evert get paid for the support.i have seen a few projects using patreon successful. <a href=\"https://www.patreon.com/explore\" rel=\"nofollow noopener\" title=\"https://www.patreon.com/explore\">https://www.patreon.com/exp...</a>. i would give it a try, evert.<br>As a lot of people are using the sabre components, it should be possible to collect enought money for event.</p>",
            "children": [
                {
                    "created": "2017-04-16T22:33:54Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>It's a bit too late for that unfortunately. My main bottleneck now is time, not money. A few years ago this might have been a good idea though =)</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2017-04-03T15:03:54Z",
            "name": "rickatech",
            "disqusUser": "rickatech",
            "message": "<p>Sad to here this.  I'm with a startup in Bay Area and sabredav is a critical part of our backend.</p><p>Thing is we have a rather limited scope need for WebDAV.  Wondering if the project just became too big and complicated? If so could it be shrunk to core essentials, with some features made to be seperate maintainable plug-ins/template projects.</p><p>All the best.</p>",
            "children": [
                {
                    "created": "2017-04-16T22:33:27Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>If you're only interested in the base webdav stuff, you simply can just look at the DAV/ folder. You can ignore most of the other stuff. That said, I don't think it's really viable to remove it. I'd say that most users DO actually use carddav/caldav and I've been pretty proactive in slicing features people don't use if they are a maintenance burden.</p>",
                    "children": [
                        {
                            "created": "2017-04-17T21:54:44Z",
                            "name": "rickatech",
                            "disqusUser": "rickatech",
                            "message": "<p>Good to know.</p><p>If you / anyone knows anyone available if we pay support, let me know.  Reached out to fruux, but communication with them is very intermittent.</p><p>It looks like we're starting to wrap our heads around what a collection can do.  Using collection code, we are hoping to isolate certain WebDAV uploaded files to be seen/available only to users who are members of a given collection.  Seems like it should be straight forward, but it's slow going as I'm not sure there is a tutorial about this anywhere.  Well maybe the home collection, but that's a very simple use case.</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2017-04-05T16:43:37Z",
            "name": "Mark Dhas",
            "disqusUser": "mark_dhas",
            "message": "<p>Hey bud, what are your thoughts regarding where you'd like sabre/dav to go in the future? I'd consider taking it on myself having worked with it for the last five years pretty much consistently I'd say I'm more or less competent to do so. Let me know your thoughts.</p>",
            "children": [
                {
                    "created": "2017-04-16T22:31:53Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Hi Mark,</p><p>Sorry I didn't see your comment when you first made it. If anyone (such as yourself) is interested in taking over maintenance, it's really no longer up to me where the project should be going =) It should be based on your wants and needs. That said, I can give you some ideas of where I would have taken it if I had enough time. One of the first ones is a full upgrade to PHP 7 with strict type hints for all sabre/* projects.</p><p>If you're interested to get into this, start with writing code =) I'll happily hand over the keys to the car once to anyone if I see a certain level of quality contributions.</p><p>Hope you're well!</p>",
                    "children": [
                        {
                            "created": "2017-05-05T21:08:52Z",
                            "name": "Nino",
                            "disqusUser": "ninokopac",
                            "message": "<p>PHP7.1 strict types is where it's at. Emphasis on 7.1, since there are no nullables in 7.0</p>",
                            "children": []
                        }
                    ],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        },
        {
            "created": "2017-04-16T22:26:47Z",
            "name": "gNeandr",
            "disqusUser": "gneandr",
            "message": "<p>Thanks Evert! <br>It was always a great pleasure to work with you, great competence, great communication!<br>All the best for you ... looking forward to see you with the same success at other place(s).</p>",
            "children": []
        }
    ],
    "/rest-embedding-hal-http2": [
        {
            "created": "2017-04-04T08:10:09Z",
            "name": "Asmir Mustafic",
            "disqusUser": "goetas",
            "message": "<p>Nice idea \"push on demand\" :)</p>",
            "children": []
        },
        {
            "created": "2017-04-05T06:32:10Z",
            "name": "Saquib Rizwan",
            "disqusUser": "saquibrizwan",
            "message": "<p>Great concept, But it is very much complicated.</p>",
            "children": []
        },
        {
            "created": "2017-04-12T04:16:46Z",
            "name": "develCuy",
            "disqusUser": "develCuy",
            "message": "<p>Only thinking on REST for browsers? how about REST on JS server-side (node.js)?</p>",
            "children": [
                {
                    "created": "2017-04-12T22:32:05Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Everything I talked about applies to the server-side too. Let me know if you have specific questions about stuff, I might be able to give you some pointers. To do the HTTP/2 stuff you'll need a HTTP/2 client in node.js, which I believe exists (but I haven't used yet).</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/sabredav-maintenance-update": [
        {
            "created": "2017-04-17T00:00:33Z",
            "name": "Jeff Puckett II",
            "disqusUser": "jeffpuckettii",
            "message": "<p>I hope you find more free time; life is so precious and short.</p><p>It sounds like you've dropped all sabre projects now, but your last post mentioned you would continue on with sabre/xml - is that one out now too? If so, then I would like to have a closer look at possibly contributing/maintaining it.</p>",
            "children": [
                {
                    "created": "2017-04-17T00:56:38Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Hey Jeff,</p><p>sabre/event, sabre/xml and sabre/uri are all still fine. They're pretty much done, so there's only a little bit of upkeep and I'm not too worried about it =) The others though are really big and it's entirely a different story.</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/working-for-yelp": [
        {
            "created": "2017-04-22T17:05:01Z",
            "name": "gNeandr",
            "disqusUser": "gneandr",
            "message": "<p>Congratulation and all the BEST to you. Great also to live in SF. </p>",
            "children": []
        }
    ],
    "/structured-header-parser": [
        {
            "created": "2018-03-27T17:07:40Z",
            "name": "gggeek",
            "disqusUser": "gggeek",
            "message": "<p>Interesting draft.</p><p>I wonder however why the choice of not going simply for ascii-encoded json...</p>",
            "children": [
                {
                    "created": "2018-03-30T07:37:01Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>After your comment, I asked your question. Got an answer here: <a href=\"https://github.com/httpwg/http-extensions/issues/538\" rel=\"nofollow noopener\" title=\"https://github.com/httpwg/http-extensions/issues/538\">https://github.com/httpwg/h...</a></p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ],
    "/http-series": [
        {
            "created": "2018-06-29T10:38:55Z",
            "name": "Keith Harris",
            "disqusUser": "disqus_iPlRROkTlK",
            "message": "<p>+1</p><p>Looking forward to 418 :)</p>",
            "children": []
        },
        {
            "created": "2018-07-05T05:06:02Z",
            "name": "Kaiyulee",
            "disqusUser": "disqus_rYVpGdACmj",
            "message": "<p>499 pls</p>",
            "children": [
                {
                    "created": "2018-07-05T15:52:42Z",
                    "name": "Evert",
                    "disqusUser": "evertp",
                    "message": "<p>Yea I was thinking of doing a few non-official ones. That one seems like a good choice!</p>",
                    "children": [],
                    "url": "https://evertpot.com/",
                    "avatar": "https://s.gravatar.com/avatar/9e9b4f80c65dc6076d74cd421084e4fc?s=200"
                }
            ]
        }
    ]
}